# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import msu_scholars_api
from msu_scholars_api.rest import ApiException
from msu_scholars_api.apis.persons_api import PersonsApi


class TestPersonsApi(unittest.TestCase):
    """ PersonsApi unit test stubs """

    def setUp(self):
        self.api = msu_scholars_api.apis.persons_api.PersonsApi()

    def tearDown(self):
        pass

    def test_get_available_orderings(self):
        """
        Test case for get_available_orderings

        Lists available orderings
        """
        pass

    def test_get_available_renderings(self):
        """
        Test case for get_available_renderings

        Lists available renderings
        """
        pass

    def test_get_person(self):
        """
        Test case for get_person

        Get person
        """
        pass

    def test_list_active_persons(self):
        """
        Test case for list_active_persons

        Lists all active persons
        """
        pass

    def test_list_former_persons(self):
        """
        Test case for list_former_persons

        Lists all former persons
        """
        pass

    def test_list_person_activities(self):
        """
        Test case for list_person_activities

        Lists activities on a person
        """
        pass

    def test_list_person_applications(self):
        """
        Test case for list_person_applications

        Lists applications on a person
        """
        pass

    def test_list_person_awards(self):
        """
        Test case for list_person_awards

        Lists awards on a person
        """
        pass

    def test_list_person_curriculum_vitae(self):
        """
        Test case for list_person_curriculum_vitae

        Lists curriculum vitae on a person
        """
        pass

    def test_list_person_fingerprints(self):
        """
        Test case for list_person_fingerprints

        Lists fingerprints on a person
        """
        pass

    def test_list_person_press_media(self):
        """
        Test case for list_person_press_media

        Lists press / media on a person
        """
        pass

    def test_list_person_prizes(self):
        """
        Test case for list_person_prizes

        Lists prizes on a person
        """
        pass

    def test_list_person_projects(self):
        """
        Test case for list_person_projects

        Lists projects on a person
        """
        pass

    def test_list_person_research_outputs(self):
        """
        Test case for list_person_research_outputs

        Lists research outputs on a person
        """
        pass

    def test_list_person_student_theses(self):
        """
        Test case for list_person_student_theses

        Lists student theses on a person
        """
        pass

    def test_list_persons(self):
        """
        Test case for list_persons

        Lists all persons
        """
        pass

    def test_list_persons_0(self):
        """
        Test case for list_persons_0

        Complex operation for persons
        """
        pass


if __name__ == '__main__':
    unittest.main()
