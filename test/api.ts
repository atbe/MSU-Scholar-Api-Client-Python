/**
 * PURE API 510
 * This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13
 *
 * OpenAPI spec version: 510
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import request = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://scholars.opb.msu.edu/ws/api/510';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class IntervalInteger {
    'min': number;
    'max': number;
    'includeMin': boolean;
    'includeMax': boolean;
    'degenerate': boolean;
    'emptySet': boolean;
    'bounded': boolean;
    'unBounded': boolean;
    'closed': boolean;
}

export class WSAbstractActivity {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'title': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'categories': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'period': WSCompoundDateRange;
    'degreeOfRecognitions': Array<WSClassification>;
    'classifiedSources': Array<WSClassifiedValue>;
    'personAssociations': Array<WSClassifiedPersonAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'indicators': Array<WSClassification>;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the Dataset module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentThesis': Array<WSStudentThesisRef>;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSAbstractChange {
}

export class WSAbstractCurriculumVitaeBlock {
}

export class WSAccount {
    'id': number;
    'costCenters': Array<WSClassification>;
    'classifications': Array<WSClassification>;
    'entries': Array<WSAccountEntry>;
    'specification': string;
    'budget': number;
    'recoveryPercentage': number;
    'funderContribution': number;
    'yearlyBudgets': Array<WSYearlyBudget>;
}

export class WSAccountEntry {
    'yearMonth': WSCompoundDate;
    'amount': number;
}

export class WSActivityListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSAbstractActivity>;
}

export class WSActivityQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'categoryUris': Array<string>;
    'degreeOfRecognitionUris': Array<string>;
    'period': WSCompoundDateRange;
    'workflowSteps': Array<string>;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forResearchOutputs': WSResearchOutputsQuery;
}

export class WSActivityRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSAbstractActivity;
}

export class WSAddress {
    'address1': string;
    'address2': string;
    'address3': string;
    'address4': string;
    'address5': string;
    'postalCode': string;
    'city': string;
    'countries': Array<WSClassification>;
    'subdivisions': Array<WSClassification>;
    'state': string;
    'geoLocation': WSGeoLocation;
}

export class WSApplication {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'natureTypes': Array<WSClassification>;
    /**
    * Not available when the Award Management module is enabled
    */
    'statuses': Array<WSApplicationStatus>;
    'shortTitles': Array<WSLocalizedString>;
    'acronym': string;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'classifiedSources': Array<WSClassifiedValue>;
    /**
    * Not available when the Award Management module is disabled
    */
    'fundingOpportunity': WSFundingOpportunityRef;
    'applicants': Array<WSClassifiedApplicantAssociation>;
    'documents': Array<WSApplicationDocument>;
    'budgetDifference': number;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'collaborative': boolean;
    'collaborators': Array<WSCollaboratorAssociation>;
    'totalAcademicOwnershipPercentage': number;
    'fundings': Array<WSApplicationFundingAssociation>;
    'totalAppliedAmount': number;
    'expectedPeriod': WSDateRange;
    'relatedProject': WSUPMProjectRef;
    'relatedApplications': Array<WSApplicationRef>;
    'relatedAwards': Array<WSAwardRef>;
    /**
    * Only available when the Award Management module is enabled
    */
    'relatedEthicalReviews': Array<WSEthicalReviewRef>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'keywordGroups': Array<WSKeywordGroup>;
    'visibilities': Array<WSVisibility>;
    'confidential': boolean;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSApplicationDocument {
    'id': number;
    'title': string;
    'documentTypes': Array<WSClassification>;
    'url': string;
    'documentLicenses': Array<WSClassification>;
    'visibleOnPortalDate': Date;
    'visibilities': Array<WSVisibility>;
    'creator': string;
    'created': Date;
    'documentVersionTypes': Array<WSClassification>;
}

export class WSApplicationFundingAssociation {
    'id': number;
    'funder': WSExternalOrganisationRef;
    'fundingClassifications': Array<WSClassification>;
    'fundingProjectScheme': string;
    'financial': boolean;
    'estimatedValue': number;
    'nonFinancialDescription': string;
    'appliedAmountInAppliedCurrency': number;
    'appliedCurrencies': Array<WSClassification>;
    'appliedAmount': number;
    'institutionalEstimatedValue': number;
    'institutionalPart': number;
    'institutionalContribution': number;
    'institutionalFEC': number;
    'fundingCollaborators': Array<WSFundingCollaboratorAssociation>;
    'budgetAndExpenditures': Array<WSFundingExpenditureAssociation>;
    'visibilities': Array<WSVisibility>;
    'fecpercentage': number;
}

export class WSApplicationListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSApplication>;
}

export class WSApplicationRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSApplication;
}

export class WSApplicationStatus {
    'statuses': Array<WSClassification>;
    'date': Date;
    'documents': Array<WSDocument>;
}

export class WSApplicationsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'period': WSCompoundDateRange;
    'statusUris': Array<string>;
    'financial': boolean;
    'workflowSteps': Array<string>;
    'externalCollaborators': WSExternalOrganisationsQuery;
    'internalCollaborators': WSOrganisationsQuery;
    'managingOrganisationalUnits': WSOrganisationsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
    'forProjects': WSUPMProjectsQuery;
    'forAwards': WSAwardsQuery;
}

export class WSAward {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'natureTypes': Array<WSClassification>;
    'statuses': Array<WSAwardStatus>;
    /**
    * Only available when the Award Management module is enabled
    */
    'statusDetails': WSAwardStatusDetails;
    'shortTitles': Array<WSLocalizedString>;
    'acronym': string;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'classifiedSources': Array<WSClassifiedValue>;
    'awardholders': Array<WSClassifiedAwardholderAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'collaborative': boolean;
    'collaborators': Array<WSCollaboratorAssociation>;
    'totalAcademicOwnershipPercentage': number;
    'fundings': Array<WSAwardFundingAssociation>;
    'totalAwardedAmount': number;
    'totalSpendAmount': number;
    'actualPeriod': WSDateRange;
    'expectedPeriod': WSDateRange;
    'awardDate': Date;
    'curtailed': boolean;
    'curtailDate': Date;
    'curtailReason': string;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'relatedProject': WSUPMProjectRef;
    'relatedApplications': Array<WSApplicationRef>;
    'relatedAwards': Array<WSAwardRef>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'keywordGroups': Array<WSKeywordGroup>;
    'visibilities': Array<WSVisibility>;
    'confidential': boolean;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSAwardFundingAssociation {
    'id': number;
    'funder': WSExternalOrganisationRef;
    'fundingClassifications': Array<WSClassification>;
    'fundingProjectScheme': string;
    'financial': boolean;
    'estimatedValue': number;
    'nonFinancialDescription': string;
    'awardedAmountInAwardedCurrency': number;
    'awardedCurrencies': Array<WSClassification>;
    'awardedAmount': number;
    'institutionalEstimatedValue': number;
    'institutionalPart': number;
    'institutionalContribution': number;
    'institutionalFEC': number;
    'fundingCollaborators': Array<WSFundingCollaboratorAssociation>;
    'budgetAndExpenditures': Array<WSFundingExpenditureAssociation>;
    'visibilities': Array<WSVisibility>;
    'fecpercentage': number;
}

export class WSAwardListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSAward>;
}

export class WSAwardRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSAward;
}

export class WSAwardStatus {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSAwardStatus.KeyEnum;
}

export namespace WSAwardStatus {
    export enum KeyEnum {
        NOSTATUS = <any> 'NO_STATUS',
        NOTSTARTED = <any> 'NOT_STARTED',
        RUNNING = <any> 'RUNNING',
        FINISHED = <any> 'FINISHED',
        CURTAILED = <any> 'CURTAILED',
        DECLINED = <any> 'DECLINED',
        INTERNALLYAPPROVED = <any> 'INTERNALLY_APPROVED',
        INCONTRACTNEGOTIATION = <any> 'IN_CONTRACT_NEGOTIATION'
    }
}
export class WSAwardStatusDetails {
    'statuses': Array<WSAwardStatusDetailsStatus>;
    'internallyApprovedDate': Date;
    'declined': boolean;
    'declinationDate': Date;
    'declinedReason': string;
    'relinquished': boolean;
    'relinquishmentDate': Date;
    'relinquishmentReason': string;
}

export class WSAwardStatusDetailsStatus {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSAwardStatusDetailsStatus.KeyEnum;
}

export namespace WSAwardStatusDetailsStatus {
    export enum KeyEnum {
        ContractNegotiation = <any> 'ContractNegotiation',
        InternallyApproved = <any> 'InternallyApproved',
        Terminated = <any> 'Terminated'
    }
}
export class WSAwardsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'period': WSCompoundDateRange;
    'financial': boolean;
    'workflowSteps': Array<string>;
    'funders': WSExternalOrganisationsQuery;
    'externalCollaborators': WSExternalOrganisationsQuery;
    'internalCollaborators': WSOrganisationsQuery;
    'managingOrganisationalUnits': WSOrganisationsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
    'forProjects': WSUPMProjectsQuery;
}

export class WSChangeListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'lastId': number;
    'moreChanges': boolean;
    'items': Array<WSAbstractChange>;
}

export class WSClassification {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'uri': string;
}

export class WSClassificationScheme {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'baseUri': string;
    'typeClassifications': Array<WSClassification>;
    'descriptions': Array<WSLocalizedString>;
    'associatedSchemes': Array<WSClassificationSchemeRef>;
    'containedClassifications': Array<WSClassification>;
    'info': WSContentInformation;
}

export class WSClassificationSchemeListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSClassificationScheme>;
}

export class WSClassificationSchemeRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSClassificationScheme;
}

export class WSClassificationSchemesQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'baseUri': string;
    'containedClassificationUris': Array<string>;
}

export class WSClassifiedAddress {
    'id': number;
    'addressTypes': Array<WSClassification>;
    'addressLines': string;
    'street': string;
    'building': string;
    'postalcode': string;
    'city': string;
    'countries': Array<WSClassification>;
    'subdivisions': Array<WSClassification>;
    'geoLocation': WSGeoLocation;
}

export class WSClassifiedApplicantAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'academicOwnershipPercentage': number;
}

export class WSClassifiedAuthorAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'groupAuthor': string;
    'contributionDescription': string;
    'contributionPercentage': number;
    'countries': Array<WSClassification>;
    'hidden': boolean;
}

export class WSClassifiedAwardholderAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'period': WSDateRange;
    'academicOwnershipPercentage': number;
}

export class WSClassifiedCourseDevelopedByAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
}

export class WSClassifiedDataSetPersonAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'period': WSDateRange;
}

export class WSClassifiedFileRef {
    'typeUri': string;
    'typeLocale': string;
    'type': string;
    'url': string;
    'filename': string;
    'mimetype': string;
    'size': number;
}

export class WSClassifiedInternalExternalPersonAssociation {
    'id': number;
    'personRoles': Array<WSClassification>;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
}

export class WSClassifiedLocalizedValue {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'typeUri': string;
    'type': string;
}

export class WSClassifiedName {
    'classifications': Array<WSClassification>;
    'name': WSName;
}

export class WSClassifiedParticipantAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'period': WSDateRange;
    'academicOwnershipPercentage': number;
    'plannedResearcherCommitmentPercentage': number;
}

export class WSClassifiedPersonAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
}

export class WSClassifiedValue {
    'formatted': boolean;
    'typeUri': string;
    'typeLocale': string;
    'type': string;
    'value': string;
}

export class WSCollaboratorAssociation {
    'id': number;
    'types': Array<WSClassification>;
    'leadCollaborator': boolean;
    'organisation': WSOrganisationRef;
    'externalOrganisation': WSExternalOrganisationRef;
}

export class WSCompoundDate {
    'year': number;
    'month': number;
    'day': number;
}

export class WSCompoundDateRange {
    'startDate': WSCompoundDate;
    'endDate': WSCompoundDate;
}

export class WSConcept {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'thesauri': WSThesauriRef;
    'conceptId': string;
    'parentConcepts': Array<WSConceptRef>;
    'semanticGroups': Array<WSSemanticGroupRef>;
    'name': Array<WSLocalizedString>;
    'terms': Array<WSLocalizedString>;
    'idf': number;
    'info': WSContentInformation;
}

export class WSConceptListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSConcept>;
}

export class WSConceptRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSConceptRef;
}

export class WSContentInformation {
    'createdBy': string;
    'createdDate': Date;
    'modifiedBy': string;
    'modifiedDate': Date;
    'portalUrl': string;
    'usedContent': Array<WSUsedContent>;
    'previousUuids': Array<string>;
}

export class WSCourse {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'period': WSDateRange;
    'levels': Array<WSClassification>;
    'formats': Array<WSClassification>;
    'classifiedSources': Array<WSClassifiedValue>;
    'creators': Array<WSClassifiedCourseDevelopedByAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'occurrences': Array<WSCourseOccurrence>;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'keywordGroups': Array<WSKeywordGroup>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
}

export class WSCourseListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSCourse>;
}

export class WSCourseOccurrence {
    'id': number;
    'semesters': Array<WSClassification>;
    'year': number;
    'lecturers': Array<WSClassifiedPersonAssociation>;
    'numberOfStudents': number;
    'grade': string;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
}

export class WSCoursesQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'courseStatus': WSCoursesQuery.CourseStatusEnum;
    'titles': Array<string>;
    'types': Array<string>;
    'formats': Array<string>;
    'courseLevels': Array<string>;
    'typeUris': Array<string>;
    'workflowSteps': Array<string>;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forLecturerOrganisationalUnits': WSOrganisationsQuery;
    'forLecturers': WSPersonsQuery;
}

export namespace WSCoursesQuery {
    export enum CourseStatusEnum {
        ACTIVE = <any> 'ACTIVE',
        FORMER = <any> 'FORMER'
    }
}
export class WSCurriculumVitae {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'title': string;
    'person': WSPersonRef;
    'types': Array<WSClassification>;
    'blocks': Array<WSAbstractCurriculumVitaeBlock>;
    'confidential': boolean;
    'visibilities': Array<WSVisibility>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
}

export class WSCurriculumVitaeListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSCurriculumVitae>;
}

export class WSCurriculumVitaeQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'forPersons': WSPersonsQuery;
}

export class WSDataSet {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'temporalCoveragePeriod': WSCompoundDateRange;
    'dataProductionPeriod': WSCompoundDateRange;
    'classifiedSources': Array<WSClassifiedValue>;
    'geographicalCoverages': Array<WSLocalizedString>;
    'geoLocation': WSGeoLocation;
    'personAssociations': Array<WSClassifiedDataSetPersonAssociation>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'publisher': WSPublisherRef;
    'doi': string;
    'documents': Array<WSDocument>;
    'physicalDatas': Array<WSDataSetPhysicalData>;
    'contactPerson': WSPersonRef;
    'legalConditions': Array<WSDataSetLegalCondition>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'publicationDate': WSCompoundDate;
    'openAccessPermissions': Array<WSClassification>;
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentThesis': Array<WSStudentThesisRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    'natureTypes': Array<WSClassification>;
    'links': Array<WSLink>;
    'workflows': Array<WSWorkflow>;
    'keywordGroups': Array<WSKeywordGroup>;
    'visibilities': Array<WSVisibility>;
    'confidential': boolean;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
    'openAccessEmbargoMonths': number;
    'openAccessEmbargoDate': Date;
}

export class WSDataSetLegalCondition {
    'id': number;
    'types': Array<WSClassification>;
    'description': string;
}

export class WSDataSetListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSDataSet>;
}

export class WSDataSetPhysicalData {
    'id': number;
    'title': string;
    'storageLocation': string;
    'accessDescription': string;
    'media': string;
    'types': Array<WSClassification>;
}

export class WSDataSetRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSDataSet;
}

export class WSDataSetsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
    'forPublishers': WSPublishersQuery;
}

export class WSDateRange {
    'startDate': Date;
    'endDate': Date;
}

export class WSDocument {
    'id': number;
    'title': string;
    'documentTypes': Array<WSClassification>;
    'url': string;
    'documentLicenses': Array<WSClassification>;
    'visibleOnPortalDate': Date;
    'visibilities': Array<WSVisibility>;
    'creator': string;
    'created': Date;
}

export class WSERA2015FieldOfResearchAssociation {
    'fieldsOfResearch': Array<WSClassification>;
    'splitPercentage': number;
}

export class WSElectronicVersionAdditionalFileAssociation {
    'id': number;
    'licenseTypes': Array<WSClassification>;
    'userDefinedLicense': string;
    'visibleOnPortalDate': Date;
    'creator': string;
    'created': Date;
    'file': WSFileRef;
    'title': string;
    'accessTypes': Array<WSClassification>;
    'embargoStartDate': Date;
    'embargoEndDate': Date;
}

export class WSElectronicVersionAssociation {
    'id': number;
    'accessTypes': Array<WSClassification>;
    'versionTypes': Array<WSClassification>;
    'embargoPeriod': WSDateRange;
    'licenseTypes': Array<WSClassification>;
    'userDefinedLicense': string;
    'visibleOnPortalDate': Date;
    'creator': string;
    'created': Date;
}

export class WSEligibilityFulfillmentType {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSEligibilityFulfillmentType.KeyEnum;
}

export namespace WSEligibilityFulfillmentType {
    export enum KeyEnum {
        RECOMMENDATION = <any> 'RECOMMENDATION',
        REQUIREMENT = <any> 'REQUIREMENT'
    }
}
export class WSEquipment {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'descriptions': Array<WSLocalizedString>;
    'acquisitionDate': Date;
    'responsiblePerson': WSPersonRef;
    'managingOrganisationalUnit': WSOrganisationRef;
    'keywordGroups': Array<WSKeywordGroup>;
    'visibilities': Array<WSVisibility>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSEquipmentListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSEquipment>;
}

export class WSEquipmentsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
}

export class WSErrorResult {
    'code': number;
    'title': string;
    'description': string;
}

export class WSEthicalReview {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'replies': Array<WSEthicalReviewReply>;
    'classifiedSources': Array<WSClassifiedValue>;
    'relatedApplication': WSApplicationRef;
    'personAssociations': Array<WSClassifiedPersonAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'documents': Array<WSEthicalReviewDocument>;
    'links': Array<WSLink>;
    'keywordGroups': Array<WSKeywordGroup>;
    'confidential': boolean;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSEthicalReviewDocument {
    'id': number;
    'title': string;
    'documentTypes': Array<WSClassification>;
    'url': string;
    'documentLicenses': Array<WSClassification>;
    'visibleOnPortalDate': Date;
    'visibilities': Array<WSVisibility>;
    'creator': string;
    'created': Date;
    'documentVersionTypes': Array<WSClassification>;
}

export class WSEthicalReviewListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSEthicalReview>;
}

export class WSEthicalReviewRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSEthicalReview;
}

export class WSEthicalReviewReply {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSEthicalReviewReply.KeyEnum;
}

export namespace WSEthicalReviewReply {
    export enum KeyEnum {
        PENDING = <any> 'PENDING',
        APPROVED = <any> 'APPROVED',
        DECLINED = <any> 'DECLINED'
    }
}
export class WSEthicalReviewsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
}

export class WSEvent {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'subTitles': Array<WSLocalizedString>;
    'abbreviatedTitles': Array<WSLocalizedString>;
    'conferenceNumber': string;
    'description': Array<WSLocalizedString>;
    'period': WSDateRange;
    'links': Array<WSLink>;
    'degreeOfRecognitions': Array<WSClassification>;
    'classifiedSources': Array<WSClassifiedValue>;
    'relatedEvents': Array<WSEventRef>;
    'location': string;
    'city': string;
    'countries': Array<WSClassification>;
    'subdivisions': Array<WSClassification>;
    'organisers': Array<WSInternalExternalOrganisationAssociation>;
    'sponsorOrganisations': Array<WSInternalExternalOrganisationAssociation>;
    'geoLocation': WSGeoLocation;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'workflows': Array<WSWorkflow>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
}

export class WSEventListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSEvent>;
}

export class WSEventRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSEvent;
}

export class WSEventsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'titles': Array<string>;
    'typeUris': Array<string>;
    'workflowSteps': Array<string>;
}

export class WSEvidenceContactInformation {
    'id': number;
    'contactName': string;
    'contactDetails': string;
    'corroborateText': string;
    'consentObtained': boolean;
}

export class WSExternalOrganisation {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'name': string;
    'types': Array<WSClassification>;
    'natureTypes': Array<WSClassification>;
    'parent': WSExternalOrganisationRef;
    'acronym': string;
    'alternativeNames': Array<string>;
    'classifiedSources': Array<WSClassifiedValue>;
    'address': WSAddress;
    'phoneNumber': string;
    'mobilePhoneNumber': string;
    'fax': string;
    'email': string;
    'bankAccountNumber': string;
    'vatNumber': string;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'keywordGroups': Array<WSKeywordGroup>;
    'note': string;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSExternalOrganisationListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSExternalOrganisation>;
}

export class WSExternalOrganisationRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSExternalOrganisation;
}

export class WSExternalOrganisationsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
}

export class WSExternalPerson {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'name': WSName;
    'types': Array<WSClassification>;
    'titles': Array<WSLocalizedString>;
    'countries': Array<WSClassification>;
    'genders': Array<WSGender>;
    'classifiedSources': Array<WSClassifiedValue>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'keywordGroups': Array<WSKeywordGroup>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSExternalPersonListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSExternalPerson>;
}

export class WSExternalPersonRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSExternalPerson;
}

export class WSExternalPersonsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
}

export class WSExternalableInformation {
    'source': string;
    'sourceId': string;
    'externallyManaged': boolean;
    'secondarySources': Array<WSSecondarySource>;
}

export class WSFileRef {
    'fileName': string;
    'mimeType': string;
    'size': number;
    'fileURL': string;
    'digestAlgorithm': string;
    'digest': string;
}

export class WSFingerprint {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'contentId': number;
    'contentUuid': string;
    'contentFamily': string;
    'contentVersion': number;
    'concepts': Array<WSRankedConcept>;
    'info': WSContentInformation;
}

export class WSFingerprintListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSFingerprint>;
}

export class WSFingerprintsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'contentIds': Array<number>;
    'contentFamily': string;
}

export class WSFundingCollaboratorAssociation {
    'id': number;
    'collaborator': WSExternalOrganisationRef;
    'institutionalPart': number;
    'estimatedValue': number;
}

export class WSFundingExpenditureAssociation {
    'id': number;
    'organisation': WSOrganisationRef;
    'costCenters': Array<WSClassification>;
    'accounts': Array<WSAccount>;
}

export class WSFundingOpportunitiesQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
}

export class WSFundingOpportunity {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'types': Array<WSClassification>;
    'titles': Array<WSLocalizedString>;
    'descriptions': Array<WSLocalizedString>;
    'classifiedSources': Array<WSClassifiedValue>;
    'announcementUrl': string;
    'fundingOrganisation': WSExternalOrganisationRef;
    'openingDate': Date;
    'letterOfIntentDate': Date;
    'deadline': Date;
    'active': boolean;
    'awardCeiling': number;
    'awardCeilingCurrencies': Array<WSClassification>;
    'estimatedFunding': number;
    'estimatedFundingCurrencies': Array<WSClassification>;
    'eligibilities': Array<WSFundingOpportunityEligibility>;
    'academicDegreeEligibilities': Array<WSFundingOpportunityEligibility>;
    'limitedSubmission': boolean;
    'numberOfAnnualApplicationsPerHEI': number;
    'numberOfAwards': number;
    'openAccessRequirements': boolean;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'applications': Array<WSApplicationRef>;
    'externalableInfo': WSExternalableInformation;
    'keywordGroups': Array<WSKeywordGroup>;
    'info': WSContentInformation;
}

export class WSFundingOpportunityEligibility {
    'eligibilityTypes': Array<WSClassification>;
    'eligibilityFulfillmentTypes': Array<WSEligibilityFulfillmentType>;
}

export class WSFundingOpportunityListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSFundingOpportunity>;
}

export class WSFundingOpportunityRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSFundingOpportunity;
}

export class WSGender {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSGender.KeyEnum;
}

export namespace WSGender {
    export enum KeyEnum {
        MALE = <any> 'MALE',
        FEMALE = <any> 'FEMALE',
        UNKNOWN = <any> 'UNKNOWN'
    }
}
export class WSGeoLocation {
    'point': string;
    'polygon': string;
    'calculatedPoint': string;
}

export class WSHonoraryStaffOrganisationAssociation {
    'id': number;
    'person': WSPersonRef;
    'affiliationId': string;
    'addresses': Array<WSClassifiedAddress>;
    'emails': Array<WSClassifiedValue>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'employmentTypes': Array<WSClassification>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'organisation': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'jobDescriptions': Array<WSLocalizedString>;
    'jobTitles': Array<WSClassification>;
    'primaryAssociation': boolean;
}

export class WSHtmlRendering {
    'format': string;
    'locale': string;
    'html': string;
}

export class WSImpact {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'statuses': Array<WSClassification>;
    'period': WSCompoundDateRange;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'categories': Array<WSClassification>;
    'levels': Array<WSClassification>;
    'classifiedSources': Array<WSClassifiedValue>;
    'participants': Array<WSImpactClassifiedParticipantAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'evidenceList': Array<WSImpactEvidence>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentTheses': Array<WSStudentThesisRef>;
    /**
    * Only available when the Dataset module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    'visibilities': Array<WSVisibility>;
    'confidential': boolean;
    'keywordGroups': Array<WSKeywordGroup>;
    'workflows': Array<WSWorkflow>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
}

export class WSImpactClassifiedParticipantAssociation {
    'id': number;
    'person': WSPersonRef;
    'externalPerson': WSExternalPersonRef;
    'name': WSName;
    'personRoles': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'email': string;
    'externalNote': string;
    'externalOrganisation': string;
    'phone': string;
    'sectors': Array<WSClassification>;
    'countries': Array<WSClassification>;
    'academicOwnershipPercentage': number;
}

export class WSImpactEvidence {
    'id': number;
    'evidenceTitles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'evidenceIndicators': Array<WSClassification>;
    'evidenceSummaries': Array<WSLocalizedString>;
    'evidenceContactInformations': Array<WSEvidenceContactInformation>;
    'period': WSCompoundDateRange;
    'links': Array<WSLink>;
    'documents': Array<WSDocument>;
}

export class WSImpactListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSImpact>;
}

export class WSImpactRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSImpact;
}

export class WSImpactsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'natureClassificationUris': Array<string>;
    'statuses': Array<string>;
    'period': WSCompoundDateRange;
    'typeUris': Array<string>;
    'workflowSteps': Array<string>;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
}

export class WSInternalExternalOrganisationAssociation {
    'id': number;
    'organisation': WSOrganisationRef;
    'externalOrganisation': WSExternalOrganisationRef;
}

export class WSJournal {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSTemporalTitle>;
    'types': Array<WSClassification>;
    'alternativeTitles': Array<string>;
    'electronicISSNs': Array<string>;
    'alternativeISSNs': Array<string>;
    'countries': Array<WSClassification>;
    'classifiedSources': Array<WSClassifiedValue>;
    'doajIndexed': boolean;
    'preprintArchiving': string;
    'preprintRestrictions': Array<string>;
    'postprintArchiving': string;
    'postprintRestrictions': Array<string>;
    'postprintConditions': Array<string>;
    'postprintCopyright': string;
    'pdfArchiving': string;
    'pdfRestrictions': Array<string>;
    'sherpaRomeoColors': Array<WSClassification>;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'workflows': Array<WSWorkflow>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
    'scopusMetrics': Array<WSScopusMetrics>;
    'publisher': WSPublisherRef;
    'sherpaRomeoCustomerInformation': string;
    'issns': Array<WSTemporalISSN>;
}

export class WSJournalListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSJournal>;
}

export class WSJournalsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'titles': Array<string>;
    'typeUris': Array<string>;
    'issns': Array<string>;
    'workflowSteps': Array<string>;
}

export class WSKeyword {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'uri': string;
}

export class WSKeywordGroup {
    'logicalName': string;
    'types': Array<WSClassification>;
    'keywords': Array<WSKeyword>;
}

export class WSLink {
    'id': number;
    'url': string;
    'descriptions': Array<WSLocalizedString>;
    'linkTypes': Array<WSClassification>;
}

export class WSLocalizedString {
    'locale': string;
    'formatted': boolean;
    'value': string;
}

export class WSMetaData {
    'version': string;
    'baseVersion': string;
    'templateVersion': string;
    'coreVersion': string;
    'currentUsername': string;
    'currentAuthenticationScopeName': string;
    'dateFormats': Array<WSMetaDateFormat>;
    'interfaceLocales': Array<string>;
    'submissionLocales': Array<string>;
    'currency': string;
    'country': string;
    'features': Array<WSMetaFeature>;
}

export class WSMetaDateFormat {
    'formatName': string;
    'formatPattern': string;
}

export class WSMetaFeature {
    'feature': string;
    'description': string;
}

export class WSName {
    'firstName': string;
    'lastName': string;
}

export class WSNavigationLink {
    'ref': string;
    'href': string;
}

export class WSOrderingsList {
    'orderings': Array<string>;
}

export class WSOrganisation {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'nameVariants': Array<WSClassifiedLocalizedValue>;
    'profileInformations': Array<WSClassifiedLocalizedValue>;
    'photos': Array<WSClassifiedFileRef>;
    'classifiedSources': Array<WSClassifiedValue>;
    'addresses': Array<WSClassifiedAddress>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'emails': Array<WSClassifiedValue>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'period': WSDateRange;
    'takenOverBy': WSOrganisationRef;
    'parents': Array<WSOrganisationRef>;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available on the DK and UK bases
    */
    'costCenters': Array<WSClassification>;
    'visibilities': Array<WSVisibility>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSOrganisationListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSOrganisation>;
}

export class WSOrganisationRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSOrganisation;
}

export class WSOrganisationsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'organisationalUnitTypeUris': Array<string>;
    'organisationPeriodStatus': WSOrganisationsQuery.OrganisationPeriodStatusEnum;
}

export namespace WSOrganisationsQuery {
    export enum OrganisationPeriodStatusEnum {
        ACTIVE = <any> 'ACTIVE',
        FORMER = <any> 'FORMER'
    }
}
export class WSPerson {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'name': WSName;
    /**
    * Only available if it is made public
    */
    'genders': Array<WSClassification>;
    /**
    * Only available if it is made public
    */
    'dateOfBirth': Date;
    'nationalities': Array<WSClassification>;
    'nameVariants': Array<WSClassifiedName>;
    'titles': Array<WSClassifiedLocalizedValue>;
    'classifiedSources': Array<WSClassifiedValue>;
    'orcid': string;
    'profilePhotos': Array<WSClassifiedFileRef>;
    'links': Array<WSLink>;
    'startDateAsResearcher': Date;
    'retirementDate': Date;
    /**
    * Only available when the Author Profile module is enabled
    */
    'profiled': boolean;
    'scopusHIndex': number;
    'profileInformations': Array<WSClassifiedLocalizedValue>;
    'studentOrganisationAssociations': Array<WSStudentOrganisationAssociation>;
    'staffOrganisationAssociations': Array<WSStaffOrganisationAssociation>;
    'visitingScholarOrganisationAssociations': Array<WSVisitingScholarOrganisationAssociation>;
    'honoraryStaffOrganisationAssociations': Array<WSHonoraryStaffOrganisationAssociation>;
    'supervisorForRelations': Array<WSPersonSupervisorAssociation>;
    /**
    * Only available when the proper configuration is enabled
    */
    'leaveOfAbsence': WSPersonClassifiedLeaveOfAbsence;
    'employeeStartDate': Date;
    'employeeEndDate': Date;
    'fte': number;
    /**
    * Only available when the proper configuration is enabled
    */
    'affiliationNote': string;
    'externalPositions': Array<WSPersonExternalPosition>;
    'educations': Array<WSPersonEducation>;
    /**
    * Only available when the proper configuration is enabled
    */
    'professionalQualifications': Array<WSProfessionalQualification>;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    /**
    * Only available when the proper configuration is enabled
    */
    'willTakePhdStudents': boolean;
    /**
    * Only available when the proper configuration is enabled
    */
    'phdResearchProjects': string;
    /**
    * Only available when the proper configuration is enabled
    */
    'privateAddress': WSClassifiedAddress;
    'visibilities': Array<WSVisibility>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
    'expert': boolean;
}

export class WSPersonClassifiedLeaveOfAbsence {
    'typesOfLeave': Array<WSClassification>;
    'period': WSDateRange;
}

export class WSPersonEducation {
    'id': number;
    'period': WSCompoundDateRange;
    'fieldOfStudies': Array<WSClassification>;
    'qualifications': Array<WSClassification>;
    'awardDate': Date;
    'organisations': Array<WSInternalExternalOrganisationAssociation>;
    'projectTitles': Array<WSLocalizedString>;
}

export class WSPersonExternalPosition {
    'id': number;
    'appointments': Array<WSClassification>;
    'externalOrganisation': WSExternalOrganisationRef;
    'period': WSCompoundDateRange;
}

export class WSPersonListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSPerson>;
}

export class WSPersonOrganisationAssociation {
    'id': number;
    'person': WSPersonRef;
    'affiliationId': string;
    'addresses': Array<WSClassifiedAddress>;
    'emails': Array<WSClassifiedValue>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'employmentTypes': Array<WSClassification>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'organisation': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'primaryAssociation': boolean;
}

export class WSPersonRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSPerson;
}

export class WSPersonSupervisorAssociation {
    'id': number;
    'supervisor': WSPersonRef;
    'externalSupervisor': WSExternalPersonRef;
    'supervisionPercentage': number;
    'period': WSDateRange;
    'supervisorRoles': Array<WSClassification>;
    'student': WSPersonOrganisationAssociation;
}

export class WSPersonsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'employmentTypeUris': Array<string>;
    'employmentStatus': WSPersonsQuery.EmploymentStatusEnum;
    'employmentPeriod': WSCompoundDateRange;
    'personOrganisationAssociationTypes': Array<WSPersonsQuery.PersonOrganisationAssociationTypesEnum>;
    'forOrganisations': WSOrganisationsQuery;
}

export namespace WSPersonsQuery {
    export enum EmploymentStatusEnum {
        ACTIVE = <any> 'ACTIVE',
        FORMER = <any> 'FORMER'
    }
    export enum PersonOrganisationAssociationTypesEnum {
        STAFF = <any> 'STAFF',
        STUDENTS = <any> 'STUDENTS',
        VISITINGSCHOLARS = <any> 'VISITING_SCHOLARS',
        HONORARYSTAFF = <any> 'HONORARY_STAFF'
    }
}
export class WSPressMedia {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'categories': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'references': Array<WSReference>;
    'personAssociations': Array<WSClassifiedPersonAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'event': WSEventRef;
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    /**
    * Only available when the DataSet module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentThesis': Array<WSStudentThesisRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSPressMediaListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSPressMedia>;
}

export class WSPressMediaQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'period': WSCompoundDateRange;
    'workflowSteps': Array<string>;
    'managingOrganisationalUnits': WSOrganisationsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
}

export class WSPressMediaRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSPressMedia;
}

export class WSPrize {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'categories': Array<WSClassification>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'awardDate': WSCompoundDate;
    'degreeOfRecognitions': Array<WSClassification>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'grantingOrganisations': Array<WSInternalExternalOrganisationAssociation>;
    'event': WSEventRef;
    'classifiedSources': Array<WSClassifiedValue>;
    'receiversOfPrize': Array<WSClassifiedPersonAssociation>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'relatedPrizes': Array<WSPrizeRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the DataSet module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentThesis': Array<WSStudentThesisRef>;
    'keywordGroups': Array<WSKeywordGroup>;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSPrizeListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSPrize>;
}

export class WSPrizeRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSPrize;
}

export class WSPrizesQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'degreeOfRecognitionUris': Array<string>;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
}

export class WSProfessionalQualification {
    'id': number;
    'qualifications': Array<WSLocalizedString>;
    'abbreviatedQualifications': Array<WSLocalizedString>;
    'period': WSCompoundDateRange;
}

export class WSPublicationStatus {
    'current': boolean;
    'publicationStatuses': Array<WSClassification>;
    'publicationDate': WSCompoundDate;
}

export class WSPublisher {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'name': string;
    'types': Array<WSClassification>;
    'alternativeNames': Array<string>;
    'keywordGroups': Array<WSKeywordGroup>;
    'countries': Array<WSClassification>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSPublisherRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'publisher': WSPublisher;
}

export class WSPublishersListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSPublisher>;
}

export class WSPublishersQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'names': Array<string>;
    'countryUris': Array<string>;
    'workflowSteps': Array<string>;
}

export class WSRankedConcept {
    'conceptUuid': string;
    'rank': number;
    'frequency': number;
    'weightedRank': number;
}

export class WSReference {
    'id': number;
    'types': Array<WSReferenceType>;
    'titles': Array<WSLocalizedString>;
    'descriptions': Array<WSLocalizedString>;
    'personAssociations': Array<WSClassifiedPersonAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'date': Date;
    'url': string;
    'medium': string;
    'mediaTypes': Array<WSClassification>;
    'degreeOfRecognitions': Array<WSClassification>;
    'countries': Array<WSClassification>;
    'subdivisions': Array<WSClassification>;
    'author': string;
    'extent': string;
    /**
    * Only available when Newsflo integration is enabled
    */
    'newsfloFragment': string;
    /**
    * Only available when Newsflo integration is enabled
    */
    'newsfloRanks': Array<WSClassification>;
}

export class WSReferenceType {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSReferenceType.KeyEnum;
}

export namespace WSReferenceType {
    export enum KeyEnum {
        CONTRIBUTION = <any> 'CONTRIBUTION',
        COVERAGE = <any> 'COVERAGE'
    }
}
export class WSRenderingsList {
    'renderings': Array<string>;
}

export class WSResearchOutput {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'title': string;
    'subTitle': string;
    'types': Array<WSClassification>;
    'categories': Array<WSClassification>;
    'peerReview': boolean;
    'internationalPeerReview': boolean;
    'publicationStatuses': Array<WSPublicationStatus>;
    'languages': Array<WSClassification>;
    'translatedTitles': Array<WSLocalizedString>;
    'translatedSubTitles': Array<WSLocalizedString>;
    'numberOfPages': number;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'abstracts': Array<WSLocalizedString>;
    'personAssociations': Array<WSClassifiedAuthorAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'openAccessPermissions': Array<WSClassification>;
    'openAccessEmbargoMonths': number;
    'openAccessEmbargoDate': Date;
    /**
    * Only available when this field has been enabled
    */
    'submissionYear': number;
    /**
    * Only available when the BFI module is enabled
    */
    'mainResearchArea': Array<WSClassification>;
    'electronicVersions': Array<WSElectronicVersionAssociation>;
    'additionalFiles': Array<WSElectronicVersionAdditionalFileAssociation>;
    'links': Array<WSLink>;
    'articleProcessingChargePaid': boolean;
    'articleProcessingChargeAmountInArticleProcessingChargeCurrency': number;
    'articleProcessingChargesCurrency': Array<WSClassification>;
    'keywordGroups': Array<WSKeywordGroup>;
    'bibliographicalNotes': Array<WSLocalizedString>;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the DataSet module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentTheses': Array<WSStudentThesisRef>;
    'confidential': boolean;
    'visibilities': Array<WSVisibility>;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
    'totalScopusCitations': number;
    'scopusMetrics': Array<WSResearchOutputMetric>;
    'articleProcessingChargeAmount': number;
}

export class WSResearchOutputListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSResearchOutput>;
}

export class WSResearchOutputMetric {
    'value': number;
    'year': number;
}

export class WSResearchOutputRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSResearchOutput;
}

export class WSResearchOutputsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'publicationStatuses': Array<string>;
    'publicationCategories': Array<string>;
    'peerReviewed': boolean;
    'internationalPeerReviewed': boolean;
    'forJournals': WSJournalsQuery;
    'forPublishers': WSPublishersQuery;
    'forPersons': WSPersonsQuery;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'workflowSteps': Array<string>;
}

export class WSResidencyFlag {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSResidencyFlag.KeyEnum;
}

export namespace WSResidencyFlag {
    export enum KeyEnum {
        UNKNOWN = <any> 'UNKNOWN',
        HOME = <any> 'HOME',
        OVERSEAS = <any> 'OVERSEAS'
    }
}
export class WSScopusMetrics {
    'year': number;
    'citescore': number;
    'snip': number;
    'sjr': number;
}

export class WSSecondarySource {
    'source': string;
    'sourceId': string;
}

export class WSSemanticGroup {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'thesauri': WSThesauriRef;
    'semanticGroupId': string;
    'name': Array<WSLocalizedString>;
    'info': WSContentInformation;
}

export class WSSemanticGroupListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSSemanticGroup>;
}

export class WSSemanticGroupRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSSemanticGroupRef;
}

export class WSStaffOrganisationAssociation {
    'id': number;
    'person': WSPersonRef;
    'affiliationId': string;
    'addresses': Array<WSClassifiedAddress>;
    'emails': Array<WSClassifiedValue>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'employmentTypes': Array<WSClassification>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'organisation': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'contractTypes': Array<WSClassification>;
    'staffTypes': Array<WSClassification>;
    'jobDescriptions': Array<WSLocalizedString>;
    'jobTitles': Array<WSClassification>;
    'fte': number;
    'primaryAssociation': boolean;
}

export class WSStudentOrganisationAssociation {
    'id': number;
    'person': WSPersonRef;
    'affiliationId': string;
    'addresses': Array<WSClassifiedAddress>;
    'emails': Array<WSClassifiedValue>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'employmentTypes': Array<WSClassification>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'organisation': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'fte': number;
    'startYear': string;
    'studentTypeDescriptions': Array<WSClassification>;
    'programme': string;
    'expectedStudyDuration': number;
    'minStudyDuration': number;
    'maxStudyDuration': number;
    'programmeYear': string;
    'initialSubmissionsDate': Date;
    'expectedEndDate': Date;
    'nationalities': Array<WSClassification>;
    'studentResidencyFlags': Array<WSResidencyFlag>;
    'countryOfDomiciles': Array<WSClassification>;
    'awardGained': string;
    'projectTitles': Array<WSLocalizedString>;
    'awardDate': Date;
    'statuses': Array<WSClassification>;
    'primaryAssociation': boolean;
}

export class WSStudentThesesQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'typeUris': Array<string>;
    'awardYears': IntervalInteger;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
}

export class WSStudentThesis {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'types': Array<WSClassification>;
    'languages': Array<WSClassification>;
    'title': string;
    'subTitle': string;
    'translatedTitles': Array<WSLocalizedString>;
    'translatedSubTitles': Array<WSLocalizedString>;
    'abstracts': Array<WSLocalizedString>;
    'personAssociations': Array<WSClassifiedAuthorAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'supervisors': Array<WSClassifiedInternalExternalPersonAssociation>;
    'awardDate': WSCompoundDate;
    'awardingInstitutions': Array<WSInternalExternalOrganisationAssociation>;
    'sponsors': Array<WSExternalOrganisationRef>;
    'keywordGroups': Array<WSKeywordGroup>;
    'documents': Array<WSStudentThesisDocument>;
    'links': Array<WSLink>;
    'bibliographicalNotes': Array<WSLocalizedString>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Unified Project Model module is enabled
    */
    'relatedProjects': Array<WSUPMProjectRef>;
    /**
    * Only available when the DataSet module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    'workflows': Array<WSWorkflow>;
    'confidential': boolean;
    'visibilities': Array<WSVisibility>;
    'info': WSContentInformation;
    'externalableInfo': WSExternalableInformation;
}

export class WSStudentThesisDocument {
    'id': number;
    'title': string;
    'documentTypes': Array<WSClassification>;
    'url': string;
    'documentLicenses': Array<WSClassification>;
    'visibleOnPortalDate': Date;
    'visibilities': Array<WSVisibility>;
    'creator': string;
    'created': Date;
    'documentVersionTypes': Array<WSClassification>;
    'embargoReasons': Array<WSClassification>;
    'rightsStatement': string;
    'embargoDate': Date;
}

export class WSStudentThesisListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSStudentThesis>;
}

export class WSStudentThesisRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSStudentThesis;
}

export class WSTemporalISSN {
    'issn': string;
    'startDate': string;
    'endDate': string;
}

export class WSTemporalTitle {
    'title': string;
    'startDate': string;
    'endDate': string;
}

export class WSThesauri {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'acronym': string;
    'workflow': string;
    'name': Array<WSLocalizedString>;
    'thesaurusVersion': string;
    'description': Array<WSLocalizedString>;
    'info': WSContentInformation;
}

export class WSThesauriListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSThesauri>;
}

export class WSThesauriRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSThesauriRef;
}

export class WSUPMProject {
    'uuid': string;
    'htmlRenderings': Array<WSHtmlRendering>;
    'titles': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'natureTypes': Array<WSClassification>;
    'statuses': Array<WSUPMProjectStatus>;
    'shortTitles': Array<WSLocalizedString>;
    'acronym': string;
    'descriptions': Array<WSClassifiedLocalizedValue>;
    'classifiedSources': Array<WSClassifiedValue>;
    'participants': Array<WSClassifiedParticipantAssociation>;
    'organisations': Array<WSOrganisationRef>;
    'externalOrganisations': Array<WSExternalOrganisationRef>;
    'managingOrganisationalUnit': WSOrganisationRef;
    'collaborative': boolean;
    'collaborators': Array<WSCollaboratorAssociation>;
    'totalAcademicOwnershipPercentage': number;
    'period': WSDateRange;
    'curtailed': boolean;
    'curtailDate': Date;
    'curtailReason': string;
    'documents': Array<WSDocument>;
    'links': Array<WSLink>;
    'relatedApplications': Array<WSApplicationRef>;
    'relatedAwards': Array<WSAwardRef>;
    'relatedProjects': Array<WSUPMProjectAssociation>;
    /**
    * Only available when the Press / Media module is enabled
    */
    'relatedPressMedia': Array<WSPressMediaRef>;
    /**
    * Only available when the Impact module is enabled
    */
    'relatedImpacts': Array<WSImpactRef>;
    /**
    * Only available when the Activity module is enabled
    */
    'relatedActivities': Array<WSActivityRef>;
    /**
    * Only available when the Prize module is enabled
    */
    'relatedPrizes': Array<WSPrizeRef>;
    /**
    * Only available when the DataSet module is enabled
    */
    'relatedDataSets': Array<WSDataSetRef>;
    'relatedResearchOutputs': Array<WSResearchOutputRef>;
    /**
    * Only available when the Student Thesis module is enabled
    */
    'relatedStudentThesis': Array<WSStudentThesisRef>;
    'keywordGroups': Array<WSKeywordGroup>;
    /**
    * Only available when the ERA module is enabled
    */
    'fieldOfResearchAssociations': Array<WSERA2015FieldOfResearchAssociation>;
    'visibilities': Array<WSVisibility>;
    'confidential': boolean;
    'workflows': Array<WSWorkflow>;
    'externalableInfo': WSExternalableInformation;
    'info': WSContentInformation;
}

export class WSUPMProjectAssociation {
    'relationTypes': Array<WSClassification>;
    'project': WSUPMProjectRef;
}

export class WSUPMProjectListResult {
    'count': number;
    'navigationLinks': Array<WSNavigationLink>;
    'items': Array<WSUPMProject>;
}

export class WSUPMProjectRef {
    'uuid': string;
    'link': WSNavigationLink;
    'names': Array<WSLocalizedString>;
    'types': Array<WSClassification>;
    'ref': WSUPMProject;
}

export class WSUPMProjectStatus {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSUPMProjectStatus.KeyEnum;
}

export namespace WSUPMProjectStatus {
    export enum KeyEnum {
        NOTSTARTED = <any> 'NOT_STARTED',
        RUNNING = <any> 'RUNNING',
        FINISHED = <any> 'FINISHED',
        CURTAILED = <any> 'CURTAILED'
    }
}
export class WSUPMProjectsQuery {
    'searchString': string;
    'uuids': Array<string>;
    'size': number;
    'offset': number;
    'linkingStrategy': string;
    'locales': Array<string>;
    'fallbackLocales': Array<string>;
    'renderings': Array<string>;
    'fields': Array<string>;
    'orderings': Array<string>;
    'returnUsedContent': boolean;
    'navigationLink': boolean;
    'idClassification': string;
    'projectStatus': WSUPMProjectsQuery.ProjectStatusEnum;
    'period': WSCompoundDateRange;
    'workflowSteps': Array<string>;
    'forOrganisationalUnits': WSOrganisationsQuery;
    'forPersons': WSPersonsQuery;
}

export namespace WSUPMProjectsQuery {
    export enum ProjectStatusEnum {
        NOTSTARTED = <any> 'NOT_STARTED',
        RUNNING = <any> 'RUNNING',
        FINISHED = <any> 'FINISHED',
        CURTAILED = <any> 'CURTAILED'
    }
}
export class WSUsedContent {
    'rendering': string;
    'locale': string;
    'usedContent': Array<WSUuidList>;
}

export class WSUuidList {
    'family': string;
    'uuids': Array<string>;
}

export class WSVisibility {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'key': WSVisibility.KeyEnum;
}

export namespace WSVisibility {
    export enum KeyEnum {
        FREE = <any> 'FREE',
        CAMPUS = <any> 'CAMPUS',
        BACKEND = <any> 'BACKEND'
    }
}
export class WSVisitingScholarOrganisationAssociation {
    'id': number;
    'person': WSPersonRef;
    'affiliationId': string;
    'addresses': Array<WSClassifiedAddress>;
    'emails': Array<WSClassifiedValue>;
    'phoneNumbers': Array<WSClassifiedValue>;
    'employmentTypes': Array<WSClassification>;
    'webAddresses': Array<WSClassifiedLocalizedValue>;
    'organisation': WSOrganisationRef;
    'period': WSDateRange;
    'keywordGroups': Array<WSKeywordGroup>;
    'purposeOfStay': string;
    'visitorFrom': WSExternalOrganisationRef;
    'jobDescriptions': Array<WSLocalizedString>;
    'jobTitles': Array<WSClassification>;
    'primaryAssociation': boolean;
}

export class WSWorkflow {
    'locale': string;
    'formatted': boolean;
    'value': string;
    'workflowStep': string;
}

export class WSYearlyBudget {
    'year': number;
    'budget': number;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: request.Options): void {
        // Do nothing
    }
}

export enum ActivitiesApiApiKeys {
    api-key,
    apiKey,
}

export class ActivitiesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ActivitiesApiApiKeys, value: string) {
        this.authentications[ActivitiesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get activity with specific ID (path parameter)
     * @summary Get activity
     * @param id Id of the desired activity
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getActivity (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSAbstractActivity;  }> {
        const localVarPath = this.basePath + '/activities/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getActivity.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAbstractActivity;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all orderings available to the activity endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/activities-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the activity endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/activities-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all activities in the PURE installation. If filtering of the returned activities is required, see the POST version which supports additional filtering.
     * @summary Lists all activities
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listActivities (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }> {
        const localVarPath = this.basePath + '/activities';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists activities in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Activity.htm#post_xml\">Activity documentation</a>
     * @summary Complex operation for activities
     * @param body 
     */
    public listActivities_1 (body?: WSActivityQuery) : Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }> {
        const localVarPath = this.basePath + '/activities';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ApplicationsApiApiKeys {
    api-key,
    apiKey,
}

export class ApplicationsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ApplicationsApiApiKeys, value: string) {
        this.authentications[ApplicationsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get application with specific ID (path parameter).
     * @summary Get application
     * @param id Id of the desired application
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getApplication (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSApplication;  }> {
        const localVarPath = this.basePath + '/applications/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getApplication.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplication;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all orderings available to the application endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/applications-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the application endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/applications-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all applications in the PURE installation. If filtering of the returned applications is required, see the POST version which supports additional filtering.
     * @summary Lists all applications
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listApplications (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }> {
        const localVarPath = this.basePath + '/applications';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists applications in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Application.htm#post_xml\">Application documentation</a>
     * @summary Complex operation for applications
     * @param body 
     */
    public listApplications_1 (body?: WSApplicationsQuery) : Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }> {
        const localVarPath = this.basePath + '/applications';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum AwardsApiApiKeys {
    api-key,
    apiKey,
}

export class AwardsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: AwardsApiApiKeys, value: string) {
        this.authentications[AwardsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the award endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/awards-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the award endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/awards-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get award with specific ID (path parameter).
     * @summary Get award
     * @param id Id of the desired award
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getAward (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSAward;  }> {
        const localVarPath = this.basePath + '/awards/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAward.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAward;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the award specified by an ID (supplied as path parameter)
     * @summary Lists fingerprints on an award
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listAwardFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/awards/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listAwardFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all awards in the PURE installation. If filtering of the returned awards is required, see the POST version which supports additional filtering.
     * @summary Lists all awards
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listAwards (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }> {
        const localVarPath = this.basePath + '/awards';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists awards in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Award.htm#post_xml\">Award documentation</a>
     * @summary Complex operation for awards
     * @param body 
     */
    public listAwards_1 (body?: WSAwardsQuery) : Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }> {
        const localVarPath = this.basePath + '/awards';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ChangesApiApiKeys {
    api-key,
    apiKey,
}

export class ChangesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ChangesApiApiKeys, value: string) {
        this.authentications[ChangesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get changes from specific audit ID or date in the yyyy-MM-dd format (e.g. 2017-04-24) and forward
     * @summary Get changes
     * @param idOrDate Id or date (in yyyy-MM-dd format) of the earliest audit entry
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getChanges (idOrDate: string, q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSChangeListResult;  }> {
        const localVarPath = this.basePath + '/changes/{idOrDate}'
            .replace('{' + 'idOrDate' + '}', String(idOrDate));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'idOrDate' is not null or undefined
        if (idOrDate === null || idOrDate === undefined) {
            throw new Error('Required parameter idOrDate was null or undefined when calling getChanges.');
        }

        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSChangeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ClassificationschemesApiApiKeys {
    api-key,
    apiKey,
}

export class ClassificationschemesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ClassificationschemesApiApiKeys, value: string) {
        this.authentications[ClassificationschemesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the Classification Scheme endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/classification-schemes-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the Classification Scheme endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/classification-schemes-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get Classification Scheme with specific uri (path parameter)
     * @summary Get Classification Scheme
     * @param id id of the desired classification scheme
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getClassificationScheme (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSClassificationScheme;  }> {
        const localVarPath = this.basePath + '/classification-schemes/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getClassificationScheme.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSClassificationScheme;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all classification schemes in the PURE installation. If filtering of the returned classification schemes is required, see the POST version which supports additional filtering.
     * @summary Lists all classification schemes
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listClassificationSchemes (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSClassificationSchemeListResult;  }> {
        const localVarPath = this.basePath + '/classification-schemes';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSClassificationSchemeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists classification schemes in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_ClassificationScheme.htm#post_xml\">ClassificationScheme documentation</a>
     * @summary Complex operation for classification schemes
     * @param body 
     */
    public listClassificationSchemes_1 (body?: WSClassificationSchemesQuery) : Promise<{ response: http.ClientResponse; body: WSClassificationSchemeListResult;  }> {
        const localVarPath = this.basePath + '/classification-schemes';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSClassificationSchemeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ConceptsApiApiKeys {
    api-key,
    apiKey,
}

export class ConceptsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ConceptsApiApiKeys, value: string) {
        this.authentications[ConceptsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the concepts endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/concepts-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the concepts endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/concepts-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get concept with specific ID (path parameter).
     * @summary Get concept
     * @param id Id of the desired concept
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getConcept (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSConcept;  }> {
        const localVarPath = this.basePath + '/concepts/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConcept.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSConcept;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all concepts in the PURE installation.
     * @summary Lists all concepts
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listConcepts (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSConceptListResult;  }> {
        const localVarPath = this.basePath + '/concepts';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSConceptListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum EquipmentsApiApiKeys {
    api-key,
    apiKey,
}

export class EquipmentsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EquipmentsApiApiKeys, value: string) {
        this.authentications[EquipmentsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the equipment endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/equipments-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the equipment endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/equipments-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get equipment with specific ID (path parameter).
     * @summary Get equipment
     * @param id Id of the desired equipment
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getEquipment (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSEquipment;  }> {
        const localVarPath = this.basePath + '/equipments/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEquipment.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEquipment;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all equipment in the PURE installation. If filtering of the returned equipment is required, see the POST version which supports additional filtering.
     * @summary Lists all equipment
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listEquipment (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSEquipmentListResult;  }> {
        const localVarPath = this.basePath + '/equipments';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEquipmentListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the equipment specified by an ID (supplied as path parameter)
     * @summary Lists fingerprints on an equipment
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listEquipmentFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/equipments/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listEquipmentFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists equipment in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Equipment.htm#post_xml\">Equipment documentation</a>
     * @summary Complex operation for equipment
     * @param body 
     */
    public listEquipment_1 (body?: WSEquipmentsQuery) : Promise<{ response: http.ClientResponse; body: WSEquipmentListResult;  }> {
        const localVarPath = this.basePath + '/equipments';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEquipmentListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum EventsApiApiKeys {
    api-key,
    apiKey,
}

export class EventsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EventsApiApiKeys, value: string) {
        this.authentications[EventsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the event endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/events-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the event endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/events-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get event with specific ID (path parameter).
     * @summary Get event
     * @param id Id of the desired event
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getEvent (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSEvent;  }> {
        const localVarPath = this.basePath + '/events/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEvent.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEvent;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all events in the PURE installation. If filtering of the returned events is required, see the POST version which supports additional filtering.
     * @summary Lists all events
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listEvents (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSEventListResult;  }> {
        const localVarPath = this.basePath + '/events';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEventListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists events in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Event.htm#post_xml\">Event documentation</a>
     * @summary Complex operation for events
     * @param body 
     */
    public listEvents_1 (body?: WSEventsQuery) : Promise<{ response: http.ClientResponse; body: WSEventListResult;  }> {
        const localVarPath = this.basePath + '/events';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSEventListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ExternalorganisationsApiApiKeys {
    api-key,
    apiKey,
}

export class ExternalorganisationsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExternalorganisationsApiApiKeys, value: string) {
        this.authentications[ExternalorganisationsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the external organisation endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/external-organisations-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the external organisation endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/external-organisations-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get external organisation with specific ID (path parameter).
     * @summary Get external organisation
     * @param id Id of the desired external organisation
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getExternalOrganisation (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSExternalOrganisation;  }> {
        const localVarPath = this.basePath + '/external-organisations/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExternalOrganisation.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalOrganisation;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all external organisations in the PURE installation. If filtering of the returned external organisations is required, see the POST version which supports additional filtering.
     * @summary Lists all external organisations
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listExternalOrganisations (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSExternalOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/external-organisations';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists external organisations in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_ExternalOrganisation.htm#post_xml\">External Organisation documentation</a>
     * @summary Complex operation for external organisations
     * @param body 
     */
    public listExternalOrganisations_1 (body?: WSExternalOrganisationsQuery) : Promise<{ response: http.ClientResponse; body: WSExternalOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/external-organisations';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ExternalpersonsApiApiKeys {
    api-key,
    apiKey,
}

export class ExternalpersonsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExternalpersonsApiApiKeys, value: string) {
        this.authentications[ExternalpersonsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the external person endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/external-persons-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the external person endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/external-persons-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get external person with specific ID (path parameter).
     * @summary Get external person
     * @param id Id of the desired external person
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getExternalPerson (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSExternalPerson;  }> {
        const localVarPath = this.basePath + '/external-persons/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getExternalPerson.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalPerson;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all external persons in the PURE installation. If filtering of the returned external persons is required, see the POST version which supports additional filtering.
     * @summary Lists all external persons
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listExternalPersons (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSExternalPersonListResult;  }> {
        const localVarPath = this.basePath + '/external-persons';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists external persons in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_ExternalPerson.htm#post_xml\">External person documentation</a>
     * @summary Complex operation for external persons
     * @param body 
     */
    public listExternalPersons_1 (body?: WSExternalPersonsQuery) : Promise<{ response: http.ClientResponse; body: WSExternalPersonListResult;  }> {
        const localVarPath = this.basePath + '/external-persons';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSExternalPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum FingerprintsApiApiKeys {
    api-key,
    apiKey,
}

export class FingerprintsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: FingerprintsApiApiKeys, value: string) {
        this.authentications[FingerprintsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the fingerprints endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/fingerprints-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the fingerprints endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/fingerprints-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fingerprint with specific ID (path parameter).
     * @summary Get fingerprint
     * @param id Id of the desired fingerprint
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getFingerprint (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprint;  }> {
        const localVarPath = this.basePath + '/fingerprints/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFingerprint.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprint;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints in the PURE installation. If filtering of the returned fingerprints is required, see the POST version which supports additional filtering.
     * @summary Lists all fingerprints
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listFingerprints (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/fingerprints';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists fingerprints in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Fingerprint.htm#post_xml\">Fingerprint documentation</a>
     * @summary Complex operation for fingerprints
     * @param body 
     */
    public listFingerprints_1 (body?: WSFingerprintsQuery) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/fingerprints';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum FundingopportunitiesApiApiKeys {
    api-key,
    apiKey,
}

export class FundingopportunitiesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: FundingopportunitiesApiApiKeys, value: string) {
        this.authentications[FundingopportunitiesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the funding opportunities endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/funding-opportunities-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the funding opportunities endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/funding-opportunities-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get funding opportunity with specific ID (path parameter).
     * @summary Get funding opportunity
     * @param id Id of the desired funding opportunity
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getFundingOpportunity (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFundingOpportunity;  }> {
        const localVarPath = this.basePath + '/funding-opportunities/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFundingOpportunity.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFundingOpportunity;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all funding opportunities in the PURE installation. If filtering of the returned funding opportunities is required, see the POST version which supports additional filtering.
     * @summary Lists all funding opportunities
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listFundingOpportunities (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSFundingOpportunityListResult;  }> {
        const localVarPath = this.basePath + '/funding-opportunities';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFundingOpportunityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists funding opportunities in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_FundingOpportunity.htm#post_xml\">FundingOpportunity documentation</a>
     * @summary Complex operation for funding opportunities
     * @param body 
     */
    public listFundingOpportunities_1 (body?: WSFundingOpportunitiesQuery) : Promise<{ response: http.ClientResponse; body: WSFundingOpportunityListResult;  }> {
        const localVarPath = this.basePath + '/funding-opportunities';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFundingOpportunityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum JournalsApiApiKeys {
    api-key,
    apiKey,
}

export class JournalsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: JournalsApiApiKeys, value: string) {
        this.authentications[JournalsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the journal endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/journals-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the journal endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/journals-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get journal with specific ID (path parameter).
     * @summary Get journal
     * @param id Id of the desired journal
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getJournal (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSJournal;  }> {
        const localVarPath = this.basePath + '/journals/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getJournal.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSJournal;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all journals in the PURE installation. If filtering of the returned journals is required, see the POST version which supports additional filtering.
     * @summary Lists all journals
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listJournals (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSJournalListResult;  }> {
        const localVarPath = this.basePath + '/journals';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSJournalListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists journals in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Journal.htm#post_xml\">Journal documentation</a>
     * @summary Complex operation for journals
     * @param body 
     */
    public listJournals_1 (body?: WSJournalsQuery) : Promise<{ response: http.ClientResponse; body: WSJournalListResult;  }> {
        const localVarPath = this.basePath + '/journals';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSJournalListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum OrganisationalunitsApiApiKeys {
    api-key,
    apiKey,
}

export class OrganisationalunitsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: OrganisationalunitsApiApiKeys, value: string) {
        this.authentications[OrganisationalunitsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the organisational unit endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/organisational-units-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the organisational unit endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/organisational-units-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get organisational unit with specific ID (path parameter).
     * @summary Get organisational unit
     * @param id Id of the desired organisational unit
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getOrganisationalUnit (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSOrganisation;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrganisationalUnit.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrganisation;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all active organisational units in the PURE installation
     * @summary Lists all active organisational units
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listActiveOrganisationalUnits (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/active';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all former organisational units in the PURE installation
     * @summary Lists all former organisational units
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listFormerOrganisationalUnits (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/former';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all activities associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists activities on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitActivities (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/activities'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitActivities.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all applications associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists applications on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitApplications (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/applications'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitApplications.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all awards associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists awards on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitAwards (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/awards'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitAwards.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists fingerprints on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all persons associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists persons on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitPersons (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/persons'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitPersons.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all press / media associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists press / media on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitPressMedia (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/press-media'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitPressMedia.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all prizes associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists prizes on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitPrizes (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/prizes'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitPrizes.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all projects associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists projects on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitProjects (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/projects'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitProjects.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all research outputs associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists research outputs on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitResearchOutputs (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/research-outputs'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitResearchOutputs.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all student-theses associated to the organisational unit specified by an ID (supplied as path parameter)
     * @summary Lists student-theses on an organisational unit
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnitStudentTheses (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSStudentThesisListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units/{id}/student-theses'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganisationalUnitStudentTheses.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSStudentThesisListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all organisational units in the PURE installation. If filtering of the returned organisational units is required, see the POST version which supports additional filtering.
     * @summary Lists all organisational units
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listOrganisationalUnits (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists organisational units in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_OrganisationalUnit.htm#post_xml\">Organisational unit documentation</a>
     * @summary Complex operation for organisational units
     * @param body 
     */
    public listOrganisationalUnits_1 (body?: WSOrganisationsQuery) : Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }> {
        const localVarPath = this.basePath + '/organisational-units';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrganisationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PersonsApiApiKeys {
    api-key,
    apiKey,
}

export class PersonsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PersonsApiApiKeys, value: string) {
        this.authentications[PersonsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the person endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/persons-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the person endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/persons-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get person with specific ID (path parameter).
     * @summary Get person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getPerson (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPerson;  }> {
        const localVarPath = this.basePath + '/persons/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPerson.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPerson;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all active persons
     * @summary Lists all active persons
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listActivePersons (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }> {
        const localVarPath = this.basePath + '/persons/active';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all former persons
     * @summary Lists all former persons
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listFormerPersons (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }> {
        const localVarPath = this.basePath + '/persons/former';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all activities associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists activities on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonActivities (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/activities'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonActivities.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSActivityListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all applications associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists applications on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonApplications (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/applications'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonApplications.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplicationListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all awards associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists awards on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonAwards (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/awards'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonAwards.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSAwardListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all curriculum vitae associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists curriculum vitae on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonCurriculumVitae (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSCurriculumVitaeListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/curricula-vitae'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonCurriculumVitae.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSCurriculumVitaeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists fingerprints on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all press / media associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists press / media on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonPressMedia (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/press-media'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonPressMedia.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all prizes associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists prizes on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonPrizes (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/prizes'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonPrizes.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all projects associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists projects on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonProjects (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/projects'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonProjects.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all research outputs associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists research outputs on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonResearchOutputs (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/research-outputs'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonResearchOutputs.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all student theses associated to the person specified by an ID (supplied as path parameter)
     * @summary Lists student theses on a person
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersonStudentTheses (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSStudentThesisListResult;  }> {
        const localVarPath = this.basePath + '/persons/{id}/student-theses'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listPersonStudentTheses.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSStudentThesisListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all persons in the PURE installation. If additional filtering of the amount of persons returned, see the POST version which supports additional filtering.
     * @summary Lists all persons
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPersons (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }> {
        const localVarPath = this.basePath + '/persons';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists persons in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Person.htm\">Person documentation</a>
     * @summary Complex operation for persons
     * @param body 
     */
    public listPersons_1 (body?: WSPersonsQuery) : Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }> {
        const localVarPath = this.basePath + '/persons';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPersonListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PressmediaApiApiKeys {
    api-key,
    apiKey,
}

export class PressmediaApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PressmediaApiApiKeys, value: string) {
        this.authentications[PressmediaApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the press / media endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/press-media-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the press / media endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/press-media-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get press / media with specific ID (path parameter).
     * @summary Get press / media
     * @param id Id of the desired press / media
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getPressMedia (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSApplication;  }> {
        const localVarPath = this.basePath + '/press-media/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPressMedia.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSApplication;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all press / media in the PURE installation. If filtering of the returned press / media is required, see the POST version which supports additional filtering.
     * @summary Lists all press / media
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPressMedia (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }> {
        const localVarPath = this.basePath + '/press-media';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists press / media in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_PressMedia.htm#post_xml\">Press / Media documentation</a>
     * @summary Complex operation for press / media
     * @param body 
     */
    public listPressMedia_1 (body?: WSPressMediaQuery) : Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }> {
        const localVarPath = this.basePath + '/press-media';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPressMediaListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PrizesApiApiKeys {
    api-key,
    apiKey,
}

export class PrizesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PrizesApiApiKeys, value: string) {
        this.authentications[PrizesApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the prize endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/prizes-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the prize endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/prizes-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get prize with specific ID (path parameter).
     * @summary Get prize
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getPrize (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPrize;  }> {
        const localVarPath = this.basePath + '/prizes/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPrize.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPrize;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all prizes in the PURE installation. If additional filtering of the amount of prizes returned, see the POST version which supports additional filtering.
     * @summary Lists all prizes
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPrizes (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }> {
        const localVarPath = this.basePath + '/prizes';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists prizes in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Prize.htm\">Prize documentation</a>
     * @summary Complex operation for prizes
     * @param body 
     */
    public listPrizes_1 (body?: WSPrizesQuery) : Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }> {
        const localVarPath = this.basePath + '/prizes';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPrizeListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ProjectsApiApiKeys {
    api-key,
    apiKey,
}

export class ProjectsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ProjectsApiApiKeys, value: string) {
        this.authentications[ProjectsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the project endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/projects-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the project endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/projects-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get project with specific ID (path parameter).
     * @summary Get project
     * @param id Id of the desired project
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getProject (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSUPMProject;  }> {
        const localVarPath = this.basePath + '/projects/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProject.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProject;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all active projects in the PURE installation
     * @summary Lists all active projects
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listActiveProjects (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }> {
        const localVarPath = this.basePath + '/projects/active';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the project specified by an ID (supplied as path parameter)
     * @summary Lists fingerprints on a project
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listProjectFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/projects/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listProjectFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all projects in the PURE installation. If filtering of the returned projects is required, see the POST version which supports additional filtering.
     * @summary Lists all projects
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listProjects (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }> {
        const localVarPath = this.basePath + '/projects';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists projects in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Project.htm#post_xml\">Project documentation</a>
     * @summary Complex operation for projects
     * @param body 
     */
    public listProjects_1 (body?: WSUPMProjectsQuery) : Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }> {
        const localVarPath = this.basePath + '/projects';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSUPMProjectListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum PublishersApiApiKeys {
    api-key,
    apiKey,
}

export class PublishersApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: PublishersApiApiKeys, value: string) {
        this.authentications[PublishersApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the publisher endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/publishers-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the publisher endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/publishers-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get the publisher with specific ID (path parameter).
     * @summary Get publisher
     * @param id Id of the desired publisher
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getPublisher (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSPublisher;  }> {
        const localVarPath = this.basePath + '/publishers/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPublisher.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPublisher;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists the publishers in the PURE installation which are in the 'approved' workflow step.
     * @summary Get approved publishers
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listApprovedPublishers (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }> {
        const localVarPath = this.basePath + '/publishers/approved';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all publishers in the PURE installation. If filtering is required for the the returned publishers, see the POST version which supports additional filtering.
     * @summary Lists all publishers
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listPublishers (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }> {
        const localVarPath = this.basePath + '/publishers';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists publishers in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_Publisher.htm#post_xml\">Publisher documentation</a>
     * @summary Complex operation for publishers
     * @param body 
     */
    public listPublishers_1 (body?: WSPublishersQuery) : Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }> {
        const localVarPath = this.basePath + '/publishers';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSPublishersListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ResearchoutputsApiApiKeys {
    api-key,
    apiKey,
}

export class ResearchoutputsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ResearchoutputsApiApiKeys, value: string) {
        this.authentications[ResearchoutputsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the research-output endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/research-outputs-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the research-output endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/research-outputs-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get research output with specific ID (path parameter).
     * @summary Get research output
     * @param id Id of the desired research Output
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getResearchOutput (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSResearchOutput;  }> {
        const localVarPath = this.basePath + '/research-outputs/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getResearchOutput.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSResearchOutput;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all fingerprints associated to the research-output specified by an ID (supplied as path parameter)
     * @summary Lists impacts on a research-output
     * @param id id
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listResearchOutputFingerprints (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }> {
        const localVarPath = this.basePath + '/research-outputs/{id}/fingerprints'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listResearchOutputFingerprints.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSFingerprintListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all research outputs in the PURE installation. If filtering of the returned research outputs is required, see the POST version which supports additional filtering.
     * @summary Lists all research outputs
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listResearchOutputs (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }> {
        const localVarPath = this.basePath + '/research-outputs';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists research outputs in the PURE installation, similar to the GET version, instead of using parameters to alter the response, an XML document is posted with the request. The XML document contains fields for all the parameters available for the GET version, but also additional filtering options. For documentation of the XML format see <a href=\"documentation/Content/Topics/CT_ResearchOutput.htm#post_xml\">Research Output documentation</a>
     * @summary Complex operation for research output
     * @param body 
     */
    public listResearchOutputs_1 (body?: WSResearchOutputsQuery) : Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }> {
        const localVarPath = this.basePath + '/research-outputs';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSResearchOutputListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum SemanticgroupsApiApiKeys {
    api-key,
    apiKey,
}

export class SemanticgroupsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: SemanticgroupsApiApiKeys, value: string) {
        this.authentications[SemanticgroupsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the semantic groups endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/semantic-groups-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the semantic groups endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/semantic-groups-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get semantic group with specific ID (path parameter).
     * @summary Get semantic group
     * @param id Id of the desired semantic group
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getSemanticGroup (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSSemanticGroup;  }> {
        const localVarPath = this.basePath + '/semantic-groups/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSemanticGroup.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSSemanticGroup;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all semantic groups in the PURE installation.
     * @summary Lists all semanticGroups
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listSemanticGroups (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSSemanticGroupListResult;  }> {
        const localVarPath = this.basePath + '/semantic-groups';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSSemanticGroupListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ThesauriApiApiKeys {
    api-key,
    apiKey,
}

export class ThesauriApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api-key': new ApiKeyAuth('header', 'api-key'),
        'apiKey': new ApiKeyAuth('query', 'apiKey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ThesauriApiApiKeys, value: string) {
        this.authentications[ThesauriApiApiKeys[key]].apiKey = value;
    }
    /**
     * Lists all orderings available to the thesauri endpoint. These values can be used by the order parameter
     * @summary Lists available orderings
     */
    public getAvailableOrderings () : Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }> {
        const localVarPath = this.basePath + '/thesauri-meta/orderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSOrderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all renderings available to the thesauri endpoint. These values can be used by the rendering parameter
     * @summary Lists available renderings
     */
    public getAvailableRenderings () : Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }> {
        const localVarPath = this.basePath + '/thesauri-meta/renderings';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSRenderingsList;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get thesauri with specific ID (path parameter).
     * @summary Get thesauri
     * @param id Id of the desired thesauri
     * @param idClassification Specifies an optional classification used to specify which type of ID should be used in the match. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public getThesauri (id: string, idClassification?: string, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, returnUsedContent?: boolean, navigationLink?: boolean) : Promise<{ response: http.ClientResponse; body: WSThesauri;  }> {
        const localVarPath = this.basePath + '/thesauri/{id}'
            .replace('{' + 'id' + '}', String(id));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getThesauri.');
        }

        if (idClassification !== undefined) {
            queryParameters['idClassification'] = idClassification;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSThesauri;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Lists all thesauri in the PURE installation.
     * @summary Lists all thesauri
     * @param q Free text search string using Lucene query syntax. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#q_param\&quot;&gt;Read more&lt;/a&gt;
     * @param order Specify the ordering of content in the result. Default: ID ascending. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#order_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fields Limit the fields included in the response. E.g. &#39;nameVariants.nameVariant&#39; will only return the name variants. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\&quot;&gt;Read more&lt;/a&gt;
     * @param locale Enter the desired locale. E.g. &#39;en_GB&#39; will only return the English text strings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param fallbackLocale Fallback locale string. Syntax is &#39;Locale1&#x3D;&gt;Locale2&#39; to map Locale1 to Locale2. Example: &#39;da_DK&#x3D;&gt;en_GB&#39;. Locale1 must be equal to locale provided in the locale string. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\&quot;&gt;Read more&lt;/a&gt;
     * @param rendering HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\&quot;&gt;Read more&lt;/a&gt;
     * @param linkingStrategy Specifies the linking strategy to use used when creating HTML renderings. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\&quot;&gt;Read more&lt;/a&gt;
     * @param returnUsedContent If &#39;true&#39;, the id&#39;s of the content used to create HTML renderings are returned as part of the result. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\&quot;&gt;Read more&lt;/a&gt;
     * @param navigationLink Include navigation links for paging and content. Default: true. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\&quot;&gt;Read more&lt;/a&gt;
     * @param size Enter the number of results per window. Default: 10. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param offset Enter the offset into the total result set where items should be returned from. Default: 0. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\&quot;&gt;Read more&lt;/a&gt;
     * @param page Enter the desired page number. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     * @param pageSize Enter the desired number of results per page. &lt;a href&#x3D;\&quot;documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\&quot;&gt;Read more&lt;/a&gt;
     */
    public listThesauri (q?: string, order?: Array<string>, fields?: Array<string>, locale?: Array<string>, fallbackLocale?: Array<string>, rendering?: Array<string>, linkingStrategy?: string, returnUsedContent?: boolean, navigationLink?: boolean, size?: number, offset?: number, page?: number, pageSize?: number) : Promise<{ response: http.ClientResponse; body: WSThesauriListResult;  }> {
        const localVarPath = this.basePath + '/thesauri';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        if (order !== undefined) {
            queryParameters['order'] = order;
        }

        if (fields !== undefined) {
            queryParameters['fields'] = fields;
        }

        if (locale !== undefined) {
            queryParameters['locale'] = locale;
        }

        if (fallbackLocale !== undefined) {
            queryParameters['fallbackLocale'] = fallbackLocale;
        }

        if (rendering !== undefined) {
            queryParameters['rendering'] = rendering;
        }

        if (linkingStrategy !== undefined) {
            queryParameters['linkingStrategy'] = linkingStrategy;
        }

        if (returnUsedContent !== undefined) {
            queryParameters['returnUsedContent'] = returnUsedContent;
        }

        if (navigationLink !== undefined) {
            queryParameters['navigationLink'] = navigationLink;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.api-key.applyToRequest(requestOptions);

        this.authentications.apiKey.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WSThesauriListResult;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
