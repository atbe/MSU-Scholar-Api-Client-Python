# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSERA2015FieldOfResearchAssociation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields_of_research': 'list[WSClassification]',
        'split_percentage': 'float'
    }

    attribute_map = {
        'fields_of_research': 'fieldsOfResearch',
        'split_percentage': 'splitPercentage'
    }

    def __init__(self, fields_of_research=None, split_percentage=None):
        """
        WSERA2015FieldOfResearchAssociation - a model defined in Swagger
        """

        self._fields_of_research = None
        self._split_percentage = None

        if fields_of_research is not None:
          self.fields_of_research = fields_of_research
        if split_percentage is not None:
          self.split_percentage = split_percentage

    @property
    def fields_of_research(self):
        """
        Gets the fields_of_research of this WSERA2015FieldOfResearchAssociation.

        :return: The fields_of_research of this WSERA2015FieldOfResearchAssociation.
        :rtype: list[WSClassification]
        """
        return self._fields_of_research

    @fields_of_research.setter
    def fields_of_research(self, fields_of_research):
        """
        Sets the fields_of_research of this WSERA2015FieldOfResearchAssociation.

        :param fields_of_research: The fields_of_research of this WSERA2015FieldOfResearchAssociation.
        :type: list[WSClassification]
        """

        self._fields_of_research = fields_of_research

    @property
    def split_percentage(self):
        """
        Gets the split_percentage of this WSERA2015FieldOfResearchAssociation.

        :return: The split_percentage of this WSERA2015FieldOfResearchAssociation.
        :rtype: float
        """
        return self._split_percentage

    @split_percentage.setter
    def split_percentage(self, split_percentage):
        """
        Sets the split_percentage of this WSERA2015FieldOfResearchAssociation.

        :param split_percentage: The split_percentage of this WSERA2015FieldOfResearchAssociation.
        :type: float
        """

        self._split_percentage = split_percentage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSERA2015FieldOfResearchAssociation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
