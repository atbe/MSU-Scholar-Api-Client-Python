# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSUPMProject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'nature_types': 'list[WSClassification]',
        'statuses': 'list[WSUPMProjectStatus]',
        'short_titles': 'list[WSLocalizedString]',
        'acronym': 'str',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'classified_sources': 'list[WSClassifiedValue]',
        'participants': 'list[WSClassifiedParticipantAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'collaborative': 'bool',
        'collaborators': 'list[WSCollaboratorAssociation]',
        'total_academic_ownership_percentage': 'float',
        'period': 'WSDateRange',
        'curtailed': 'bool',
        'curtail_date': 'datetime',
        'curtail_reason': 'str',
        'documents': 'list[WSDocument]',
        'links': 'list[WSLink]',
        'related_applications': 'list[WSApplicationRef]',
        'related_awards': 'list[WSAwardRef]',
        'related_projects': 'list[WSUPMProjectAssociation]',
        'related_press_media': 'list[WSPressMediaRef]',
        'related_impacts': 'list[WSImpactRef]',
        'related_activities': 'list[WSActivityRef]',
        'related_prizes': 'list[WSPrizeRef]',
        'related_data_sets': 'list[WSDataSetRef]',
        'related_research_outputs': 'list[WSResearchOutputRef]',
        'related_student_thesis': 'list[WSStudentThesisRef]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'visibilities': 'list[WSVisibility]',
        'confidential': 'bool',
        'workflows': 'list[WSWorkflow]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'nature_types': 'natureTypes',
        'statuses': 'statuses',
        'short_titles': 'shortTitles',
        'acronym': 'acronym',
        'descriptions': 'descriptions',
        'classified_sources': 'classifiedSources',
        'participants': 'participants',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'collaborative': 'collaborative',
        'collaborators': 'collaborators',
        'total_academic_ownership_percentage': 'totalAcademicOwnershipPercentage',
        'period': 'period',
        'curtailed': 'curtailed',
        'curtail_date': 'curtailDate',
        'curtail_reason': 'curtailReason',
        'documents': 'documents',
        'links': 'links',
        'related_applications': 'relatedApplications',
        'related_awards': 'relatedAwards',
        'related_projects': 'relatedProjects',
        'related_press_media': 'relatedPressMedia',
        'related_impacts': 'relatedImpacts',
        'related_activities': 'relatedActivities',
        'related_prizes': 'relatedPrizes',
        'related_data_sets': 'relatedDataSets',
        'related_research_outputs': 'relatedResearchOutputs',
        'related_student_thesis': 'relatedStudentThesis',
        'keyword_groups': 'keywordGroups',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'visibilities': 'visibilities',
        'confidential': 'confidential',
        'workflows': 'workflows',
        'externalable_info': 'externalableInfo',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, nature_types=None, statuses=None, short_titles=None, acronym=None, descriptions=None, classified_sources=None, participants=None, organisations=None, external_organisations=None, managing_organisational_unit=None, collaborative=False, collaborators=None, total_academic_ownership_percentage=None, period=None, curtailed=False, curtail_date=None, curtail_reason=None, documents=None, links=None, related_applications=None, related_awards=None, related_projects=None, related_press_media=None, related_impacts=None, related_activities=None, related_prizes=None, related_data_sets=None, related_research_outputs=None, related_student_thesis=None, keyword_groups=None, field_of_research_associations=None, visibilities=None, confidential=False, workflows=None, externalable_info=None, info=None):
        """
        WSUPMProject - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._nature_types = None
        self._statuses = None
        self._short_titles = None
        self._acronym = None
        self._descriptions = None
        self._classified_sources = None
        self._participants = None
        self._organisations = None
        self._external_organisations = None
        self._managing_organisational_unit = None
        self._collaborative = None
        self._collaborators = None
        self._total_academic_ownership_percentage = None
        self._period = None
        self._curtailed = None
        self._curtail_date = None
        self._curtail_reason = None
        self._documents = None
        self._links = None
        self._related_applications = None
        self._related_awards = None
        self._related_projects = None
        self._related_press_media = None
        self._related_impacts = None
        self._related_activities = None
        self._related_prizes = None
        self._related_data_sets = None
        self._related_research_outputs = None
        self._related_student_thesis = None
        self._keyword_groups = None
        self._field_of_research_associations = None
        self._visibilities = None
        self._confidential = None
        self._workflows = None
        self._externalable_info = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if nature_types is not None:
          self.nature_types = nature_types
        if statuses is not None:
          self.statuses = statuses
        if short_titles is not None:
          self.short_titles = short_titles
        if acronym is not None:
          self.acronym = acronym
        if descriptions is not None:
          self.descriptions = descriptions
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if participants is not None:
          self.participants = participants
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if collaborative is not None:
          self.collaborative = collaborative
        if collaborators is not None:
          self.collaborators = collaborators
        if total_academic_ownership_percentage is not None:
          self.total_academic_ownership_percentage = total_academic_ownership_percentage
        if period is not None:
          self.period = period
        if curtailed is not None:
          self.curtailed = curtailed
        if curtail_date is not None:
          self.curtail_date = curtail_date
        if curtail_reason is not None:
          self.curtail_reason = curtail_reason
        if documents is not None:
          self.documents = documents
        if links is not None:
          self.links = links
        if related_applications is not None:
          self.related_applications = related_applications
        if related_awards is not None:
          self.related_awards = related_awards
        if related_projects is not None:
          self.related_projects = related_projects
        if related_press_media is not None:
          self.related_press_media = related_press_media
        if related_impacts is not None:
          self.related_impacts = related_impacts
        if related_activities is not None:
          self.related_activities = related_activities
        if related_prizes is not None:
          self.related_prizes = related_prizes
        if related_data_sets is not None:
          self.related_data_sets = related_data_sets
        if related_research_outputs is not None:
          self.related_research_outputs = related_research_outputs
        if related_student_thesis is not None:
          self.related_student_thesis = related_student_thesis
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if visibilities is not None:
          self.visibilities = visibilities
        if confidential is not None:
          self.confidential = confidential
        if workflows is not None:
          self.workflows = workflows
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSUPMProject.

        :return: The uuid of this WSUPMProject.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSUPMProject.

        :param uuid: The uuid of this WSUPMProject.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSUPMProject.

        :return: The html_renderings of this WSUPMProject.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSUPMProject.

        :param html_renderings: The html_renderings of this WSUPMProject.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSUPMProject.

        :return: The titles of this WSUPMProject.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSUPMProject.

        :param titles: The titles of this WSUPMProject.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSUPMProject.

        :return: The types of this WSUPMProject.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSUPMProject.

        :param types: The types of this WSUPMProject.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def nature_types(self):
        """
        Gets the nature_types of this WSUPMProject.

        :return: The nature_types of this WSUPMProject.
        :rtype: list[WSClassification]
        """
        return self._nature_types

    @nature_types.setter
    def nature_types(self, nature_types):
        """
        Sets the nature_types of this WSUPMProject.

        :param nature_types: The nature_types of this WSUPMProject.
        :type: list[WSClassification]
        """

        self._nature_types = nature_types

    @property
    def statuses(self):
        """
        Gets the statuses of this WSUPMProject.

        :return: The statuses of this WSUPMProject.
        :rtype: list[WSUPMProjectStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this WSUPMProject.

        :param statuses: The statuses of this WSUPMProject.
        :type: list[WSUPMProjectStatus]
        """

        self._statuses = statuses

    @property
    def short_titles(self):
        """
        Gets the short_titles of this WSUPMProject.

        :return: The short_titles of this WSUPMProject.
        :rtype: list[WSLocalizedString]
        """
        return self._short_titles

    @short_titles.setter
    def short_titles(self, short_titles):
        """
        Sets the short_titles of this WSUPMProject.

        :param short_titles: The short_titles of this WSUPMProject.
        :type: list[WSLocalizedString]
        """

        self._short_titles = short_titles

    @property
    def acronym(self):
        """
        Gets the acronym of this WSUPMProject.

        :return: The acronym of this WSUPMProject.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """
        Sets the acronym of this WSUPMProject.

        :param acronym: The acronym of this WSUPMProject.
        :type: str
        """

        self._acronym = acronym

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSUPMProject.

        :return: The descriptions of this WSUPMProject.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSUPMProject.

        :param descriptions: The descriptions of this WSUPMProject.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSUPMProject.

        :return: The classified_sources of this WSUPMProject.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSUPMProject.

        :param classified_sources: The classified_sources of this WSUPMProject.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def participants(self):
        """
        Gets the participants of this WSUPMProject.

        :return: The participants of this WSUPMProject.
        :rtype: list[WSClassifiedParticipantAssociation]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """
        Sets the participants of this WSUPMProject.

        :param participants: The participants of this WSUPMProject.
        :type: list[WSClassifiedParticipantAssociation]
        """

        self._participants = participants

    @property
    def organisations(self):
        """
        Gets the organisations of this WSUPMProject.

        :return: The organisations of this WSUPMProject.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSUPMProject.

        :param organisations: The organisations of this WSUPMProject.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSUPMProject.

        :return: The external_organisations of this WSUPMProject.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSUPMProject.

        :param external_organisations: The external_organisations of this WSUPMProject.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSUPMProject.

        :return: The managing_organisational_unit of this WSUPMProject.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSUPMProject.

        :param managing_organisational_unit: The managing_organisational_unit of this WSUPMProject.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def collaborative(self):
        """
        Gets the collaborative of this WSUPMProject.

        :return: The collaborative of this WSUPMProject.
        :rtype: bool
        """
        return self._collaborative

    @collaborative.setter
    def collaborative(self, collaborative):
        """
        Sets the collaborative of this WSUPMProject.

        :param collaborative: The collaborative of this WSUPMProject.
        :type: bool
        """

        self._collaborative = collaborative

    @property
    def collaborators(self):
        """
        Gets the collaborators of this WSUPMProject.

        :return: The collaborators of this WSUPMProject.
        :rtype: list[WSCollaboratorAssociation]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """
        Sets the collaborators of this WSUPMProject.

        :param collaborators: The collaborators of this WSUPMProject.
        :type: list[WSCollaboratorAssociation]
        """

        self._collaborators = collaborators

    @property
    def total_academic_ownership_percentage(self):
        """
        Gets the total_academic_ownership_percentage of this WSUPMProject.

        :return: The total_academic_ownership_percentage of this WSUPMProject.
        :rtype: float
        """
        return self._total_academic_ownership_percentage

    @total_academic_ownership_percentage.setter
    def total_academic_ownership_percentage(self, total_academic_ownership_percentage):
        """
        Sets the total_academic_ownership_percentage of this WSUPMProject.

        :param total_academic_ownership_percentage: The total_academic_ownership_percentage of this WSUPMProject.
        :type: float
        """

        self._total_academic_ownership_percentage = total_academic_ownership_percentage

    @property
    def period(self):
        """
        Gets the period of this WSUPMProject.

        :return: The period of this WSUPMProject.
        :rtype: WSDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSUPMProject.

        :param period: The period of this WSUPMProject.
        :type: WSDateRange
        """

        self._period = period

    @property
    def curtailed(self):
        """
        Gets the curtailed of this WSUPMProject.

        :return: The curtailed of this WSUPMProject.
        :rtype: bool
        """
        return self._curtailed

    @curtailed.setter
    def curtailed(self, curtailed):
        """
        Sets the curtailed of this WSUPMProject.

        :param curtailed: The curtailed of this WSUPMProject.
        :type: bool
        """

        self._curtailed = curtailed

    @property
    def curtail_date(self):
        """
        Gets the curtail_date of this WSUPMProject.

        :return: The curtail_date of this WSUPMProject.
        :rtype: datetime
        """
        return self._curtail_date

    @curtail_date.setter
    def curtail_date(self, curtail_date):
        """
        Sets the curtail_date of this WSUPMProject.

        :param curtail_date: The curtail_date of this WSUPMProject.
        :type: datetime
        """

        self._curtail_date = curtail_date

    @property
    def curtail_reason(self):
        """
        Gets the curtail_reason of this WSUPMProject.

        :return: The curtail_reason of this WSUPMProject.
        :rtype: str
        """
        return self._curtail_reason

    @curtail_reason.setter
    def curtail_reason(self, curtail_reason):
        """
        Sets the curtail_reason of this WSUPMProject.

        :param curtail_reason: The curtail_reason of this WSUPMProject.
        :type: str
        """

        self._curtail_reason = curtail_reason

    @property
    def documents(self):
        """
        Gets the documents of this WSUPMProject.

        :return: The documents of this WSUPMProject.
        :rtype: list[WSDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSUPMProject.

        :param documents: The documents of this WSUPMProject.
        :type: list[WSDocument]
        """

        self._documents = documents

    @property
    def links(self):
        """
        Gets the links of this WSUPMProject.

        :return: The links of this WSUPMProject.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSUPMProject.

        :param links: The links of this WSUPMProject.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def related_applications(self):
        """
        Gets the related_applications of this WSUPMProject.

        :return: The related_applications of this WSUPMProject.
        :rtype: list[WSApplicationRef]
        """
        return self._related_applications

    @related_applications.setter
    def related_applications(self, related_applications):
        """
        Sets the related_applications of this WSUPMProject.

        :param related_applications: The related_applications of this WSUPMProject.
        :type: list[WSApplicationRef]
        """

        self._related_applications = related_applications

    @property
    def related_awards(self):
        """
        Gets the related_awards of this WSUPMProject.

        :return: The related_awards of this WSUPMProject.
        :rtype: list[WSAwardRef]
        """
        return self._related_awards

    @related_awards.setter
    def related_awards(self, related_awards):
        """
        Sets the related_awards of this WSUPMProject.

        :param related_awards: The related_awards of this WSUPMProject.
        :type: list[WSAwardRef]
        """

        self._related_awards = related_awards

    @property
    def related_projects(self):
        """
        Gets the related_projects of this WSUPMProject.

        :return: The related_projects of this WSUPMProject.
        :rtype: list[WSUPMProjectAssociation]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """
        Sets the related_projects of this WSUPMProject.

        :param related_projects: The related_projects of this WSUPMProject.
        :type: list[WSUPMProjectAssociation]
        """

        self._related_projects = related_projects

    @property
    def related_press_media(self):
        """
        Gets the related_press_media of this WSUPMProject.
        Only available when the Press / Media module is enabled

        :return: The related_press_media of this WSUPMProject.
        :rtype: list[WSPressMediaRef]
        """
        return self._related_press_media

    @related_press_media.setter
    def related_press_media(self, related_press_media):
        """
        Sets the related_press_media of this WSUPMProject.
        Only available when the Press / Media module is enabled

        :param related_press_media: The related_press_media of this WSUPMProject.
        :type: list[WSPressMediaRef]
        """

        self._related_press_media = related_press_media

    @property
    def related_impacts(self):
        """
        Gets the related_impacts of this WSUPMProject.
        Only available when the Impact module is enabled

        :return: The related_impacts of this WSUPMProject.
        :rtype: list[WSImpactRef]
        """
        return self._related_impacts

    @related_impacts.setter
    def related_impacts(self, related_impacts):
        """
        Sets the related_impacts of this WSUPMProject.
        Only available when the Impact module is enabled

        :param related_impacts: The related_impacts of this WSUPMProject.
        :type: list[WSImpactRef]
        """

        self._related_impacts = related_impacts

    @property
    def related_activities(self):
        """
        Gets the related_activities of this WSUPMProject.
        Only available when the Activity module is enabled

        :return: The related_activities of this WSUPMProject.
        :rtype: list[WSActivityRef]
        """
        return self._related_activities

    @related_activities.setter
    def related_activities(self, related_activities):
        """
        Sets the related_activities of this WSUPMProject.
        Only available when the Activity module is enabled

        :param related_activities: The related_activities of this WSUPMProject.
        :type: list[WSActivityRef]
        """

        self._related_activities = related_activities

    @property
    def related_prizes(self):
        """
        Gets the related_prizes of this WSUPMProject.
        Only available when the Prize module is enabled

        :return: The related_prizes of this WSUPMProject.
        :rtype: list[WSPrizeRef]
        """
        return self._related_prizes

    @related_prizes.setter
    def related_prizes(self, related_prizes):
        """
        Sets the related_prizes of this WSUPMProject.
        Only available when the Prize module is enabled

        :param related_prizes: The related_prizes of this WSUPMProject.
        :type: list[WSPrizeRef]
        """

        self._related_prizes = related_prizes

    @property
    def related_data_sets(self):
        """
        Gets the related_data_sets of this WSUPMProject.
        Only available when the DataSet module is enabled

        :return: The related_data_sets of this WSUPMProject.
        :rtype: list[WSDataSetRef]
        """
        return self._related_data_sets

    @related_data_sets.setter
    def related_data_sets(self, related_data_sets):
        """
        Sets the related_data_sets of this WSUPMProject.
        Only available when the DataSet module is enabled

        :param related_data_sets: The related_data_sets of this WSUPMProject.
        :type: list[WSDataSetRef]
        """

        self._related_data_sets = related_data_sets

    @property
    def related_research_outputs(self):
        """
        Gets the related_research_outputs of this WSUPMProject.

        :return: The related_research_outputs of this WSUPMProject.
        :rtype: list[WSResearchOutputRef]
        """
        return self._related_research_outputs

    @related_research_outputs.setter
    def related_research_outputs(self, related_research_outputs):
        """
        Sets the related_research_outputs of this WSUPMProject.

        :param related_research_outputs: The related_research_outputs of this WSUPMProject.
        :type: list[WSResearchOutputRef]
        """

        self._related_research_outputs = related_research_outputs

    @property
    def related_student_thesis(self):
        """
        Gets the related_student_thesis of this WSUPMProject.
        Only available when the Student Thesis module is enabled

        :return: The related_student_thesis of this WSUPMProject.
        :rtype: list[WSStudentThesisRef]
        """
        return self._related_student_thesis

    @related_student_thesis.setter
    def related_student_thesis(self, related_student_thesis):
        """
        Sets the related_student_thesis of this WSUPMProject.
        Only available when the Student Thesis module is enabled

        :param related_student_thesis: The related_student_thesis of this WSUPMProject.
        :type: list[WSStudentThesisRef]
        """

        self._related_student_thesis = related_student_thesis

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSUPMProject.

        :return: The keyword_groups of this WSUPMProject.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSUPMProject.

        :param keyword_groups: The keyword_groups of this WSUPMProject.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSUPMProject.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSUPMProject.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSUPMProject.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSUPMProject.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSUPMProject.

        :return: The visibilities of this WSUPMProject.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSUPMProject.

        :param visibilities: The visibilities of this WSUPMProject.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def confidential(self):
        """
        Gets the confidential of this WSUPMProject.

        :return: The confidential of this WSUPMProject.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSUPMProject.

        :param confidential: The confidential of this WSUPMProject.
        :type: bool
        """

        self._confidential = confidential

    @property
    def workflows(self):
        """
        Gets the workflows of this WSUPMProject.

        :return: The workflows of this WSUPMProject.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSUPMProject.

        :param workflows: The workflows of this WSUPMProject.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSUPMProject.

        :return: The externalable_info of this WSUPMProject.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSUPMProject.

        :param externalable_info: The externalable_info of this WSUPMProject.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSUPMProject.

        :return: The info of this WSUPMProject.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSUPMProject.

        :param info: The info of this WSUPMProject.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSUPMProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
