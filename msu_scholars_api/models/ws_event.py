# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'sub_titles': 'list[WSLocalizedString]',
        'abbreviated_titles': 'list[WSLocalizedString]',
        'conference_number': 'str',
        'description': 'list[WSLocalizedString]',
        'period': 'WSDateRange',
        'links': 'list[WSLink]',
        'degree_of_recognitions': 'list[WSClassification]',
        'classified_sources': 'list[WSClassifiedValue]',
        'related_events': 'list[WSEventRef]',
        'location': 'str',
        'city': 'str',
        'countries': 'list[WSClassification]',
        'subdivisions': 'list[WSClassification]',
        'organisers': 'list[WSInternalExternalOrganisationAssociation]',
        'sponsor_organisations': 'list[WSInternalExternalOrganisationAssociation]',
        'geo_location': 'WSGeoLocation',
        'keyword_groups': 'list[WSKeywordGroup]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'workflows': 'list[WSWorkflow]',
        'info': 'WSContentInformation',
        'externalable_info': 'WSExternalableInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'sub_titles': 'subTitles',
        'abbreviated_titles': 'abbreviatedTitles',
        'conference_number': 'conferenceNumber',
        'description': 'description',
        'period': 'period',
        'links': 'links',
        'degree_of_recognitions': 'degreeOfRecognitions',
        'classified_sources': 'classifiedSources',
        'related_events': 'relatedEvents',
        'location': 'location',
        'city': 'city',
        'countries': 'countries',
        'subdivisions': 'subdivisions',
        'organisers': 'organisers',
        'sponsor_organisations': 'sponsorOrganisations',
        'geo_location': 'geoLocation',
        'keyword_groups': 'keywordGroups',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'workflows': 'workflows',
        'info': 'info',
        'externalable_info': 'externalableInfo'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, sub_titles=None, abbreviated_titles=None, conference_number=None, description=None, period=None, links=None, degree_of_recognitions=None, classified_sources=None, related_events=None, location=None, city=None, countries=None, subdivisions=None, organisers=None, sponsor_organisations=None, geo_location=None, keyword_groups=None, field_of_research_associations=None, workflows=None, info=None, externalable_info=None):
        """
        WSEvent - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._sub_titles = None
        self._abbreviated_titles = None
        self._conference_number = None
        self._description = None
        self._period = None
        self._links = None
        self._degree_of_recognitions = None
        self._classified_sources = None
        self._related_events = None
        self._location = None
        self._city = None
        self._countries = None
        self._subdivisions = None
        self._organisers = None
        self._sponsor_organisations = None
        self._geo_location = None
        self._keyword_groups = None
        self._field_of_research_associations = None
        self._workflows = None
        self._info = None
        self._externalable_info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if sub_titles is not None:
          self.sub_titles = sub_titles
        if abbreviated_titles is not None:
          self.abbreviated_titles = abbreviated_titles
        if conference_number is not None:
          self.conference_number = conference_number
        if description is not None:
          self.description = description
        if period is not None:
          self.period = period
        if links is not None:
          self.links = links
        if degree_of_recognitions is not None:
          self.degree_of_recognitions = degree_of_recognitions
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if related_events is not None:
          self.related_events = related_events
        if location is not None:
          self.location = location
        if city is not None:
          self.city = city
        if countries is not None:
          self.countries = countries
        if subdivisions is not None:
          self.subdivisions = subdivisions
        if organisers is not None:
          self.organisers = organisers
        if sponsor_organisations is not None:
          self.sponsor_organisations = sponsor_organisations
        if geo_location is not None:
          self.geo_location = geo_location
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if workflows is not None:
          self.workflows = workflows
        if info is not None:
          self.info = info
        if externalable_info is not None:
          self.externalable_info = externalable_info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSEvent.

        :return: The uuid of this WSEvent.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSEvent.

        :param uuid: The uuid of this WSEvent.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSEvent.

        :return: The html_renderings of this WSEvent.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSEvent.

        :param html_renderings: The html_renderings of this WSEvent.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSEvent.

        :return: The titles of this WSEvent.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSEvent.

        :param titles: The titles of this WSEvent.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSEvent.

        :return: The types of this WSEvent.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSEvent.

        :param types: The types of this WSEvent.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def sub_titles(self):
        """
        Gets the sub_titles of this WSEvent.

        :return: The sub_titles of this WSEvent.
        :rtype: list[WSLocalizedString]
        """
        return self._sub_titles

    @sub_titles.setter
    def sub_titles(self, sub_titles):
        """
        Sets the sub_titles of this WSEvent.

        :param sub_titles: The sub_titles of this WSEvent.
        :type: list[WSLocalizedString]
        """

        self._sub_titles = sub_titles

    @property
    def abbreviated_titles(self):
        """
        Gets the abbreviated_titles of this WSEvent.

        :return: The abbreviated_titles of this WSEvent.
        :rtype: list[WSLocalizedString]
        """
        return self._abbreviated_titles

    @abbreviated_titles.setter
    def abbreviated_titles(self, abbreviated_titles):
        """
        Sets the abbreviated_titles of this WSEvent.

        :param abbreviated_titles: The abbreviated_titles of this WSEvent.
        :type: list[WSLocalizedString]
        """

        self._abbreviated_titles = abbreviated_titles

    @property
    def conference_number(self):
        """
        Gets the conference_number of this WSEvent.

        :return: The conference_number of this WSEvent.
        :rtype: str
        """
        return self._conference_number

    @conference_number.setter
    def conference_number(self, conference_number):
        """
        Sets the conference_number of this WSEvent.

        :param conference_number: The conference_number of this WSEvent.
        :type: str
        """

        self._conference_number = conference_number

    @property
    def description(self):
        """
        Gets the description of this WSEvent.

        :return: The description of this WSEvent.
        :rtype: list[WSLocalizedString]
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WSEvent.

        :param description: The description of this WSEvent.
        :type: list[WSLocalizedString]
        """

        self._description = description

    @property
    def period(self):
        """
        Gets the period of this WSEvent.

        :return: The period of this WSEvent.
        :rtype: WSDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSEvent.

        :param period: The period of this WSEvent.
        :type: WSDateRange
        """

        self._period = period

    @property
    def links(self):
        """
        Gets the links of this WSEvent.

        :return: The links of this WSEvent.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSEvent.

        :param links: The links of this WSEvent.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def degree_of_recognitions(self):
        """
        Gets the degree_of_recognitions of this WSEvent.

        :return: The degree_of_recognitions of this WSEvent.
        :rtype: list[WSClassification]
        """
        return self._degree_of_recognitions

    @degree_of_recognitions.setter
    def degree_of_recognitions(self, degree_of_recognitions):
        """
        Sets the degree_of_recognitions of this WSEvent.

        :param degree_of_recognitions: The degree_of_recognitions of this WSEvent.
        :type: list[WSClassification]
        """

        self._degree_of_recognitions = degree_of_recognitions

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSEvent.

        :return: The classified_sources of this WSEvent.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSEvent.

        :param classified_sources: The classified_sources of this WSEvent.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def related_events(self):
        """
        Gets the related_events of this WSEvent.

        :return: The related_events of this WSEvent.
        :rtype: list[WSEventRef]
        """
        return self._related_events

    @related_events.setter
    def related_events(self, related_events):
        """
        Sets the related_events of this WSEvent.

        :param related_events: The related_events of this WSEvent.
        :type: list[WSEventRef]
        """

        self._related_events = related_events

    @property
    def location(self):
        """
        Gets the location of this WSEvent.

        :return: The location of this WSEvent.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this WSEvent.

        :param location: The location of this WSEvent.
        :type: str
        """

        self._location = location

    @property
    def city(self):
        """
        Gets the city of this WSEvent.

        :return: The city of this WSEvent.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this WSEvent.

        :param city: The city of this WSEvent.
        :type: str
        """

        self._city = city

    @property
    def countries(self):
        """
        Gets the countries of this WSEvent.

        :return: The countries of this WSEvent.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSEvent.

        :param countries: The countries of this WSEvent.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def subdivisions(self):
        """
        Gets the subdivisions of this WSEvent.

        :return: The subdivisions of this WSEvent.
        :rtype: list[WSClassification]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """
        Sets the subdivisions of this WSEvent.

        :param subdivisions: The subdivisions of this WSEvent.
        :type: list[WSClassification]
        """

        self._subdivisions = subdivisions

    @property
    def organisers(self):
        """
        Gets the organisers of this WSEvent.

        :return: The organisers of this WSEvent.
        :rtype: list[WSInternalExternalOrganisationAssociation]
        """
        return self._organisers

    @organisers.setter
    def organisers(self, organisers):
        """
        Sets the organisers of this WSEvent.

        :param organisers: The organisers of this WSEvent.
        :type: list[WSInternalExternalOrganisationAssociation]
        """

        self._organisers = organisers

    @property
    def sponsor_organisations(self):
        """
        Gets the sponsor_organisations of this WSEvent.

        :return: The sponsor_organisations of this WSEvent.
        :rtype: list[WSInternalExternalOrganisationAssociation]
        """
        return self._sponsor_organisations

    @sponsor_organisations.setter
    def sponsor_organisations(self, sponsor_organisations):
        """
        Sets the sponsor_organisations of this WSEvent.

        :param sponsor_organisations: The sponsor_organisations of this WSEvent.
        :type: list[WSInternalExternalOrganisationAssociation]
        """

        self._sponsor_organisations = sponsor_organisations

    @property
    def geo_location(self):
        """
        Gets the geo_location of this WSEvent.

        :return: The geo_location of this WSEvent.
        :rtype: WSGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """
        Sets the geo_location of this WSEvent.

        :param geo_location: The geo_location of this WSEvent.
        :type: WSGeoLocation
        """

        self._geo_location = geo_location

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSEvent.

        :return: The keyword_groups of this WSEvent.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSEvent.

        :param keyword_groups: The keyword_groups of this WSEvent.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSEvent.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSEvent.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSEvent.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSEvent.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def workflows(self):
        """
        Gets the workflows of this WSEvent.

        :return: The workflows of this WSEvent.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSEvent.

        :param workflows: The workflows of this WSEvent.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def info(self):
        """
        Gets the info of this WSEvent.

        :return: The info of this WSEvent.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSEvent.

        :param info: The info of this WSEvent.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSEvent.

        :return: The externalable_info of this WSEvent.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSEvent.

        :param externalable_info: The externalable_info of this WSEvent.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
