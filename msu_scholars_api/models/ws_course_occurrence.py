# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSCourseOccurrence(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'semesters': 'list[WSClassification]',
        'year': 'int',
        'lecturers': 'list[WSClassifiedPersonAssociation]',
        'number_of_students': 'int',
        'grade': 'str',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]'
    }

    attribute_map = {
        'id': 'id',
        'semesters': 'semesters',
        'year': 'year',
        'lecturers': 'lecturers',
        'number_of_students': 'numberOfStudents',
        'grade': 'grade',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations'
    }

    def __init__(self, id=None, semesters=None, year=None, lecturers=None, number_of_students=None, grade=None, organisations=None, external_organisations=None):
        """
        WSCourseOccurrence - a model defined in Swagger
        """

        self._id = None
        self._semesters = None
        self._year = None
        self._lecturers = None
        self._number_of_students = None
        self._grade = None
        self._organisations = None
        self._external_organisations = None

        if id is not None:
          self.id = id
        if semesters is not None:
          self.semesters = semesters
        if year is not None:
          self.year = year
        if lecturers is not None:
          self.lecturers = lecturers
        if number_of_students is not None:
          self.number_of_students = number_of_students
        if grade is not None:
          self.grade = grade
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations

    @property
    def id(self):
        """
        Gets the id of this WSCourseOccurrence.

        :return: The id of this WSCourseOccurrence.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSCourseOccurrence.

        :param id: The id of this WSCourseOccurrence.
        :type: int
        """

        self._id = id

    @property
    def semesters(self):
        """
        Gets the semesters of this WSCourseOccurrence.

        :return: The semesters of this WSCourseOccurrence.
        :rtype: list[WSClassification]
        """
        return self._semesters

    @semesters.setter
    def semesters(self, semesters):
        """
        Sets the semesters of this WSCourseOccurrence.

        :param semesters: The semesters of this WSCourseOccurrence.
        :type: list[WSClassification]
        """

        self._semesters = semesters

    @property
    def year(self):
        """
        Gets the year of this WSCourseOccurrence.

        :return: The year of this WSCourseOccurrence.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """
        Sets the year of this WSCourseOccurrence.

        :param year: The year of this WSCourseOccurrence.
        :type: int
        """

        self._year = year

    @property
    def lecturers(self):
        """
        Gets the lecturers of this WSCourseOccurrence.

        :return: The lecturers of this WSCourseOccurrence.
        :rtype: list[WSClassifiedPersonAssociation]
        """
        return self._lecturers

    @lecturers.setter
    def lecturers(self, lecturers):
        """
        Sets the lecturers of this WSCourseOccurrence.

        :param lecturers: The lecturers of this WSCourseOccurrence.
        :type: list[WSClassifiedPersonAssociation]
        """

        self._lecturers = lecturers

    @property
    def number_of_students(self):
        """
        Gets the number_of_students of this WSCourseOccurrence.

        :return: The number_of_students of this WSCourseOccurrence.
        :rtype: int
        """
        return self._number_of_students

    @number_of_students.setter
    def number_of_students(self, number_of_students):
        """
        Sets the number_of_students of this WSCourseOccurrence.

        :param number_of_students: The number_of_students of this WSCourseOccurrence.
        :type: int
        """

        self._number_of_students = number_of_students

    @property
    def grade(self):
        """
        Gets the grade of this WSCourseOccurrence.

        :return: The grade of this WSCourseOccurrence.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """
        Sets the grade of this WSCourseOccurrence.

        :param grade: The grade of this WSCourseOccurrence.
        :type: str
        """

        self._grade = grade

    @property
    def organisations(self):
        """
        Gets the organisations of this WSCourseOccurrence.

        :return: The organisations of this WSCourseOccurrence.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSCourseOccurrence.

        :param organisations: The organisations of this WSCourseOccurrence.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSCourseOccurrence.

        :return: The external_organisations of this WSCourseOccurrence.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSCourseOccurrence.

        :param external_organisations: The external_organisations of this WSCourseOccurrence.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSCourseOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
