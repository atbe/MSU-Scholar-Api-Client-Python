# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSImpactClassifiedParticipantAssociation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'person': 'WSPersonRef',
        'external_person': 'WSExternalPersonRef',
        'name': 'WSName',
        'person_roles': 'list[WSClassification]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'email': 'str',
        'external_note': 'str',
        'external_organisation': 'str',
        'phone': 'str',
        'sectors': 'list[WSClassification]',
        'countries': 'list[WSClassification]',
        'academic_ownership_percentage': 'float'
    }

    attribute_map = {
        'id': 'id',
        'person': 'person',
        'external_person': 'externalPerson',
        'name': 'name',
        'person_roles': 'personRoles',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'email': 'email',
        'external_note': 'externalNote',
        'external_organisation': 'externalOrganisation',
        'phone': 'phone',
        'sectors': 'sectors',
        'countries': 'countries',
        'academic_ownership_percentage': 'academicOwnershipPercentage'
    }

    def __init__(self, id=None, person=None, external_person=None, name=None, person_roles=None, organisations=None, external_organisations=None, email=None, external_note=None, external_organisation=None, phone=None, sectors=None, countries=None, academic_ownership_percentage=None):
        """
        WSImpactClassifiedParticipantAssociation - a model defined in Swagger
        """

        self._id = None
        self._person = None
        self._external_person = None
        self._name = None
        self._person_roles = None
        self._organisations = None
        self._external_organisations = None
        self._email = None
        self._external_note = None
        self._external_organisation = None
        self._phone = None
        self._sectors = None
        self._countries = None
        self._academic_ownership_percentage = None

        if id is not None:
          self.id = id
        if person is not None:
          self.person = person
        if external_person is not None:
          self.external_person = external_person
        if name is not None:
          self.name = name
        if person_roles is not None:
          self.person_roles = person_roles
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if email is not None:
          self.email = email
        if external_note is not None:
          self.external_note = external_note
        if external_organisation is not None:
          self.external_organisation = external_organisation
        if phone is not None:
          self.phone = phone
        if sectors is not None:
          self.sectors = sectors
        if countries is not None:
          self.countries = countries
        if academic_ownership_percentage is not None:
          self.academic_ownership_percentage = academic_ownership_percentage

    @property
    def id(self):
        """
        Gets the id of this WSImpactClassifiedParticipantAssociation.

        :return: The id of this WSImpactClassifiedParticipantAssociation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSImpactClassifiedParticipantAssociation.

        :param id: The id of this WSImpactClassifiedParticipantAssociation.
        :type: int
        """

        self._id = id

    @property
    def person(self):
        """
        Gets the person of this WSImpactClassifiedParticipantAssociation.

        :return: The person of this WSImpactClassifiedParticipantAssociation.
        :rtype: WSPersonRef
        """
        return self._person

    @person.setter
    def person(self, person):
        """
        Sets the person of this WSImpactClassifiedParticipantAssociation.

        :param person: The person of this WSImpactClassifiedParticipantAssociation.
        :type: WSPersonRef
        """

        self._person = person

    @property
    def external_person(self):
        """
        Gets the external_person of this WSImpactClassifiedParticipantAssociation.

        :return: The external_person of this WSImpactClassifiedParticipantAssociation.
        :rtype: WSExternalPersonRef
        """
        return self._external_person

    @external_person.setter
    def external_person(self, external_person):
        """
        Sets the external_person of this WSImpactClassifiedParticipantAssociation.

        :param external_person: The external_person of this WSImpactClassifiedParticipantAssociation.
        :type: WSExternalPersonRef
        """

        self._external_person = external_person

    @property
    def name(self):
        """
        Gets the name of this WSImpactClassifiedParticipantAssociation.

        :return: The name of this WSImpactClassifiedParticipantAssociation.
        :rtype: WSName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSImpactClassifiedParticipantAssociation.

        :param name: The name of this WSImpactClassifiedParticipantAssociation.
        :type: WSName
        """

        self._name = name

    @property
    def person_roles(self):
        """
        Gets the person_roles of this WSImpactClassifiedParticipantAssociation.

        :return: The person_roles of this WSImpactClassifiedParticipantAssociation.
        :rtype: list[WSClassification]
        """
        return self._person_roles

    @person_roles.setter
    def person_roles(self, person_roles):
        """
        Sets the person_roles of this WSImpactClassifiedParticipantAssociation.

        :param person_roles: The person_roles of this WSImpactClassifiedParticipantAssociation.
        :type: list[WSClassification]
        """

        self._person_roles = person_roles

    @property
    def organisations(self):
        """
        Gets the organisations of this WSImpactClassifiedParticipantAssociation.

        :return: The organisations of this WSImpactClassifiedParticipantAssociation.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSImpactClassifiedParticipantAssociation.

        :param organisations: The organisations of this WSImpactClassifiedParticipantAssociation.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSImpactClassifiedParticipantAssociation.

        :return: The external_organisations of this WSImpactClassifiedParticipantAssociation.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSImpactClassifiedParticipantAssociation.

        :param external_organisations: The external_organisations of this WSImpactClassifiedParticipantAssociation.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def email(self):
        """
        Gets the email of this WSImpactClassifiedParticipantAssociation.

        :return: The email of this WSImpactClassifiedParticipantAssociation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this WSImpactClassifiedParticipantAssociation.

        :param email: The email of this WSImpactClassifiedParticipantAssociation.
        :type: str
        """

        self._email = email

    @property
    def external_note(self):
        """
        Gets the external_note of this WSImpactClassifiedParticipantAssociation.

        :return: The external_note of this WSImpactClassifiedParticipantAssociation.
        :rtype: str
        """
        return self._external_note

    @external_note.setter
    def external_note(self, external_note):
        """
        Sets the external_note of this WSImpactClassifiedParticipantAssociation.

        :param external_note: The external_note of this WSImpactClassifiedParticipantAssociation.
        :type: str
        """

        self._external_note = external_note

    @property
    def external_organisation(self):
        """
        Gets the external_organisation of this WSImpactClassifiedParticipantAssociation.

        :return: The external_organisation of this WSImpactClassifiedParticipantAssociation.
        :rtype: str
        """
        return self._external_organisation

    @external_organisation.setter
    def external_organisation(self, external_organisation):
        """
        Sets the external_organisation of this WSImpactClassifiedParticipantAssociation.

        :param external_organisation: The external_organisation of this WSImpactClassifiedParticipantAssociation.
        :type: str
        """

        self._external_organisation = external_organisation

    @property
    def phone(self):
        """
        Gets the phone of this WSImpactClassifiedParticipantAssociation.

        :return: The phone of this WSImpactClassifiedParticipantAssociation.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this WSImpactClassifiedParticipantAssociation.

        :param phone: The phone of this WSImpactClassifiedParticipantAssociation.
        :type: str
        """

        self._phone = phone

    @property
    def sectors(self):
        """
        Gets the sectors of this WSImpactClassifiedParticipantAssociation.

        :return: The sectors of this WSImpactClassifiedParticipantAssociation.
        :rtype: list[WSClassification]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """
        Sets the sectors of this WSImpactClassifiedParticipantAssociation.

        :param sectors: The sectors of this WSImpactClassifiedParticipantAssociation.
        :type: list[WSClassification]
        """

        self._sectors = sectors

    @property
    def countries(self):
        """
        Gets the countries of this WSImpactClassifiedParticipantAssociation.

        :return: The countries of this WSImpactClassifiedParticipantAssociation.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSImpactClassifiedParticipantAssociation.

        :param countries: The countries of this WSImpactClassifiedParticipantAssociation.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def academic_ownership_percentage(self):
        """
        Gets the academic_ownership_percentage of this WSImpactClassifiedParticipantAssociation.

        :return: The academic_ownership_percentage of this WSImpactClassifiedParticipantAssociation.
        :rtype: float
        """
        return self._academic_ownership_percentage

    @academic_ownership_percentage.setter
    def academic_ownership_percentage(self, academic_ownership_percentage):
        """
        Sets the academic_ownership_percentage of this WSImpactClassifiedParticipantAssociation.

        :param academic_ownership_percentage: The academic_ownership_percentage of this WSImpactClassifiedParticipantAssociation.
        :type: float
        """

        self._academic_ownership_percentage = academic_ownership_percentage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSImpactClassifiedParticipantAssociation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
