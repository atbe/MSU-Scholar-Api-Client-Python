# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSJournal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSTemporalTitle]',
        'types': 'list[WSClassification]',
        'alternative_titles': 'list[str]',
        'electronic_iss_ns': 'list[str]',
        'alternative_iss_ns': 'list[str]',
        'countries': 'list[WSClassification]',
        'classified_sources': 'list[WSClassifiedValue]',
        'doaj_indexed': 'bool',
        'preprint_archiving': 'str',
        'preprint_restrictions': 'list[str]',
        'postprint_archiving': 'str',
        'postprint_restrictions': 'list[str]',
        'postprint_conditions': 'list[str]',
        'postprint_copyright': 'str',
        'pdf_archiving': 'str',
        'pdf_restrictions': 'list[str]',
        'sherpa_romeo_colors': 'list[WSClassification]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'workflows': 'list[WSWorkflow]',
        'info': 'WSContentInformation',
        'externalable_info': 'WSExternalableInformation',
        'scopus_metrics': 'list[WSScopusMetrics]',
        'publisher': 'WSPublisherRef',
        'sherpa_romeo_customer_information': 'str',
        'issns': 'list[WSTemporalISSN]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'alternative_titles': 'alternativeTitles',
        'electronic_iss_ns': 'electronicISSNs',
        'alternative_iss_ns': 'alternativeISSNs',
        'countries': 'countries',
        'classified_sources': 'classifiedSources',
        'doaj_indexed': 'doajIndexed',
        'preprint_archiving': 'preprintArchiving',
        'preprint_restrictions': 'preprintRestrictions',
        'postprint_archiving': 'postprintArchiving',
        'postprint_restrictions': 'postprintRestrictions',
        'postprint_conditions': 'postprintConditions',
        'postprint_copyright': 'postprintCopyright',
        'pdf_archiving': 'pdfArchiving',
        'pdf_restrictions': 'pdfRestrictions',
        'sherpa_romeo_colors': 'sherpaRomeoColors',
        'keyword_groups': 'keywordGroups',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'workflows': 'workflows',
        'info': 'info',
        'externalable_info': 'externalableInfo',
        'scopus_metrics': 'scopusMetrics',
        'publisher': 'publisher',
        'sherpa_romeo_customer_information': 'sherpaRomeoCustomerInformation',
        'issns': 'issns'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, alternative_titles=None, electronic_iss_ns=None, alternative_iss_ns=None, countries=None, classified_sources=None, doaj_indexed=False, preprint_archiving=None, preprint_restrictions=None, postprint_archiving=None, postprint_restrictions=None, postprint_conditions=None, postprint_copyright=None, pdf_archiving=None, pdf_restrictions=None, sherpa_romeo_colors=None, keyword_groups=None, field_of_research_associations=None, workflows=None, info=None, externalable_info=None, scopus_metrics=None, publisher=None, sherpa_romeo_customer_information=None, issns=None):
        """
        WSJournal - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._alternative_titles = None
        self._electronic_iss_ns = None
        self._alternative_iss_ns = None
        self._countries = None
        self._classified_sources = None
        self._doaj_indexed = None
        self._preprint_archiving = None
        self._preprint_restrictions = None
        self._postprint_archiving = None
        self._postprint_restrictions = None
        self._postprint_conditions = None
        self._postprint_copyright = None
        self._pdf_archiving = None
        self._pdf_restrictions = None
        self._sherpa_romeo_colors = None
        self._keyword_groups = None
        self._field_of_research_associations = None
        self._workflows = None
        self._info = None
        self._externalable_info = None
        self._scopus_metrics = None
        self._publisher = None
        self._sherpa_romeo_customer_information = None
        self._issns = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if alternative_titles is not None:
          self.alternative_titles = alternative_titles
        if electronic_iss_ns is not None:
          self.electronic_iss_ns = electronic_iss_ns
        if alternative_iss_ns is not None:
          self.alternative_iss_ns = alternative_iss_ns
        if countries is not None:
          self.countries = countries
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if doaj_indexed is not None:
          self.doaj_indexed = doaj_indexed
        if preprint_archiving is not None:
          self.preprint_archiving = preprint_archiving
        if preprint_restrictions is not None:
          self.preprint_restrictions = preprint_restrictions
        if postprint_archiving is not None:
          self.postprint_archiving = postprint_archiving
        if postprint_restrictions is not None:
          self.postprint_restrictions = postprint_restrictions
        if postprint_conditions is not None:
          self.postprint_conditions = postprint_conditions
        if postprint_copyright is not None:
          self.postprint_copyright = postprint_copyright
        if pdf_archiving is not None:
          self.pdf_archiving = pdf_archiving
        if pdf_restrictions is not None:
          self.pdf_restrictions = pdf_restrictions
        if sherpa_romeo_colors is not None:
          self.sherpa_romeo_colors = sherpa_romeo_colors
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if workflows is not None:
          self.workflows = workflows
        if info is not None:
          self.info = info
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if scopus_metrics is not None:
          self.scopus_metrics = scopus_metrics
        if publisher is not None:
          self.publisher = publisher
        if sherpa_romeo_customer_information is not None:
          self.sherpa_romeo_customer_information = sherpa_romeo_customer_information
        if issns is not None:
          self.issns = issns

    @property
    def uuid(self):
        """
        Gets the uuid of this WSJournal.

        :return: The uuid of this WSJournal.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSJournal.

        :param uuid: The uuid of this WSJournal.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSJournal.

        :return: The html_renderings of this WSJournal.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSJournal.

        :param html_renderings: The html_renderings of this WSJournal.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSJournal.

        :return: The titles of this WSJournal.
        :rtype: list[WSTemporalTitle]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSJournal.

        :param titles: The titles of this WSJournal.
        :type: list[WSTemporalTitle]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSJournal.

        :return: The types of this WSJournal.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSJournal.

        :param types: The types of this WSJournal.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def alternative_titles(self):
        """
        Gets the alternative_titles of this WSJournal.

        :return: The alternative_titles of this WSJournal.
        :rtype: list[str]
        """
        return self._alternative_titles

    @alternative_titles.setter
    def alternative_titles(self, alternative_titles):
        """
        Sets the alternative_titles of this WSJournal.

        :param alternative_titles: The alternative_titles of this WSJournal.
        :type: list[str]
        """

        self._alternative_titles = alternative_titles

    @property
    def electronic_iss_ns(self):
        """
        Gets the electronic_iss_ns of this WSJournal.

        :return: The electronic_iss_ns of this WSJournal.
        :rtype: list[str]
        """
        return self._electronic_iss_ns

    @electronic_iss_ns.setter
    def electronic_iss_ns(self, electronic_iss_ns):
        """
        Sets the electronic_iss_ns of this WSJournal.

        :param electronic_iss_ns: The electronic_iss_ns of this WSJournal.
        :type: list[str]
        """

        self._electronic_iss_ns = electronic_iss_ns

    @property
    def alternative_iss_ns(self):
        """
        Gets the alternative_iss_ns of this WSJournal.

        :return: The alternative_iss_ns of this WSJournal.
        :rtype: list[str]
        """
        return self._alternative_iss_ns

    @alternative_iss_ns.setter
    def alternative_iss_ns(self, alternative_iss_ns):
        """
        Sets the alternative_iss_ns of this WSJournal.

        :param alternative_iss_ns: The alternative_iss_ns of this WSJournal.
        :type: list[str]
        """

        self._alternative_iss_ns = alternative_iss_ns

    @property
    def countries(self):
        """
        Gets the countries of this WSJournal.

        :return: The countries of this WSJournal.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSJournal.

        :param countries: The countries of this WSJournal.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSJournal.

        :return: The classified_sources of this WSJournal.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSJournal.

        :param classified_sources: The classified_sources of this WSJournal.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def doaj_indexed(self):
        """
        Gets the doaj_indexed of this WSJournal.

        :return: The doaj_indexed of this WSJournal.
        :rtype: bool
        """
        return self._doaj_indexed

    @doaj_indexed.setter
    def doaj_indexed(self, doaj_indexed):
        """
        Sets the doaj_indexed of this WSJournal.

        :param doaj_indexed: The doaj_indexed of this WSJournal.
        :type: bool
        """

        self._doaj_indexed = doaj_indexed

    @property
    def preprint_archiving(self):
        """
        Gets the preprint_archiving of this WSJournal.

        :return: The preprint_archiving of this WSJournal.
        :rtype: str
        """
        return self._preprint_archiving

    @preprint_archiving.setter
    def preprint_archiving(self, preprint_archiving):
        """
        Sets the preprint_archiving of this WSJournal.

        :param preprint_archiving: The preprint_archiving of this WSJournal.
        :type: str
        """

        self._preprint_archiving = preprint_archiving

    @property
    def preprint_restrictions(self):
        """
        Gets the preprint_restrictions of this WSJournal.

        :return: The preprint_restrictions of this WSJournal.
        :rtype: list[str]
        """
        return self._preprint_restrictions

    @preprint_restrictions.setter
    def preprint_restrictions(self, preprint_restrictions):
        """
        Sets the preprint_restrictions of this WSJournal.

        :param preprint_restrictions: The preprint_restrictions of this WSJournal.
        :type: list[str]
        """

        self._preprint_restrictions = preprint_restrictions

    @property
    def postprint_archiving(self):
        """
        Gets the postprint_archiving of this WSJournal.

        :return: The postprint_archiving of this WSJournal.
        :rtype: str
        """
        return self._postprint_archiving

    @postprint_archiving.setter
    def postprint_archiving(self, postprint_archiving):
        """
        Sets the postprint_archiving of this WSJournal.

        :param postprint_archiving: The postprint_archiving of this WSJournal.
        :type: str
        """

        self._postprint_archiving = postprint_archiving

    @property
    def postprint_restrictions(self):
        """
        Gets the postprint_restrictions of this WSJournal.

        :return: The postprint_restrictions of this WSJournal.
        :rtype: list[str]
        """
        return self._postprint_restrictions

    @postprint_restrictions.setter
    def postprint_restrictions(self, postprint_restrictions):
        """
        Sets the postprint_restrictions of this WSJournal.

        :param postprint_restrictions: The postprint_restrictions of this WSJournal.
        :type: list[str]
        """

        self._postprint_restrictions = postprint_restrictions

    @property
    def postprint_conditions(self):
        """
        Gets the postprint_conditions of this WSJournal.

        :return: The postprint_conditions of this WSJournal.
        :rtype: list[str]
        """
        return self._postprint_conditions

    @postprint_conditions.setter
    def postprint_conditions(self, postprint_conditions):
        """
        Sets the postprint_conditions of this WSJournal.

        :param postprint_conditions: The postprint_conditions of this WSJournal.
        :type: list[str]
        """

        self._postprint_conditions = postprint_conditions

    @property
    def postprint_copyright(self):
        """
        Gets the postprint_copyright of this WSJournal.

        :return: The postprint_copyright of this WSJournal.
        :rtype: str
        """
        return self._postprint_copyright

    @postprint_copyright.setter
    def postprint_copyright(self, postprint_copyright):
        """
        Sets the postprint_copyright of this WSJournal.

        :param postprint_copyright: The postprint_copyright of this WSJournal.
        :type: str
        """

        self._postprint_copyright = postprint_copyright

    @property
    def pdf_archiving(self):
        """
        Gets the pdf_archiving of this WSJournal.

        :return: The pdf_archiving of this WSJournal.
        :rtype: str
        """
        return self._pdf_archiving

    @pdf_archiving.setter
    def pdf_archiving(self, pdf_archiving):
        """
        Sets the pdf_archiving of this WSJournal.

        :param pdf_archiving: The pdf_archiving of this WSJournal.
        :type: str
        """

        self._pdf_archiving = pdf_archiving

    @property
    def pdf_restrictions(self):
        """
        Gets the pdf_restrictions of this WSJournal.

        :return: The pdf_restrictions of this WSJournal.
        :rtype: list[str]
        """
        return self._pdf_restrictions

    @pdf_restrictions.setter
    def pdf_restrictions(self, pdf_restrictions):
        """
        Sets the pdf_restrictions of this WSJournal.

        :param pdf_restrictions: The pdf_restrictions of this WSJournal.
        :type: list[str]
        """

        self._pdf_restrictions = pdf_restrictions

    @property
    def sherpa_romeo_colors(self):
        """
        Gets the sherpa_romeo_colors of this WSJournal.

        :return: The sherpa_romeo_colors of this WSJournal.
        :rtype: list[WSClassification]
        """
        return self._sherpa_romeo_colors

    @sherpa_romeo_colors.setter
    def sherpa_romeo_colors(self, sherpa_romeo_colors):
        """
        Sets the sherpa_romeo_colors of this WSJournal.

        :param sherpa_romeo_colors: The sherpa_romeo_colors of this WSJournal.
        :type: list[WSClassification]
        """

        self._sherpa_romeo_colors = sherpa_romeo_colors

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSJournal.

        :return: The keyword_groups of this WSJournal.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSJournal.

        :param keyword_groups: The keyword_groups of this WSJournal.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSJournal.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSJournal.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSJournal.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSJournal.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def workflows(self):
        """
        Gets the workflows of this WSJournal.

        :return: The workflows of this WSJournal.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSJournal.

        :param workflows: The workflows of this WSJournal.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def info(self):
        """
        Gets the info of this WSJournal.

        :return: The info of this WSJournal.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSJournal.

        :param info: The info of this WSJournal.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSJournal.

        :return: The externalable_info of this WSJournal.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSJournal.

        :param externalable_info: The externalable_info of this WSJournal.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def scopus_metrics(self):
        """
        Gets the scopus_metrics of this WSJournal.

        :return: The scopus_metrics of this WSJournal.
        :rtype: list[WSScopusMetrics]
        """
        return self._scopus_metrics

    @scopus_metrics.setter
    def scopus_metrics(self, scopus_metrics):
        """
        Sets the scopus_metrics of this WSJournal.

        :param scopus_metrics: The scopus_metrics of this WSJournal.
        :type: list[WSScopusMetrics]
        """

        self._scopus_metrics = scopus_metrics

    @property
    def publisher(self):
        """
        Gets the publisher of this WSJournal.

        :return: The publisher of this WSJournal.
        :rtype: WSPublisherRef
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """
        Sets the publisher of this WSJournal.

        :param publisher: The publisher of this WSJournal.
        :type: WSPublisherRef
        """

        self._publisher = publisher

    @property
    def sherpa_romeo_customer_information(self):
        """
        Gets the sherpa_romeo_customer_information of this WSJournal.

        :return: The sherpa_romeo_customer_information of this WSJournal.
        :rtype: str
        """
        return self._sherpa_romeo_customer_information

    @sherpa_romeo_customer_information.setter
    def sherpa_romeo_customer_information(self, sherpa_romeo_customer_information):
        """
        Sets the sherpa_romeo_customer_information of this WSJournal.

        :param sherpa_romeo_customer_information: The sherpa_romeo_customer_information of this WSJournal.
        :type: str
        """

        self._sherpa_romeo_customer_information = sherpa_romeo_customer_information

    @property
    def issns(self):
        """
        Gets the issns of this WSJournal.

        :return: The issns of this WSJournal.
        :rtype: list[WSTemporalISSN]
        """
        return self._issns

    @issns.setter
    def issns(self, issns):
        """
        Sets the issns of this WSJournal.

        :param issns: The issns of this WSJournal.
        :type: list[WSTemporalISSN]
        """

        self._issns = issns

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSJournal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
