# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'base_version': 'str',
        'template_version': 'str',
        'core_version': 'str',
        'current_username': 'str',
        'current_authentication_scope_name': 'str',
        'date_formats': 'list[WSMetaDateFormat]',
        'interface_locales': 'list[str]',
        'submission_locales': 'list[str]',
        'currency': 'str',
        'country': 'str',
        'features': 'list[WSMetaFeature]'
    }

    attribute_map = {
        'version': 'version',
        'base_version': 'baseVersion',
        'template_version': 'templateVersion',
        'core_version': 'coreVersion',
        'current_username': 'currentUsername',
        'current_authentication_scope_name': 'currentAuthenticationScopeName',
        'date_formats': 'dateFormats',
        'interface_locales': 'interfaceLocales',
        'submission_locales': 'submissionLocales',
        'currency': 'currency',
        'country': 'country',
        'features': 'features'
    }

    def __init__(self, version=None, base_version=None, template_version=None, core_version=None, current_username=None, current_authentication_scope_name=None, date_formats=None, interface_locales=None, submission_locales=None, currency=None, country=None, features=None):
        """
        WSMetaData - a model defined in Swagger
        """

        self._version = None
        self._base_version = None
        self._template_version = None
        self._core_version = None
        self._current_username = None
        self._current_authentication_scope_name = None
        self._date_formats = None
        self._interface_locales = None
        self._submission_locales = None
        self._currency = None
        self._country = None
        self._features = None

        if version is not None:
          self.version = version
        if base_version is not None:
          self.base_version = base_version
        if template_version is not None:
          self.template_version = template_version
        if core_version is not None:
          self.core_version = core_version
        if current_username is not None:
          self.current_username = current_username
        if current_authentication_scope_name is not None:
          self.current_authentication_scope_name = current_authentication_scope_name
        if date_formats is not None:
          self.date_formats = date_formats
        if interface_locales is not None:
          self.interface_locales = interface_locales
        if submission_locales is not None:
          self.submission_locales = submission_locales
        if currency is not None:
          self.currency = currency
        if country is not None:
          self.country = country
        if features is not None:
          self.features = features

    @property
    def version(self):
        """
        Gets the version of this WSMetaData.

        :return: The version of this WSMetaData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this WSMetaData.

        :param version: The version of this WSMetaData.
        :type: str
        """

        self._version = version

    @property
    def base_version(self):
        """
        Gets the base_version of this WSMetaData.

        :return: The base_version of this WSMetaData.
        :rtype: str
        """
        return self._base_version

    @base_version.setter
    def base_version(self, base_version):
        """
        Sets the base_version of this WSMetaData.

        :param base_version: The base_version of this WSMetaData.
        :type: str
        """

        self._base_version = base_version

    @property
    def template_version(self):
        """
        Gets the template_version of this WSMetaData.

        :return: The template_version of this WSMetaData.
        :rtype: str
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """
        Sets the template_version of this WSMetaData.

        :param template_version: The template_version of this WSMetaData.
        :type: str
        """

        self._template_version = template_version

    @property
    def core_version(self):
        """
        Gets the core_version of this WSMetaData.

        :return: The core_version of this WSMetaData.
        :rtype: str
        """
        return self._core_version

    @core_version.setter
    def core_version(self, core_version):
        """
        Sets the core_version of this WSMetaData.

        :param core_version: The core_version of this WSMetaData.
        :type: str
        """

        self._core_version = core_version

    @property
    def current_username(self):
        """
        Gets the current_username of this WSMetaData.

        :return: The current_username of this WSMetaData.
        :rtype: str
        """
        return self._current_username

    @current_username.setter
    def current_username(self, current_username):
        """
        Sets the current_username of this WSMetaData.

        :param current_username: The current_username of this WSMetaData.
        :type: str
        """

        self._current_username = current_username

    @property
    def current_authentication_scope_name(self):
        """
        Gets the current_authentication_scope_name of this WSMetaData.

        :return: The current_authentication_scope_name of this WSMetaData.
        :rtype: str
        """
        return self._current_authentication_scope_name

    @current_authentication_scope_name.setter
    def current_authentication_scope_name(self, current_authentication_scope_name):
        """
        Sets the current_authentication_scope_name of this WSMetaData.

        :param current_authentication_scope_name: The current_authentication_scope_name of this WSMetaData.
        :type: str
        """

        self._current_authentication_scope_name = current_authentication_scope_name

    @property
    def date_formats(self):
        """
        Gets the date_formats of this WSMetaData.

        :return: The date_formats of this WSMetaData.
        :rtype: list[WSMetaDateFormat]
        """
        return self._date_formats

    @date_formats.setter
    def date_formats(self, date_formats):
        """
        Sets the date_formats of this WSMetaData.

        :param date_formats: The date_formats of this WSMetaData.
        :type: list[WSMetaDateFormat]
        """

        self._date_formats = date_formats

    @property
    def interface_locales(self):
        """
        Gets the interface_locales of this WSMetaData.

        :return: The interface_locales of this WSMetaData.
        :rtype: list[str]
        """
        return self._interface_locales

    @interface_locales.setter
    def interface_locales(self, interface_locales):
        """
        Sets the interface_locales of this WSMetaData.

        :param interface_locales: The interface_locales of this WSMetaData.
        :type: list[str]
        """

        self._interface_locales = interface_locales

    @property
    def submission_locales(self):
        """
        Gets the submission_locales of this WSMetaData.

        :return: The submission_locales of this WSMetaData.
        :rtype: list[str]
        """
        return self._submission_locales

    @submission_locales.setter
    def submission_locales(self, submission_locales):
        """
        Sets the submission_locales of this WSMetaData.

        :param submission_locales: The submission_locales of this WSMetaData.
        :type: list[str]
        """

        self._submission_locales = submission_locales

    @property
    def currency(self):
        """
        Gets the currency of this WSMetaData.

        :return: The currency of this WSMetaData.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this WSMetaData.

        :param currency: The currency of this WSMetaData.
        :type: str
        """

        self._currency = currency

    @property
    def country(self):
        """
        Gets the country of this WSMetaData.

        :return: The country of this WSMetaData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this WSMetaData.

        :param country: The country of this WSMetaData.
        :type: str
        """

        self._country = country

    @property
    def features(self):
        """
        Gets the features of this WSMetaData.

        :return: The features of this WSMetaData.
        :rtype: list[WSMetaFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this WSMetaData.

        :param features: The features of this WSMetaData.
        :type: list[WSMetaFeature]
        """

        self._features = features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
