# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSSemanticGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'thesauri': 'WSThesauriRef',
        'semantic_group_id': 'str',
        'name': 'list[WSLocalizedString]',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'thesauri': 'thesauri',
        'semantic_group_id': 'semanticGroupId',
        'name': 'name',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, thesauri=None, semantic_group_id=None, name=None, info=None):
        """
        WSSemanticGroup - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._thesauri = None
        self._semantic_group_id = None
        self._name = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if thesauri is not None:
          self.thesauri = thesauri
        if semantic_group_id is not None:
          self.semantic_group_id = semantic_group_id
        if name is not None:
          self.name = name
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSSemanticGroup.

        :return: The uuid of this WSSemanticGroup.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSSemanticGroup.

        :param uuid: The uuid of this WSSemanticGroup.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSSemanticGroup.

        :return: The html_renderings of this WSSemanticGroup.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSSemanticGroup.

        :param html_renderings: The html_renderings of this WSSemanticGroup.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def thesauri(self):
        """
        Gets the thesauri of this WSSemanticGroup.

        :return: The thesauri of this WSSemanticGroup.
        :rtype: WSThesauriRef
        """
        return self._thesauri

    @thesauri.setter
    def thesauri(self, thesauri):
        """
        Sets the thesauri of this WSSemanticGroup.

        :param thesauri: The thesauri of this WSSemanticGroup.
        :type: WSThesauriRef
        """

        self._thesauri = thesauri

    @property
    def semantic_group_id(self):
        """
        Gets the semantic_group_id of this WSSemanticGroup.

        :return: The semantic_group_id of this WSSemanticGroup.
        :rtype: str
        """
        return self._semantic_group_id

    @semantic_group_id.setter
    def semantic_group_id(self, semantic_group_id):
        """
        Sets the semantic_group_id of this WSSemanticGroup.

        :param semantic_group_id: The semantic_group_id of this WSSemanticGroup.
        :type: str
        """

        self._semantic_group_id = semantic_group_id

    @property
    def name(self):
        """
        Gets the name of this WSSemanticGroup.

        :return: The name of this WSSemanticGroup.
        :rtype: list[WSLocalizedString]
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSSemanticGroup.

        :param name: The name of this WSSemanticGroup.
        :type: list[WSLocalizedString]
        """

        self._name = name

    @property
    def info(self):
        """
        Gets the info of this WSSemanticGroup.

        :return: The info of this WSSemanticGroup.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSSemanticGroup.

        :param info: The info of this WSSemanticGroup.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSSemanticGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
