# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSCurriculumVitae(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'title': 'str',
        'person': 'WSPersonRef',
        'types': 'list[WSClassification]',
        'blocks': 'list[WSAbstractCurriculumVitaeBlock]',
        'confidential': 'bool',
        'visibilities': 'list[WSVisibility]',
        'info': 'WSContentInformation',
        'externalable_info': 'WSExternalableInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'title': 'title',
        'person': 'person',
        'types': 'types',
        'blocks': 'blocks',
        'confidential': 'confidential',
        'visibilities': 'visibilities',
        'info': 'info',
        'externalable_info': 'externalableInfo'
    }

    def __init__(self, uuid=None, html_renderings=None, title=None, person=None, types=None, blocks=None, confidential=False, visibilities=None, info=None, externalable_info=None):
        """
        WSCurriculumVitae - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._title = None
        self._person = None
        self._types = None
        self._blocks = None
        self._confidential = None
        self._visibilities = None
        self._info = None
        self._externalable_info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if title is not None:
          self.title = title
        if person is not None:
          self.person = person
        if types is not None:
          self.types = types
        if blocks is not None:
          self.blocks = blocks
        if confidential is not None:
          self.confidential = confidential
        if visibilities is not None:
          self.visibilities = visibilities
        if info is not None:
          self.info = info
        if externalable_info is not None:
          self.externalable_info = externalable_info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSCurriculumVitae.

        :return: The uuid of this WSCurriculumVitae.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSCurriculumVitae.

        :param uuid: The uuid of this WSCurriculumVitae.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSCurriculumVitae.

        :return: The html_renderings of this WSCurriculumVitae.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSCurriculumVitae.

        :param html_renderings: The html_renderings of this WSCurriculumVitae.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def title(self):
        """
        Gets the title of this WSCurriculumVitae.

        :return: The title of this WSCurriculumVitae.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this WSCurriculumVitae.

        :param title: The title of this WSCurriculumVitae.
        :type: str
        """

        self._title = title

    @property
    def person(self):
        """
        Gets the person of this WSCurriculumVitae.

        :return: The person of this WSCurriculumVitae.
        :rtype: WSPersonRef
        """
        return self._person

    @person.setter
    def person(self, person):
        """
        Sets the person of this WSCurriculumVitae.

        :param person: The person of this WSCurriculumVitae.
        :type: WSPersonRef
        """

        self._person = person

    @property
    def types(self):
        """
        Gets the types of this WSCurriculumVitae.

        :return: The types of this WSCurriculumVitae.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSCurriculumVitae.

        :param types: The types of this WSCurriculumVitae.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def blocks(self):
        """
        Gets the blocks of this WSCurriculumVitae.

        :return: The blocks of this WSCurriculumVitae.
        :rtype: list[WSAbstractCurriculumVitaeBlock]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """
        Sets the blocks of this WSCurriculumVitae.

        :param blocks: The blocks of this WSCurriculumVitae.
        :type: list[WSAbstractCurriculumVitaeBlock]
        """

        self._blocks = blocks

    @property
    def confidential(self):
        """
        Gets the confidential of this WSCurriculumVitae.

        :return: The confidential of this WSCurriculumVitae.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSCurriculumVitae.

        :param confidential: The confidential of this WSCurriculumVitae.
        :type: bool
        """

        self._confidential = confidential

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSCurriculumVitae.

        :return: The visibilities of this WSCurriculumVitae.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSCurriculumVitae.

        :param visibilities: The visibilities of this WSCurriculumVitae.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def info(self):
        """
        Gets the info of this WSCurriculumVitae.

        :return: The info of this WSCurriculumVitae.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSCurriculumVitae.

        :param info: The info of this WSCurriculumVitae.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSCurriculumVitae.

        :return: The externalable_info of this WSCurriculumVitae.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSCurriculumVitae.

        :param externalable_info: The externalable_info of this WSCurriculumVitae.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSCurriculumVitae):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
