# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSOrganisation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'names': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'name_variants': 'list[WSClassifiedLocalizedValue]',
        'profile_informations': 'list[WSClassifiedLocalizedValue]',
        'photos': 'list[WSClassifiedFileRef]',
        'classified_sources': 'list[WSClassifiedValue]',
        'addresses': 'list[WSClassifiedAddress]',
        'phone_numbers': 'list[WSClassifiedValue]',
        'emails': 'list[WSClassifiedValue]',
        'web_addresses': 'list[WSClassifiedLocalizedValue]',
        'period': 'WSDateRange',
        'taken_over_by': 'WSOrganisationRef',
        'parents': 'list[WSOrganisationRef]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'cost_centers': 'list[WSClassification]',
        'visibilities': 'list[WSVisibility]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'names': 'names',
        'types': 'types',
        'name_variants': 'nameVariants',
        'profile_informations': 'profileInformations',
        'photos': 'photos',
        'classified_sources': 'classifiedSources',
        'addresses': 'addresses',
        'phone_numbers': 'phoneNumbers',
        'emails': 'emails',
        'web_addresses': 'webAddresses',
        'period': 'period',
        'taken_over_by': 'takenOverBy',
        'parents': 'parents',
        'keyword_groups': 'keywordGroups',
        'cost_centers': 'costCenters',
        'visibilities': 'visibilities',
        'externalable_info': 'externalableInfo',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, names=None, types=None, name_variants=None, profile_informations=None, photos=None, classified_sources=None, addresses=None, phone_numbers=None, emails=None, web_addresses=None, period=None, taken_over_by=None, parents=None, keyword_groups=None, cost_centers=None, visibilities=None, externalable_info=None, info=None):
        """
        WSOrganisation - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._names = None
        self._types = None
        self._name_variants = None
        self._profile_informations = None
        self._photos = None
        self._classified_sources = None
        self._addresses = None
        self._phone_numbers = None
        self._emails = None
        self._web_addresses = None
        self._period = None
        self._taken_over_by = None
        self._parents = None
        self._keyword_groups = None
        self._cost_centers = None
        self._visibilities = None
        self._externalable_info = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if names is not None:
          self.names = names
        if types is not None:
          self.types = types
        if name_variants is not None:
          self.name_variants = name_variants
        if profile_informations is not None:
          self.profile_informations = profile_informations
        if photos is not None:
          self.photos = photos
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if addresses is not None:
          self.addresses = addresses
        if phone_numbers is not None:
          self.phone_numbers = phone_numbers
        if emails is not None:
          self.emails = emails
        if web_addresses is not None:
          self.web_addresses = web_addresses
        if period is not None:
          self.period = period
        if taken_over_by is not None:
          self.taken_over_by = taken_over_by
        if parents is not None:
          self.parents = parents
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if cost_centers is not None:
          self.cost_centers = cost_centers
        if visibilities is not None:
          self.visibilities = visibilities
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSOrganisation.

        :return: The uuid of this WSOrganisation.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSOrganisation.

        :param uuid: The uuid of this WSOrganisation.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSOrganisation.

        :return: The html_renderings of this WSOrganisation.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSOrganisation.

        :param html_renderings: The html_renderings of this WSOrganisation.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def names(self):
        """
        Gets the names of this WSOrganisation.

        :return: The names of this WSOrganisation.
        :rtype: list[WSLocalizedString]
        """
        return self._names

    @names.setter
    def names(self, names):
        """
        Sets the names of this WSOrganisation.

        :param names: The names of this WSOrganisation.
        :type: list[WSLocalizedString]
        """

        self._names = names

    @property
    def types(self):
        """
        Gets the types of this WSOrganisation.

        :return: The types of this WSOrganisation.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSOrganisation.

        :param types: The types of this WSOrganisation.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def name_variants(self):
        """
        Gets the name_variants of this WSOrganisation.

        :return: The name_variants of this WSOrganisation.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._name_variants

    @name_variants.setter
    def name_variants(self, name_variants):
        """
        Sets the name_variants of this WSOrganisation.

        :param name_variants: The name_variants of this WSOrganisation.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._name_variants = name_variants

    @property
    def profile_informations(self):
        """
        Gets the profile_informations of this WSOrganisation.

        :return: The profile_informations of this WSOrganisation.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._profile_informations

    @profile_informations.setter
    def profile_informations(self, profile_informations):
        """
        Sets the profile_informations of this WSOrganisation.

        :param profile_informations: The profile_informations of this WSOrganisation.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._profile_informations = profile_informations

    @property
    def photos(self):
        """
        Gets the photos of this WSOrganisation.

        :return: The photos of this WSOrganisation.
        :rtype: list[WSClassifiedFileRef]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """
        Sets the photos of this WSOrganisation.

        :param photos: The photos of this WSOrganisation.
        :type: list[WSClassifiedFileRef]
        """

        self._photos = photos

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSOrganisation.

        :return: The classified_sources of this WSOrganisation.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSOrganisation.

        :param classified_sources: The classified_sources of this WSOrganisation.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def addresses(self):
        """
        Gets the addresses of this WSOrganisation.

        :return: The addresses of this WSOrganisation.
        :rtype: list[WSClassifiedAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this WSOrganisation.

        :param addresses: The addresses of this WSOrganisation.
        :type: list[WSClassifiedAddress]
        """

        self._addresses = addresses

    @property
    def phone_numbers(self):
        """
        Gets the phone_numbers of this WSOrganisation.

        :return: The phone_numbers of this WSOrganisation.
        :rtype: list[WSClassifiedValue]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """
        Sets the phone_numbers of this WSOrganisation.

        :param phone_numbers: The phone_numbers of this WSOrganisation.
        :type: list[WSClassifiedValue]
        """

        self._phone_numbers = phone_numbers

    @property
    def emails(self):
        """
        Gets the emails of this WSOrganisation.

        :return: The emails of this WSOrganisation.
        :rtype: list[WSClassifiedValue]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """
        Sets the emails of this WSOrganisation.

        :param emails: The emails of this WSOrganisation.
        :type: list[WSClassifiedValue]
        """

        self._emails = emails

    @property
    def web_addresses(self):
        """
        Gets the web_addresses of this WSOrganisation.

        :return: The web_addresses of this WSOrganisation.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._web_addresses

    @web_addresses.setter
    def web_addresses(self, web_addresses):
        """
        Sets the web_addresses of this WSOrganisation.

        :param web_addresses: The web_addresses of this WSOrganisation.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._web_addresses = web_addresses

    @property
    def period(self):
        """
        Gets the period of this WSOrganisation.

        :return: The period of this WSOrganisation.
        :rtype: WSDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSOrganisation.

        :param period: The period of this WSOrganisation.
        :type: WSDateRange
        """

        self._period = period

    @property
    def taken_over_by(self):
        """
        Gets the taken_over_by of this WSOrganisation.

        :return: The taken_over_by of this WSOrganisation.
        :rtype: WSOrganisationRef
        """
        return self._taken_over_by

    @taken_over_by.setter
    def taken_over_by(self, taken_over_by):
        """
        Sets the taken_over_by of this WSOrganisation.

        :param taken_over_by: The taken_over_by of this WSOrganisation.
        :type: WSOrganisationRef
        """

        self._taken_over_by = taken_over_by

    @property
    def parents(self):
        """
        Gets the parents of this WSOrganisation.

        :return: The parents of this WSOrganisation.
        :rtype: list[WSOrganisationRef]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """
        Sets the parents of this WSOrganisation.

        :param parents: The parents of this WSOrganisation.
        :type: list[WSOrganisationRef]
        """

        self._parents = parents

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSOrganisation.

        :return: The keyword_groups of this WSOrganisation.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSOrganisation.

        :param keyword_groups: The keyword_groups of this WSOrganisation.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def cost_centers(self):
        """
        Gets the cost_centers of this WSOrganisation.
        Only available on the DK and UK bases

        :return: The cost_centers of this WSOrganisation.
        :rtype: list[WSClassification]
        """
        return self._cost_centers

    @cost_centers.setter
    def cost_centers(self, cost_centers):
        """
        Sets the cost_centers of this WSOrganisation.
        Only available on the DK and UK bases

        :param cost_centers: The cost_centers of this WSOrganisation.
        :type: list[WSClassification]
        """

        self._cost_centers = cost_centers

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSOrganisation.

        :return: The visibilities of this WSOrganisation.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSOrganisation.

        :param visibilities: The visibilities of this WSOrganisation.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSOrganisation.

        :return: The externalable_info of this WSOrganisation.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSOrganisation.

        :param externalable_info: The externalable_info of this WSOrganisation.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSOrganisation.

        :return: The info of this WSOrganisation.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSOrganisation.

        :param info: The info of this WSOrganisation.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSOrganisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
