# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSCollaboratorAssociation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'types': 'list[WSClassification]',
        'lead_collaborator': 'bool',
        'organisation': 'WSOrganisationRef',
        'external_organisation': 'WSExternalOrganisationRef'
    }

    attribute_map = {
        'id': 'id',
        'types': 'types',
        'lead_collaborator': 'leadCollaborator',
        'organisation': 'organisation',
        'external_organisation': 'externalOrganisation'
    }

    def __init__(self, id=None, types=None, lead_collaborator=False, organisation=None, external_organisation=None):
        """
        WSCollaboratorAssociation - a model defined in Swagger
        """

        self._id = None
        self._types = None
        self._lead_collaborator = None
        self._organisation = None
        self._external_organisation = None

        if id is not None:
          self.id = id
        if types is not None:
          self.types = types
        if lead_collaborator is not None:
          self.lead_collaborator = lead_collaborator
        if organisation is not None:
          self.organisation = organisation
        if external_organisation is not None:
          self.external_organisation = external_organisation

    @property
    def id(self):
        """
        Gets the id of this WSCollaboratorAssociation.

        :return: The id of this WSCollaboratorAssociation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSCollaboratorAssociation.

        :param id: The id of this WSCollaboratorAssociation.
        :type: int
        """

        self._id = id

    @property
    def types(self):
        """
        Gets the types of this WSCollaboratorAssociation.

        :return: The types of this WSCollaboratorAssociation.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSCollaboratorAssociation.

        :param types: The types of this WSCollaboratorAssociation.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def lead_collaborator(self):
        """
        Gets the lead_collaborator of this WSCollaboratorAssociation.

        :return: The lead_collaborator of this WSCollaboratorAssociation.
        :rtype: bool
        """
        return self._lead_collaborator

    @lead_collaborator.setter
    def lead_collaborator(self, lead_collaborator):
        """
        Sets the lead_collaborator of this WSCollaboratorAssociation.

        :param lead_collaborator: The lead_collaborator of this WSCollaboratorAssociation.
        :type: bool
        """

        self._lead_collaborator = lead_collaborator

    @property
    def organisation(self):
        """
        Gets the organisation of this WSCollaboratorAssociation.

        :return: The organisation of this WSCollaboratorAssociation.
        :rtype: WSOrganisationRef
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """
        Sets the organisation of this WSCollaboratorAssociation.

        :param organisation: The organisation of this WSCollaboratorAssociation.
        :type: WSOrganisationRef
        """

        self._organisation = organisation

    @property
    def external_organisation(self):
        """
        Gets the external_organisation of this WSCollaboratorAssociation.

        :return: The external_organisation of this WSCollaboratorAssociation.
        :rtype: WSExternalOrganisationRef
        """
        return self._external_organisation

    @external_organisation.setter
    def external_organisation(self, external_organisation):
        """
        Sets the external_organisation of this WSCollaboratorAssociation.

        :param external_organisation: The external_organisation of this WSCollaboratorAssociation.
        :type: WSExternalOrganisationRef
        """

        self._external_organisation = external_organisation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSCollaboratorAssociation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
