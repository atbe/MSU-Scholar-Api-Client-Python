# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'address4': 'str',
        'address5': 'str',
        'postal_code': 'str',
        'city': 'str',
        'countries': 'list[WSClassification]',
        'subdivisions': 'list[WSClassification]',
        'state': 'str',
        'geo_location': 'WSGeoLocation'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'address4': 'address4',
        'address5': 'address5',
        'postal_code': 'postalCode',
        'city': 'city',
        'countries': 'countries',
        'subdivisions': 'subdivisions',
        'state': 'state',
        'geo_location': 'geoLocation'
    }

    def __init__(self, address1=None, address2=None, address3=None, address4=None, address5=None, postal_code=None, city=None, countries=None, subdivisions=None, state=None, geo_location=None):
        """
        WSAddress - a model defined in Swagger
        """

        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._address4 = None
        self._address5 = None
        self._postal_code = None
        self._city = None
        self._countries = None
        self._subdivisions = None
        self._state = None
        self._geo_location = None

        if address1 is not None:
          self.address1 = address1
        if address2 is not None:
          self.address2 = address2
        if address3 is not None:
          self.address3 = address3
        if address4 is not None:
          self.address4 = address4
        if address5 is not None:
          self.address5 = address5
        if postal_code is not None:
          self.postal_code = postal_code
        if city is not None:
          self.city = city
        if countries is not None:
          self.countries = countries
        if subdivisions is not None:
          self.subdivisions = subdivisions
        if state is not None:
          self.state = state
        if geo_location is not None:
          self.geo_location = geo_location

    @property
    def address1(self):
        """
        Gets the address1 of this WSAddress.

        :return: The address1 of this WSAddress.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this WSAddress.

        :param address1: The address1 of this WSAddress.
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """
        Gets the address2 of this WSAddress.

        :return: The address2 of this WSAddress.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this WSAddress.

        :param address2: The address2 of this WSAddress.
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """
        Gets the address3 of this WSAddress.

        :return: The address3 of this WSAddress.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """
        Sets the address3 of this WSAddress.

        :param address3: The address3 of this WSAddress.
        :type: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """
        Gets the address4 of this WSAddress.

        :return: The address4 of this WSAddress.
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """
        Sets the address4 of this WSAddress.

        :param address4: The address4 of this WSAddress.
        :type: str
        """

        self._address4 = address4

    @property
    def address5(self):
        """
        Gets the address5 of this WSAddress.

        :return: The address5 of this WSAddress.
        :rtype: str
        """
        return self._address5

    @address5.setter
    def address5(self, address5):
        """
        Sets the address5 of this WSAddress.

        :param address5: The address5 of this WSAddress.
        :type: str
        """

        self._address5 = address5

    @property
    def postal_code(self):
        """
        Gets the postal_code of this WSAddress.

        :return: The postal_code of this WSAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this WSAddress.

        :param postal_code: The postal_code of this WSAddress.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """
        Gets the city of this WSAddress.

        :return: The city of this WSAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this WSAddress.

        :param city: The city of this WSAddress.
        :type: str
        """

        self._city = city

    @property
    def countries(self):
        """
        Gets the countries of this WSAddress.

        :return: The countries of this WSAddress.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSAddress.

        :param countries: The countries of this WSAddress.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def subdivisions(self):
        """
        Gets the subdivisions of this WSAddress.

        :return: The subdivisions of this WSAddress.
        :rtype: list[WSClassification]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """
        Sets the subdivisions of this WSAddress.

        :param subdivisions: The subdivisions of this WSAddress.
        :type: list[WSClassification]
        """

        self._subdivisions = subdivisions

    @property
    def state(self):
        """
        Gets the state of this WSAddress.

        :return: The state of this WSAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this WSAddress.

        :param state: The state of this WSAddress.
        :type: str
        """

        self._state = state

    @property
    def geo_location(self):
        """
        Gets the geo_location of this WSAddress.

        :return: The geo_location of this WSAddress.
        :rtype: WSGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """
        Sets the geo_location of this WSAddress.

        :param geo_location: The geo_location of this WSAddress.
        :type: WSGeoLocation
        """

        self._geo_location = geo_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
