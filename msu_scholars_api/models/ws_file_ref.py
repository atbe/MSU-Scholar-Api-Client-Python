# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSFileRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'mime_type': 'str',
        'size': 'int',
        'file_url': 'str',
        'digest_algorithm': 'str',
        'digest': 'str'
    }

    attribute_map = {
        'file_name': 'fileName',
        'mime_type': 'mimeType',
        'size': 'size',
        'file_url': 'fileURL',
        'digest_algorithm': 'digestAlgorithm',
        'digest': 'digest'
    }

    def __init__(self, file_name=None, mime_type=None, size=None, file_url=None, digest_algorithm=None, digest=None):
        """
        WSFileRef - a model defined in Swagger
        """

        self._file_name = None
        self._mime_type = None
        self._size = None
        self._file_url = None
        self._digest_algorithm = None
        self._digest = None

        if file_name is not None:
          self.file_name = file_name
        if mime_type is not None:
          self.mime_type = mime_type
        if size is not None:
          self.size = size
        if file_url is not None:
          self.file_url = file_url
        if digest_algorithm is not None:
          self.digest_algorithm = digest_algorithm
        if digest is not None:
          self.digest = digest

    @property
    def file_name(self):
        """
        Gets the file_name of this WSFileRef.

        :return: The file_name of this WSFileRef.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this WSFileRef.

        :param file_name: The file_name of this WSFileRef.
        :type: str
        """

        self._file_name = file_name

    @property
    def mime_type(self):
        """
        Gets the mime_type of this WSFileRef.

        :return: The mime_type of this WSFileRef.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """
        Sets the mime_type of this WSFileRef.

        :param mime_type: The mime_type of this WSFileRef.
        :type: str
        """

        self._mime_type = mime_type

    @property
    def size(self):
        """
        Gets the size of this WSFileRef.

        :return: The size of this WSFileRef.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this WSFileRef.

        :param size: The size of this WSFileRef.
        :type: int
        """

        self._size = size

    @property
    def file_url(self):
        """
        Gets the file_url of this WSFileRef.

        :return: The file_url of this WSFileRef.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """
        Sets the file_url of this WSFileRef.

        :param file_url: The file_url of this WSFileRef.
        :type: str
        """

        self._file_url = file_url

    @property
    def digest_algorithm(self):
        """
        Gets the digest_algorithm of this WSFileRef.

        :return: The digest_algorithm of this WSFileRef.
        :rtype: str
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """
        Sets the digest_algorithm of this WSFileRef.

        :param digest_algorithm: The digest_algorithm of this WSFileRef.
        :type: str
        """

        self._digest_algorithm = digest_algorithm

    @property
    def digest(self):
        """
        Gets the digest of this WSFileRef.

        :return: The digest of this WSFileRef.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """
        Sets the digest of this WSFileRef.

        :param digest: The digest of this WSFileRef.
        :type: str
        """

        self._digest = digest

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSFileRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
