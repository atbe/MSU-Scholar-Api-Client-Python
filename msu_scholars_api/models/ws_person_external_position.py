# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSPersonExternalPosition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'appointments': 'list[WSClassification]',
        'external_organisation': 'WSExternalOrganisationRef',
        'period': 'WSCompoundDateRange'
    }

    attribute_map = {
        'id': 'id',
        'appointments': 'appointments',
        'external_organisation': 'externalOrganisation',
        'period': 'period'
    }

    def __init__(self, id=None, appointments=None, external_organisation=None, period=None):
        """
        WSPersonExternalPosition - a model defined in Swagger
        """

        self._id = None
        self._appointments = None
        self._external_organisation = None
        self._period = None

        if id is not None:
          self.id = id
        if appointments is not None:
          self.appointments = appointments
        if external_organisation is not None:
          self.external_organisation = external_organisation
        if period is not None:
          self.period = period

    @property
    def id(self):
        """
        Gets the id of this WSPersonExternalPosition.

        :return: The id of this WSPersonExternalPosition.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSPersonExternalPosition.

        :param id: The id of this WSPersonExternalPosition.
        :type: int
        """

        self._id = id

    @property
    def appointments(self):
        """
        Gets the appointments of this WSPersonExternalPosition.

        :return: The appointments of this WSPersonExternalPosition.
        :rtype: list[WSClassification]
        """
        return self._appointments

    @appointments.setter
    def appointments(self, appointments):
        """
        Sets the appointments of this WSPersonExternalPosition.

        :param appointments: The appointments of this WSPersonExternalPosition.
        :type: list[WSClassification]
        """

        self._appointments = appointments

    @property
    def external_organisation(self):
        """
        Gets the external_organisation of this WSPersonExternalPosition.

        :return: The external_organisation of this WSPersonExternalPosition.
        :rtype: WSExternalOrganisationRef
        """
        return self._external_organisation

    @external_organisation.setter
    def external_organisation(self, external_organisation):
        """
        Sets the external_organisation of this WSPersonExternalPosition.

        :param external_organisation: The external_organisation of this WSPersonExternalPosition.
        :type: WSExternalOrganisationRef
        """

        self._external_organisation = external_organisation

    @property
    def period(self):
        """
        Gets the period of this WSPersonExternalPosition.

        :return: The period of this WSPersonExternalPosition.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSPersonExternalPosition.

        :param period: The period of this WSPersonExternalPosition.
        :type: WSCompoundDateRange
        """

        self._period = period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSPersonExternalPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
