# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSImpact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'statuses': 'list[WSClassification]',
        'period': 'WSCompoundDateRange',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'categories': 'list[WSClassification]',
        'levels': 'list[WSClassification]',
        'classified_sources': 'list[WSClassifiedValue]',
        'participants': 'list[WSImpactClassifiedParticipantAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'evidence_list': 'list[WSImpactEvidence]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'documents': 'list[WSDocument]',
        'links': 'list[WSLink]',
        'related_impacts': 'list[WSImpactRef]',
        'related_press_media': 'list[WSPressMediaRef]',
        'related_research_outputs': 'list[WSResearchOutputRef]',
        'related_activities': 'list[WSActivityRef]',
        'related_projects': 'list[WSUPMProjectRef]',
        'related_prizes': 'list[WSPrizeRef]',
        'related_student_theses': 'list[WSStudentThesisRef]',
        'related_data_sets': 'list[WSDataSetRef]',
        'visibilities': 'list[WSVisibility]',
        'confidential': 'bool',
        'keyword_groups': 'list[WSKeywordGroup]',
        'workflows': 'list[WSWorkflow]',
        'info': 'WSContentInformation',
        'externalable_info': 'WSExternalableInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'statuses': 'statuses',
        'period': 'period',
        'descriptions': 'descriptions',
        'categories': 'categories',
        'levels': 'levels',
        'classified_sources': 'classifiedSources',
        'participants': 'participants',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'evidence_list': 'evidenceList',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'documents': 'documents',
        'links': 'links',
        'related_impacts': 'relatedImpacts',
        'related_press_media': 'relatedPressMedia',
        'related_research_outputs': 'relatedResearchOutputs',
        'related_activities': 'relatedActivities',
        'related_projects': 'relatedProjects',
        'related_prizes': 'relatedPrizes',
        'related_student_theses': 'relatedStudentTheses',
        'related_data_sets': 'relatedDataSets',
        'visibilities': 'visibilities',
        'confidential': 'confidential',
        'keyword_groups': 'keywordGroups',
        'workflows': 'workflows',
        'info': 'info',
        'externalable_info': 'externalableInfo'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, statuses=None, period=None, descriptions=None, categories=None, levels=None, classified_sources=None, participants=None, organisations=None, external_organisations=None, evidence_list=None, managing_organisational_unit=None, documents=None, links=None, related_impacts=None, related_press_media=None, related_research_outputs=None, related_activities=None, related_projects=None, related_prizes=None, related_student_theses=None, related_data_sets=None, visibilities=None, confidential=False, keyword_groups=None, workflows=None, info=None, externalable_info=None):
        """
        WSImpact - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._statuses = None
        self._period = None
        self._descriptions = None
        self._categories = None
        self._levels = None
        self._classified_sources = None
        self._participants = None
        self._organisations = None
        self._external_organisations = None
        self._evidence_list = None
        self._managing_organisational_unit = None
        self._documents = None
        self._links = None
        self._related_impacts = None
        self._related_press_media = None
        self._related_research_outputs = None
        self._related_activities = None
        self._related_projects = None
        self._related_prizes = None
        self._related_student_theses = None
        self._related_data_sets = None
        self._visibilities = None
        self._confidential = None
        self._keyword_groups = None
        self._workflows = None
        self._info = None
        self._externalable_info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if statuses is not None:
          self.statuses = statuses
        if period is not None:
          self.period = period
        if descriptions is not None:
          self.descriptions = descriptions
        if categories is not None:
          self.categories = categories
        if levels is not None:
          self.levels = levels
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if participants is not None:
          self.participants = participants
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if evidence_list is not None:
          self.evidence_list = evidence_list
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if documents is not None:
          self.documents = documents
        if links is not None:
          self.links = links
        if related_impacts is not None:
          self.related_impacts = related_impacts
        if related_press_media is not None:
          self.related_press_media = related_press_media
        if related_research_outputs is not None:
          self.related_research_outputs = related_research_outputs
        if related_activities is not None:
          self.related_activities = related_activities
        if related_projects is not None:
          self.related_projects = related_projects
        if related_prizes is not None:
          self.related_prizes = related_prizes
        if related_student_theses is not None:
          self.related_student_theses = related_student_theses
        if related_data_sets is not None:
          self.related_data_sets = related_data_sets
        if visibilities is not None:
          self.visibilities = visibilities
        if confidential is not None:
          self.confidential = confidential
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if workflows is not None:
          self.workflows = workflows
        if info is not None:
          self.info = info
        if externalable_info is not None:
          self.externalable_info = externalable_info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSImpact.

        :return: The uuid of this WSImpact.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSImpact.

        :param uuid: The uuid of this WSImpact.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSImpact.

        :return: The html_renderings of this WSImpact.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSImpact.

        :param html_renderings: The html_renderings of this WSImpact.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSImpact.

        :return: The titles of this WSImpact.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSImpact.

        :param titles: The titles of this WSImpact.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSImpact.

        :return: The types of this WSImpact.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSImpact.

        :param types: The types of this WSImpact.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def statuses(self):
        """
        Gets the statuses of this WSImpact.

        :return: The statuses of this WSImpact.
        :rtype: list[WSClassification]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this WSImpact.

        :param statuses: The statuses of this WSImpact.
        :type: list[WSClassification]
        """

        self._statuses = statuses

    @property
    def period(self):
        """
        Gets the period of this WSImpact.

        :return: The period of this WSImpact.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSImpact.

        :param period: The period of this WSImpact.
        :type: WSCompoundDateRange
        """

        self._period = period

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSImpact.

        :return: The descriptions of this WSImpact.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSImpact.

        :param descriptions: The descriptions of this WSImpact.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def categories(self):
        """
        Gets the categories of this WSImpact.

        :return: The categories of this WSImpact.
        :rtype: list[WSClassification]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this WSImpact.

        :param categories: The categories of this WSImpact.
        :type: list[WSClassification]
        """

        self._categories = categories

    @property
    def levels(self):
        """
        Gets the levels of this WSImpact.

        :return: The levels of this WSImpact.
        :rtype: list[WSClassification]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """
        Sets the levels of this WSImpact.

        :param levels: The levels of this WSImpact.
        :type: list[WSClassification]
        """

        self._levels = levels

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSImpact.

        :return: The classified_sources of this WSImpact.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSImpact.

        :param classified_sources: The classified_sources of this WSImpact.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def participants(self):
        """
        Gets the participants of this WSImpact.

        :return: The participants of this WSImpact.
        :rtype: list[WSImpactClassifiedParticipantAssociation]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """
        Sets the participants of this WSImpact.

        :param participants: The participants of this WSImpact.
        :type: list[WSImpactClassifiedParticipantAssociation]
        """

        self._participants = participants

    @property
    def organisations(self):
        """
        Gets the organisations of this WSImpact.

        :return: The organisations of this WSImpact.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSImpact.

        :param organisations: The organisations of this WSImpact.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSImpact.

        :return: The external_organisations of this WSImpact.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSImpact.

        :param external_organisations: The external_organisations of this WSImpact.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def evidence_list(self):
        """
        Gets the evidence_list of this WSImpact.

        :return: The evidence_list of this WSImpact.
        :rtype: list[WSImpactEvidence]
        """
        return self._evidence_list

    @evidence_list.setter
    def evidence_list(self, evidence_list):
        """
        Sets the evidence_list of this WSImpact.

        :param evidence_list: The evidence_list of this WSImpact.
        :type: list[WSImpactEvidence]
        """

        self._evidence_list = evidence_list

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSImpact.

        :return: The managing_organisational_unit of this WSImpact.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSImpact.

        :param managing_organisational_unit: The managing_organisational_unit of this WSImpact.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def documents(self):
        """
        Gets the documents of this WSImpact.

        :return: The documents of this WSImpact.
        :rtype: list[WSDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSImpact.

        :param documents: The documents of this WSImpact.
        :type: list[WSDocument]
        """

        self._documents = documents

    @property
    def links(self):
        """
        Gets the links of this WSImpact.

        :return: The links of this WSImpact.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSImpact.

        :param links: The links of this WSImpact.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def related_impacts(self):
        """
        Gets the related_impacts of this WSImpact.

        :return: The related_impacts of this WSImpact.
        :rtype: list[WSImpactRef]
        """
        return self._related_impacts

    @related_impacts.setter
    def related_impacts(self, related_impacts):
        """
        Sets the related_impacts of this WSImpact.

        :param related_impacts: The related_impacts of this WSImpact.
        :type: list[WSImpactRef]
        """

        self._related_impacts = related_impacts

    @property
    def related_press_media(self):
        """
        Gets the related_press_media of this WSImpact.
        Only available when the Press / Media module is enabled

        :return: The related_press_media of this WSImpact.
        :rtype: list[WSPressMediaRef]
        """
        return self._related_press_media

    @related_press_media.setter
    def related_press_media(self, related_press_media):
        """
        Sets the related_press_media of this WSImpact.
        Only available when the Press / Media module is enabled

        :param related_press_media: The related_press_media of this WSImpact.
        :type: list[WSPressMediaRef]
        """

        self._related_press_media = related_press_media

    @property
    def related_research_outputs(self):
        """
        Gets the related_research_outputs of this WSImpact.

        :return: The related_research_outputs of this WSImpact.
        :rtype: list[WSResearchOutputRef]
        """
        return self._related_research_outputs

    @related_research_outputs.setter
    def related_research_outputs(self, related_research_outputs):
        """
        Sets the related_research_outputs of this WSImpact.

        :param related_research_outputs: The related_research_outputs of this WSImpact.
        :type: list[WSResearchOutputRef]
        """

        self._related_research_outputs = related_research_outputs

    @property
    def related_activities(self):
        """
        Gets the related_activities of this WSImpact.
        Only available when the Activity module is enabled

        :return: The related_activities of this WSImpact.
        :rtype: list[WSActivityRef]
        """
        return self._related_activities

    @related_activities.setter
    def related_activities(self, related_activities):
        """
        Sets the related_activities of this WSImpact.
        Only available when the Activity module is enabled

        :param related_activities: The related_activities of this WSImpact.
        :type: list[WSActivityRef]
        """

        self._related_activities = related_activities

    @property
    def related_projects(self):
        """
        Gets the related_projects of this WSImpact.
        Only available when the Unified Project Model module is enabled

        :return: The related_projects of this WSImpact.
        :rtype: list[WSUPMProjectRef]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """
        Sets the related_projects of this WSImpact.
        Only available when the Unified Project Model module is enabled

        :param related_projects: The related_projects of this WSImpact.
        :type: list[WSUPMProjectRef]
        """

        self._related_projects = related_projects

    @property
    def related_prizes(self):
        """
        Gets the related_prizes of this WSImpact.
        Only available when the Prize module is enabled

        :return: The related_prizes of this WSImpact.
        :rtype: list[WSPrizeRef]
        """
        return self._related_prizes

    @related_prizes.setter
    def related_prizes(self, related_prizes):
        """
        Sets the related_prizes of this WSImpact.
        Only available when the Prize module is enabled

        :param related_prizes: The related_prizes of this WSImpact.
        :type: list[WSPrizeRef]
        """

        self._related_prizes = related_prizes

    @property
    def related_student_theses(self):
        """
        Gets the related_student_theses of this WSImpact.
        Only available when the Student Thesis module is enabled

        :return: The related_student_theses of this WSImpact.
        :rtype: list[WSStudentThesisRef]
        """
        return self._related_student_theses

    @related_student_theses.setter
    def related_student_theses(self, related_student_theses):
        """
        Sets the related_student_theses of this WSImpact.
        Only available when the Student Thesis module is enabled

        :param related_student_theses: The related_student_theses of this WSImpact.
        :type: list[WSStudentThesisRef]
        """

        self._related_student_theses = related_student_theses

    @property
    def related_data_sets(self):
        """
        Gets the related_data_sets of this WSImpact.
        Only available when the Dataset module is enabled

        :return: The related_data_sets of this WSImpact.
        :rtype: list[WSDataSetRef]
        """
        return self._related_data_sets

    @related_data_sets.setter
    def related_data_sets(self, related_data_sets):
        """
        Sets the related_data_sets of this WSImpact.
        Only available when the Dataset module is enabled

        :param related_data_sets: The related_data_sets of this WSImpact.
        :type: list[WSDataSetRef]
        """

        self._related_data_sets = related_data_sets

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSImpact.

        :return: The visibilities of this WSImpact.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSImpact.

        :param visibilities: The visibilities of this WSImpact.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def confidential(self):
        """
        Gets the confidential of this WSImpact.

        :return: The confidential of this WSImpact.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSImpact.

        :param confidential: The confidential of this WSImpact.
        :type: bool
        """

        self._confidential = confidential

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSImpact.

        :return: The keyword_groups of this WSImpact.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSImpact.

        :param keyword_groups: The keyword_groups of this WSImpact.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def workflows(self):
        """
        Gets the workflows of this WSImpact.

        :return: The workflows of this WSImpact.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSImpact.

        :param workflows: The workflows of this WSImpact.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def info(self):
        """
        Gets the info of this WSImpact.

        :return: The info of this WSImpact.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSImpact.

        :param info: The info of this WSImpact.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSImpact.

        :return: The externalable_info of this WSImpact.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSImpact.

        :param externalable_info: The externalable_info of this WSImpact.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSImpact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
