# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSAbstractActivity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'title': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'categories': 'list[WSClassification]',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'period': 'WSCompoundDateRange',
        'degree_of_recognitions': 'list[WSClassification]',
        'classified_sources': 'list[WSClassifiedValue]',
        'person_associations': 'list[WSClassifiedPersonAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'indicators': 'list[WSClassification]',
        'documents': 'list[WSDocument]',
        'links': 'list[WSLink]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'related_activities': 'list[WSActivityRef]',
        'related_research_outputs': 'list[WSResearchOutputRef]',
        'related_prizes': 'list[WSPrizeRef]',
        'related_press_media': 'list[WSPressMediaRef]',
        'related_projects': 'list[WSUPMProjectRef]',
        'related_data_sets': 'list[WSDataSetRef]',
        'related_impacts': 'list[WSImpactRef]',
        'related_student_thesis': 'list[WSStudentThesisRef]',
        'visibilities': 'list[WSVisibility]',
        'workflows': 'list[WSWorkflow]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'title': 'title',
        'types': 'types',
        'categories': 'categories',
        'descriptions': 'descriptions',
        'period': 'period',
        'degree_of_recognitions': 'degreeOfRecognitions',
        'classified_sources': 'classifiedSources',
        'person_associations': 'personAssociations',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'indicators': 'indicators',
        'documents': 'documents',
        'links': 'links',
        'keyword_groups': 'keywordGroups',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'related_activities': 'relatedActivities',
        'related_research_outputs': 'relatedResearchOutputs',
        'related_prizes': 'relatedPrizes',
        'related_press_media': 'relatedPressMedia',
        'related_projects': 'relatedProjects',
        'related_data_sets': 'relatedDataSets',
        'related_impacts': 'relatedImpacts',
        'related_student_thesis': 'relatedStudentThesis',
        'visibilities': 'visibilities',
        'workflows': 'workflows',
        'externalable_info': 'externalableInfo',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, title=None, types=None, categories=None, descriptions=None, period=None, degree_of_recognitions=None, classified_sources=None, person_associations=None, organisations=None, external_organisations=None, managing_organisational_unit=None, indicators=None, documents=None, links=None, keyword_groups=None, field_of_research_associations=None, related_activities=None, related_research_outputs=None, related_prizes=None, related_press_media=None, related_projects=None, related_data_sets=None, related_impacts=None, related_student_thesis=None, visibilities=None, workflows=None, externalable_info=None, info=None):
        """
        WSAbstractActivity - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._title = None
        self._types = None
        self._categories = None
        self._descriptions = None
        self._period = None
        self._degree_of_recognitions = None
        self._classified_sources = None
        self._person_associations = None
        self._organisations = None
        self._external_organisations = None
        self._managing_organisational_unit = None
        self._indicators = None
        self._documents = None
        self._links = None
        self._keyword_groups = None
        self._field_of_research_associations = None
        self._related_activities = None
        self._related_research_outputs = None
        self._related_prizes = None
        self._related_press_media = None
        self._related_projects = None
        self._related_data_sets = None
        self._related_impacts = None
        self._related_student_thesis = None
        self._visibilities = None
        self._workflows = None
        self._externalable_info = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if title is not None:
          self.title = title
        if types is not None:
          self.types = types
        if categories is not None:
          self.categories = categories
        if descriptions is not None:
          self.descriptions = descriptions
        if period is not None:
          self.period = period
        if degree_of_recognitions is not None:
          self.degree_of_recognitions = degree_of_recognitions
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if person_associations is not None:
          self.person_associations = person_associations
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if indicators is not None:
          self.indicators = indicators
        if documents is not None:
          self.documents = documents
        if links is not None:
          self.links = links
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if related_activities is not None:
          self.related_activities = related_activities
        if related_research_outputs is not None:
          self.related_research_outputs = related_research_outputs
        if related_prizes is not None:
          self.related_prizes = related_prizes
        if related_press_media is not None:
          self.related_press_media = related_press_media
        if related_projects is not None:
          self.related_projects = related_projects
        if related_data_sets is not None:
          self.related_data_sets = related_data_sets
        if related_impacts is not None:
          self.related_impacts = related_impacts
        if related_student_thesis is not None:
          self.related_student_thesis = related_student_thesis
        if visibilities is not None:
          self.visibilities = visibilities
        if workflows is not None:
          self.workflows = workflows
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSAbstractActivity.

        :return: The uuid of this WSAbstractActivity.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSAbstractActivity.

        :param uuid: The uuid of this WSAbstractActivity.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSAbstractActivity.

        :return: The html_renderings of this WSAbstractActivity.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSAbstractActivity.

        :param html_renderings: The html_renderings of this WSAbstractActivity.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def title(self):
        """
        Gets the title of this WSAbstractActivity.

        :return: The title of this WSAbstractActivity.
        :rtype: list[WSLocalizedString]
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this WSAbstractActivity.

        :param title: The title of this WSAbstractActivity.
        :type: list[WSLocalizedString]
        """

        self._title = title

    @property
    def types(self):
        """
        Gets the types of this WSAbstractActivity.

        :return: The types of this WSAbstractActivity.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSAbstractActivity.

        :param types: The types of this WSAbstractActivity.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def categories(self):
        """
        Gets the categories of this WSAbstractActivity.

        :return: The categories of this WSAbstractActivity.
        :rtype: list[WSClassification]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this WSAbstractActivity.

        :param categories: The categories of this WSAbstractActivity.
        :type: list[WSClassification]
        """

        self._categories = categories

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSAbstractActivity.

        :return: The descriptions of this WSAbstractActivity.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSAbstractActivity.

        :param descriptions: The descriptions of this WSAbstractActivity.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def period(self):
        """
        Gets the period of this WSAbstractActivity.

        :return: The period of this WSAbstractActivity.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSAbstractActivity.

        :param period: The period of this WSAbstractActivity.
        :type: WSCompoundDateRange
        """

        self._period = period

    @property
    def degree_of_recognitions(self):
        """
        Gets the degree_of_recognitions of this WSAbstractActivity.

        :return: The degree_of_recognitions of this WSAbstractActivity.
        :rtype: list[WSClassification]
        """
        return self._degree_of_recognitions

    @degree_of_recognitions.setter
    def degree_of_recognitions(self, degree_of_recognitions):
        """
        Sets the degree_of_recognitions of this WSAbstractActivity.

        :param degree_of_recognitions: The degree_of_recognitions of this WSAbstractActivity.
        :type: list[WSClassification]
        """

        self._degree_of_recognitions = degree_of_recognitions

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSAbstractActivity.

        :return: The classified_sources of this WSAbstractActivity.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSAbstractActivity.

        :param classified_sources: The classified_sources of this WSAbstractActivity.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def person_associations(self):
        """
        Gets the person_associations of this WSAbstractActivity.

        :return: The person_associations of this WSAbstractActivity.
        :rtype: list[WSClassifiedPersonAssociation]
        """
        return self._person_associations

    @person_associations.setter
    def person_associations(self, person_associations):
        """
        Sets the person_associations of this WSAbstractActivity.

        :param person_associations: The person_associations of this WSAbstractActivity.
        :type: list[WSClassifiedPersonAssociation]
        """

        self._person_associations = person_associations

    @property
    def organisations(self):
        """
        Gets the organisations of this WSAbstractActivity.

        :return: The organisations of this WSAbstractActivity.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSAbstractActivity.

        :param organisations: The organisations of this WSAbstractActivity.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSAbstractActivity.

        :return: The external_organisations of this WSAbstractActivity.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSAbstractActivity.

        :param external_organisations: The external_organisations of this WSAbstractActivity.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSAbstractActivity.

        :return: The managing_organisational_unit of this WSAbstractActivity.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSAbstractActivity.

        :param managing_organisational_unit: The managing_organisational_unit of this WSAbstractActivity.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def indicators(self):
        """
        Gets the indicators of this WSAbstractActivity.

        :return: The indicators of this WSAbstractActivity.
        :rtype: list[WSClassification]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """
        Sets the indicators of this WSAbstractActivity.

        :param indicators: The indicators of this WSAbstractActivity.
        :type: list[WSClassification]
        """

        self._indicators = indicators

    @property
    def documents(self):
        """
        Gets the documents of this WSAbstractActivity.

        :return: The documents of this WSAbstractActivity.
        :rtype: list[WSDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSAbstractActivity.

        :param documents: The documents of this WSAbstractActivity.
        :type: list[WSDocument]
        """

        self._documents = documents

    @property
    def links(self):
        """
        Gets the links of this WSAbstractActivity.

        :return: The links of this WSAbstractActivity.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSAbstractActivity.

        :param links: The links of this WSAbstractActivity.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSAbstractActivity.

        :return: The keyword_groups of this WSAbstractActivity.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSAbstractActivity.

        :param keyword_groups: The keyword_groups of this WSAbstractActivity.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSAbstractActivity.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSAbstractActivity.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSAbstractActivity.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSAbstractActivity.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def related_activities(self):
        """
        Gets the related_activities of this WSAbstractActivity.
        Only available when the Activity module is enabled

        :return: The related_activities of this WSAbstractActivity.
        :rtype: list[WSActivityRef]
        """
        return self._related_activities

    @related_activities.setter
    def related_activities(self, related_activities):
        """
        Sets the related_activities of this WSAbstractActivity.
        Only available when the Activity module is enabled

        :param related_activities: The related_activities of this WSAbstractActivity.
        :type: list[WSActivityRef]
        """

        self._related_activities = related_activities

    @property
    def related_research_outputs(self):
        """
        Gets the related_research_outputs of this WSAbstractActivity.

        :return: The related_research_outputs of this WSAbstractActivity.
        :rtype: list[WSResearchOutputRef]
        """
        return self._related_research_outputs

    @related_research_outputs.setter
    def related_research_outputs(self, related_research_outputs):
        """
        Sets the related_research_outputs of this WSAbstractActivity.

        :param related_research_outputs: The related_research_outputs of this WSAbstractActivity.
        :type: list[WSResearchOutputRef]
        """

        self._related_research_outputs = related_research_outputs

    @property
    def related_prizes(self):
        """
        Gets the related_prizes of this WSAbstractActivity.
        Only available when the Prize module is enabled

        :return: The related_prizes of this WSAbstractActivity.
        :rtype: list[WSPrizeRef]
        """
        return self._related_prizes

    @related_prizes.setter
    def related_prizes(self, related_prizes):
        """
        Sets the related_prizes of this WSAbstractActivity.
        Only available when the Prize module is enabled

        :param related_prizes: The related_prizes of this WSAbstractActivity.
        :type: list[WSPrizeRef]
        """

        self._related_prizes = related_prizes

    @property
    def related_press_media(self):
        """
        Gets the related_press_media of this WSAbstractActivity.
        Only available when the Press / Media module is enabled

        :return: The related_press_media of this WSAbstractActivity.
        :rtype: list[WSPressMediaRef]
        """
        return self._related_press_media

    @related_press_media.setter
    def related_press_media(self, related_press_media):
        """
        Sets the related_press_media of this WSAbstractActivity.
        Only available when the Press / Media module is enabled

        :param related_press_media: The related_press_media of this WSAbstractActivity.
        :type: list[WSPressMediaRef]
        """

        self._related_press_media = related_press_media

    @property
    def related_projects(self):
        """
        Gets the related_projects of this WSAbstractActivity.
        Only available when the Unified Project Model module is enabled

        :return: The related_projects of this WSAbstractActivity.
        :rtype: list[WSUPMProjectRef]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """
        Sets the related_projects of this WSAbstractActivity.
        Only available when the Unified Project Model module is enabled

        :param related_projects: The related_projects of this WSAbstractActivity.
        :type: list[WSUPMProjectRef]
        """

        self._related_projects = related_projects

    @property
    def related_data_sets(self):
        """
        Gets the related_data_sets of this WSAbstractActivity.
        Only available when the Dataset module is enabled

        :return: The related_data_sets of this WSAbstractActivity.
        :rtype: list[WSDataSetRef]
        """
        return self._related_data_sets

    @related_data_sets.setter
    def related_data_sets(self, related_data_sets):
        """
        Sets the related_data_sets of this WSAbstractActivity.
        Only available when the Dataset module is enabled

        :param related_data_sets: The related_data_sets of this WSAbstractActivity.
        :type: list[WSDataSetRef]
        """

        self._related_data_sets = related_data_sets

    @property
    def related_impacts(self):
        """
        Gets the related_impacts of this WSAbstractActivity.
        Only available when the Impact module is enabled

        :return: The related_impacts of this WSAbstractActivity.
        :rtype: list[WSImpactRef]
        """
        return self._related_impacts

    @related_impacts.setter
    def related_impacts(self, related_impacts):
        """
        Sets the related_impacts of this WSAbstractActivity.
        Only available when the Impact module is enabled

        :param related_impacts: The related_impacts of this WSAbstractActivity.
        :type: list[WSImpactRef]
        """

        self._related_impacts = related_impacts

    @property
    def related_student_thesis(self):
        """
        Gets the related_student_thesis of this WSAbstractActivity.
        Only available when the Student Thesis module is enabled

        :return: The related_student_thesis of this WSAbstractActivity.
        :rtype: list[WSStudentThesisRef]
        """
        return self._related_student_thesis

    @related_student_thesis.setter
    def related_student_thesis(self, related_student_thesis):
        """
        Sets the related_student_thesis of this WSAbstractActivity.
        Only available when the Student Thesis module is enabled

        :param related_student_thesis: The related_student_thesis of this WSAbstractActivity.
        :type: list[WSStudentThesisRef]
        """

        self._related_student_thesis = related_student_thesis

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSAbstractActivity.

        :return: The visibilities of this WSAbstractActivity.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSAbstractActivity.

        :param visibilities: The visibilities of this WSAbstractActivity.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def workflows(self):
        """
        Gets the workflows of this WSAbstractActivity.

        :return: The workflows of this WSAbstractActivity.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSAbstractActivity.

        :param workflows: The workflows of this WSAbstractActivity.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSAbstractActivity.

        :return: The externalable_info of this WSAbstractActivity.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSAbstractActivity.

        :param externalable_info: The externalable_info of this WSAbstractActivity.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSAbstractActivity.

        :return: The info of this WSAbstractActivity.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSAbstractActivity.

        :param info: The info of this WSAbstractActivity.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSAbstractActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
