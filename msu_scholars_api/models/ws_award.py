# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSAward(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'nature_types': 'list[WSClassification]',
        'statuses': 'list[WSAwardStatus]',
        'status_details': 'WSAwardStatusDetails',
        'short_titles': 'list[WSLocalizedString]',
        'acronym': 'str',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'classified_sources': 'list[WSClassifiedValue]',
        'awardholders': 'list[WSClassifiedAwardholderAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'collaborative': 'bool',
        'collaborators': 'list[WSCollaboratorAssociation]',
        'total_academic_ownership_percentage': 'float',
        'fundings': 'list[WSAwardFundingAssociation]',
        'total_awarded_amount': 'float',
        'total_spend_amount': 'float',
        'actual_period': 'WSDateRange',
        'expected_period': 'WSDateRange',
        'award_date': 'datetime',
        'curtailed': 'bool',
        'curtail_date': 'datetime',
        'curtail_reason': 'str',
        'documents': 'list[WSDocument]',
        'links': 'list[WSLink]',
        'related_project': 'WSUPMProjectRef',
        'related_applications': 'list[WSApplicationRef]',
        'related_awards': 'list[WSAwardRef]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'visibilities': 'list[WSVisibility]',
        'confidential': 'bool',
        'workflows': 'list[WSWorkflow]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'nature_types': 'natureTypes',
        'statuses': 'statuses',
        'status_details': 'statusDetails',
        'short_titles': 'shortTitles',
        'acronym': 'acronym',
        'descriptions': 'descriptions',
        'classified_sources': 'classifiedSources',
        'awardholders': 'awardholders',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'collaborative': 'collaborative',
        'collaborators': 'collaborators',
        'total_academic_ownership_percentage': 'totalAcademicOwnershipPercentage',
        'fundings': 'fundings',
        'total_awarded_amount': 'totalAwardedAmount',
        'total_spend_amount': 'totalSpendAmount',
        'actual_period': 'actualPeriod',
        'expected_period': 'expectedPeriod',
        'award_date': 'awardDate',
        'curtailed': 'curtailed',
        'curtail_date': 'curtailDate',
        'curtail_reason': 'curtailReason',
        'documents': 'documents',
        'links': 'links',
        'related_project': 'relatedProject',
        'related_applications': 'relatedApplications',
        'related_awards': 'relatedAwards',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'keyword_groups': 'keywordGroups',
        'visibilities': 'visibilities',
        'confidential': 'confidential',
        'workflows': 'workflows',
        'externalable_info': 'externalableInfo',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, nature_types=None, statuses=None, status_details=None, short_titles=None, acronym=None, descriptions=None, classified_sources=None, awardholders=None, organisations=None, external_organisations=None, managing_organisational_unit=None, collaborative=False, collaborators=None, total_academic_ownership_percentage=None, fundings=None, total_awarded_amount=None, total_spend_amount=None, actual_period=None, expected_period=None, award_date=None, curtailed=False, curtail_date=None, curtail_reason=None, documents=None, links=None, related_project=None, related_applications=None, related_awards=None, field_of_research_associations=None, keyword_groups=None, visibilities=None, confidential=False, workflows=None, externalable_info=None, info=None):
        """
        WSAward - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._nature_types = None
        self._statuses = None
        self._status_details = None
        self._short_titles = None
        self._acronym = None
        self._descriptions = None
        self._classified_sources = None
        self._awardholders = None
        self._organisations = None
        self._external_organisations = None
        self._managing_organisational_unit = None
        self._collaborative = None
        self._collaborators = None
        self._total_academic_ownership_percentage = None
        self._fundings = None
        self._total_awarded_amount = None
        self._total_spend_amount = None
        self._actual_period = None
        self._expected_period = None
        self._award_date = None
        self._curtailed = None
        self._curtail_date = None
        self._curtail_reason = None
        self._documents = None
        self._links = None
        self._related_project = None
        self._related_applications = None
        self._related_awards = None
        self._field_of_research_associations = None
        self._keyword_groups = None
        self._visibilities = None
        self._confidential = None
        self._workflows = None
        self._externalable_info = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if nature_types is not None:
          self.nature_types = nature_types
        if statuses is not None:
          self.statuses = statuses
        if status_details is not None:
          self.status_details = status_details
        if short_titles is not None:
          self.short_titles = short_titles
        if acronym is not None:
          self.acronym = acronym
        if descriptions is not None:
          self.descriptions = descriptions
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if awardholders is not None:
          self.awardholders = awardholders
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if collaborative is not None:
          self.collaborative = collaborative
        if collaborators is not None:
          self.collaborators = collaborators
        if total_academic_ownership_percentage is not None:
          self.total_academic_ownership_percentage = total_academic_ownership_percentage
        if fundings is not None:
          self.fundings = fundings
        if total_awarded_amount is not None:
          self.total_awarded_amount = total_awarded_amount
        if total_spend_amount is not None:
          self.total_spend_amount = total_spend_amount
        if actual_period is not None:
          self.actual_period = actual_period
        if expected_period is not None:
          self.expected_period = expected_period
        if award_date is not None:
          self.award_date = award_date
        if curtailed is not None:
          self.curtailed = curtailed
        if curtail_date is not None:
          self.curtail_date = curtail_date
        if curtail_reason is not None:
          self.curtail_reason = curtail_reason
        if documents is not None:
          self.documents = documents
        if links is not None:
          self.links = links
        if related_project is not None:
          self.related_project = related_project
        if related_applications is not None:
          self.related_applications = related_applications
        if related_awards is not None:
          self.related_awards = related_awards
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if visibilities is not None:
          self.visibilities = visibilities
        if confidential is not None:
          self.confidential = confidential
        if workflows is not None:
          self.workflows = workflows
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSAward.

        :return: The uuid of this WSAward.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSAward.

        :param uuid: The uuid of this WSAward.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSAward.

        :return: The html_renderings of this WSAward.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSAward.

        :param html_renderings: The html_renderings of this WSAward.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSAward.

        :return: The titles of this WSAward.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSAward.

        :param titles: The titles of this WSAward.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSAward.

        :return: The types of this WSAward.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSAward.

        :param types: The types of this WSAward.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def nature_types(self):
        """
        Gets the nature_types of this WSAward.

        :return: The nature_types of this WSAward.
        :rtype: list[WSClassification]
        """
        return self._nature_types

    @nature_types.setter
    def nature_types(self, nature_types):
        """
        Sets the nature_types of this WSAward.

        :param nature_types: The nature_types of this WSAward.
        :type: list[WSClassification]
        """

        self._nature_types = nature_types

    @property
    def statuses(self):
        """
        Gets the statuses of this WSAward.

        :return: The statuses of this WSAward.
        :rtype: list[WSAwardStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this WSAward.

        :param statuses: The statuses of this WSAward.
        :type: list[WSAwardStatus]
        """

        self._statuses = statuses

    @property
    def status_details(self):
        """
        Gets the status_details of this WSAward.
        Only available when the Award Management module is enabled

        :return: The status_details of this WSAward.
        :rtype: WSAwardStatusDetails
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """
        Sets the status_details of this WSAward.
        Only available when the Award Management module is enabled

        :param status_details: The status_details of this WSAward.
        :type: WSAwardStatusDetails
        """

        self._status_details = status_details

    @property
    def short_titles(self):
        """
        Gets the short_titles of this WSAward.

        :return: The short_titles of this WSAward.
        :rtype: list[WSLocalizedString]
        """
        return self._short_titles

    @short_titles.setter
    def short_titles(self, short_titles):
        """
        Sets the short_titles of this WSAward.

        :param short_titles: The short_titles of this WSAward.
        :type: list[WSLocalizedString]
        """

        self._short_titles = short_titles

    @property
    def acronym(self):
        """
        Gets the acronym of this WSAward.

        :return: The acronym of this WSAward.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """
        Sets the acronym of this WSAward.

        :param acronym: The acronym of this WSAward.
        :type: str
        """

        self._acronym = acronym

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSAward.

        :return: The descriptions of this WSAward.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSAward.

        :param descriptions: The descriptions of this WSAward.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSAward.

        :return: The classified_sources of this WSAward.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSAward.

        :param classified_sources: The classified_sources of this WSAward.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def awardholders(self):
        """
        Gets the awardholders of this WSAward.

        :return: The awardholders of this WSAward.
        :rtype: list[WSClassifiedAwardholderAssociation]
        """
        return self._awardholders

    @awardholders.setter
    def awardholders(self, awardholders):
        """
        Sets the awardholders of this WSAward.

        :param awardholders: The awardholders of this WSAward.
        :type: list[WSClassifiedAwardholderAssociation]
        """

        self._awardholders = awardholders

    @property
    def organisations(self):
        """
        Gets the organisations of this WSAward.

        :return: The organisations of this WSAward.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSAward.

        :param organisations: The organisations of this WSAward.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSAward.

        :return: The external_organisations of this WSAward.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSAward.

        :param external_organisations: The external_organisations of this WSAward.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSAward.

        :return: The managing_organisational_unit of this WSAward.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSAward.

        :param managing_organisational_unit: The managing_organisational_unit of this WSAward.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def collaborative(self):
        """
        Gets the collaborative of this WSAward.

        :return: The collaborative of this WSAward.
        :rtype: bool
        """
        return self._collaborative

    @collaborative.setter
    def collaborative(self, collaborative):
        """
        Sets the collaborative of this WSAward.

        :param collaborative: The collaborative of this WSAward.
        :type: bool
        """

        self._collaborative = collaborative

    @property
    def collaborators(self):
        """
        Gets the collaborators of this WSAward.

        :return: The collaborators of this WSAward.
        :rtype: list[WSCollaboratorAssociation]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """
        Sets the collaborators of this WSAward.

        :param collaborators: The collaborators of this WSAward.
        :type: list[WSCollaboratorAssociation]
        """

        self._collaborators = collaborators

    @property
    def total_academic_ownership_percentage(self):
        """
        Gets the total_academic_ownership_percentage of this WSAward.

        :return: The total_academic_ownership_percentage of this WSAward.
        :rtype: float
        """
        return self._total_academic_ownership_percentage

    @total_academic_ownership_percentage.setter
    def total_academic_ownership_percentage(self, total_academic_ownership_percentage):
        """
        Sets the total_academic_ownership_percentage of this WSAward.

        :param total_academic_ownership_percentage: The total_academic_ownership_percentage of this WSAward.
        :type: float
        """

        self._total_academic_ownership_percentage = total_academic_ownership_percentage

    @property
    def fundings(self):
        """
        Gets the fundings of this WSAward.

        :return: The fundings of this WSAward.
        :rtype: list[WSAwardFundingAssociation]
        """
        return self._fundings

    @fundings.setter
    def fundings(self, fundings):
        """
        Sets the fundings of this WSAward.

        :param fundings: The fundings of this WSAward.
        :type: list[WSAwardFundingAssociation]
        """

        self._fundings = fundings

    @property
    def total_awarded_amount(self):
        """
        Gets the total_awarded_amount of this WSAward.

        :return: The total_awarded_amount of this WSAward.
        :rtype: float
        """
        return self._total_awarded_amount

    @total_awarded_amount.setter
    def total_awarded_amount(self, total_awarded_amount):
        """
        Sets the total_awarded_amount of this WSAward.

        :param total_awarded_amount: The total_awarded_amount of this WSAward.
        :type: float
        """

        self._total_awarded_amount = total_awarded_amount

    @property
    def total_spend_amount(self):
        """
        Gets the total_spend_amount of this WSAward.

        :return: The total_spend_amount of this WSAward.
        :rtype: float
        """
        return self._total_spend_amount

    @total_spend_amount.setter
    def total_spend_amount(self, total_spend_amount):
        """
        Sets the total_spend_amount of this WSAward.

        :param total_spend_amount: The total_spend_amount of this WSAward.
        :type: float
        """

        self._total_spend_amount = total_spend_amount

    @property
    def actual_period(self):
        """
        Gets the actual_period of this WSAward.

        :return: The actual_period of this WSAward.
        :rtype: WSDateRange
        """
        return self._actual_period

    @actual_period.setter
    def actual_period(self, actual_period):
        """
        Sets the actual_period of this WSAward.

        :param actual_period: The actual_period of this WSAward.
        :type: WSDateRange
        """

        self._actual_period = actual_period

    @property
    def expected_period(self):
        """
        Gets the expected_period of this WSAward.

        :return: The expected_period of this WSAward.
        :rtype: WSDateRange
        """
        return self._expected_period

    @expected_period.setter
    def expected_period(self, expected_period):
        """
        Sets the expected_period of this WSAward.

        :param expected_period: The expected_period of this WSAward.
        :type: WSDateRange
        """

        self._expected_period = expected_period

    @property
    def award_date(self):
        """
        Gets the award_date of this WSAward.

        :return: The award_date of this WSAward.
        :rtype: datetime
        """
        return self._award_date

    @award_date.setter
    def award_date(self, award_date):
        """
        Sets the award_date of this WSAward.

        :param award_date: The award_date of this WSAward.
        :type: datetime
        """

        self._award_date = award_date

    @property
    def curtailed(self):
        """
        Gets the curtailed of this WSAward.

        :return: The curtailed of this WSAward.
        :rtype: bool
        """
        return self._curtailed

    @curtailed.setter
    def curtailed(self, curtailed):
        """
        Sets the curtailed of this WSAward.

        :param curtailed: The curtailed of this WSAward.
        :type: bool
        """

        self._curtailed = curtailed

    @property
    def curtail_date(self):
        """
        Gets the curtail_date of this WSAward.

        :return: The curtail_date of this WSAward.
        :rtype: datetime
        """
        return self._curtail_date

    @curtail_date.setter
    def curtail_date(self, curtail_date):
        """
        Sets the curtail_date of this WSAward.

        :param curtail_date: The curtail_date of this WSAward.
        :type: datetime
        """

        self._curtail_date = curtail_date

    @property
    def curtail_reason(self):
        """
        Gets the curtail_reason of this WSAward.

        :return: The curtail_reason of this WSAward.
        :rtype: str
        """
        return self._curtail_reason

    @curtail_reason.setter
    def curtail_reason(self, curtail_reason):
        """
        Sets the curtail_reason of this WSAward.

        :param curtail_reason: The curtail_reason of this WSAward.
        :type: str
        """

        self._curtail_reason = curtail_reason

    @property
    def documents(self):
        """
        Gets the documents of this WSAward.

        :return: The documents of this WSAward.
        :rtype: list[WSDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSAward.

        :param documents: The documents of this WSAward.
        :type: list[WSDocument]
        """

        self._documents = documents

    @property
    def links(self):
        """
        Gets the links of this WSAward.

        :return: The links of this WSAward.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSAward.

        :param links: The links of this WSAward.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def related_project(self):
        """
        Gets the related_project of this WSAward.

        :return: The related_project of this WSAward.
        :rtype: WSUPMProjectRef
        """
        return self._related_project

    @related_project.setter
    def related_project(self, related_project):
        """
        Sets the related_project of this WSAward.

        :param related_project: The related_project of this WSAward.
        :type: WSUPMProjectRef
        """

        self._related_project = related_project

    @property
    def related_applications(self):
        """
        Gets the related_applications of this WSAward.

        :return: The related_applications of this WSAward.
        :rtype: list[WSApplicationRef]
        """
        return self._related_applications

    @related_applications.setter
    def related_applications(self, related_applications):
        """
        Sets the related_applications of this WSAward.

        :param related_applications: The related_applications of this WSAward.
        :type: list[WSApplicationRef]
        """

        self._related_applications = related_applications

    @property
    def related_awards(self):
        """
        Gets the related_awards of this WSAward.

        :return: The related_awards of this WSAward.
        :rtype: list[WSAwardRef]
        """
        return self._related_awards

    @related_awards.setter
    def related_awards(self, related_awards):
        """
        Sets the related_awards of this WSAward.

        :param related_awards: The related_awards of this WSAward.
        :type: list[WSAwardRef]
        """

        self._related_awards = related_awards

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSAward.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSAward.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSAward.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSAward.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSAward.

        :return: The keyword_groups of this WSAward.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSAward.

        :param keyword_groups: The keyword_groups of this WSAward.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSAward.

        :return: The visibilities of this WSAward.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSAward.

        :param visibilities: The visibilities of this WSAward.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def confidential(self):
        """
        Gets the confidential of this WSAward.

        :return: The confidential of this WSAward.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSAward.

        :param confidential: The confidential of this WSAward.
        :type: bool
        """

        self._confidential = confidential

    @property
    def workflows(self):
        """
        Gets the workflows of this WSAward.

        :return: The workflows of this WSAward.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSAward.

        :param workflows: The workflows of this WSAward.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSAward.

        :return: The externalable_info of this WSAward.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSAward.

        :param externalable_info: The externalable_info of this WSAward.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSAward.

        :return: The info of this WSAward.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSAward.

        :param info: The info of this WSAward.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSAward):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
