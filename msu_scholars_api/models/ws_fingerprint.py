# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSFingerprint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'content_id': 'int',
        'content_uuid': 'str',
        'content_family': 'str',
        'content_version': 'int',
        'concepts': 'list[WSRankedConcept]',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'content_id': 'contentId',
        'content_uuid': 'contentUuid',
        'content_family': 'contentFamily',
        'content_version': 'contentVersion',
        'concepts': 'concepts',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, content_id=None, content_uuid=None, content_family=None, content_version=None, concepts=None, info=None):
        """
        WSFingerprint - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._content_id = None
        self._content_uuid = None
        self._content_family = None
        self._content_version = None
        self._concepts = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if content_id is not None:
          self.content_id = content_id
        if content_uuid is not None:
          self.content_uuid = content_uuid
        if content_family is not None:
          self.content_family = content_family
        if content_version is not None:
          self.content_version = content_version
        if concepts is not None:
          self.concepts = concepts
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSFingerprint.

        :return: The uuid of this WSFingerprint.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSFingerprint.

        :param uuid: The uuid of this WSFingerprint.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSFingerprint.

        :return: The html_renderings of this WSFingerprint.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSFingerprint.

        :param html_renderings: The html_renderings of this WSFingerprint.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def content_id(self):
        """
        Gets the content_id of this WSFingerprint.

        :return: The content_id of this WSFingerprint.
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """
        Sets the content_id of this WSFingerprint.

        :param content_id: The content_id of this WSFingerprint.
        :type: int
        """

        self._content_id = content_id

    @property
    def content_uuid(self):
        """
        Gets the content_uuid of this WSFingerprint.

        :return: The content_uuid of this WSFingerprint.
        :rtype: str
        """
        return self._content_uuid

    @content_uuid.setter
    def content_uuid(self, content_uuid):
        """
        Sets the content_uuid of this WSFingerprint.

        :param content_uuid: The content_uuid of this WSFingerprint.
        :type: str
        """

        self._content_uuid = content_uuid

    @property
    def content_family(self):
        """
        Gets the content_family of this WSFingerprint.

        :return: The content_family of this WSFingerprint.
        :rtype: str
        """
        return self._content_family

    @content_family.setter
    def content_family(self, content_family):
        """
        Sets the content_family of this WSFingerprint.

        :param content_family: The content_family of this WSFingerprint.
        :type: str
        """

        self._content_family = content_family

    @property
    def content_version(self):
        """
        Gets the content_version of this WSFingerprint.

        :return: The content_version of this WSFingerprint.
        :rtype: int
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version):
        """
        Sets the content_version of this WSFingerprint.

        :param content_version: The content_version of this WSFingerprint.
        :type: int
        """

        self._content_version = content_version

    @property
    def concepts(self):
        """
        Gets the concepts of this WSFingerprint.

        :return: The concepts of this WSFingerprint.
        :rtype: list[WSRankedConcept]
        """
        return self._concepts

    @concepts.setter
    def concepts(self, concepts):
        """
        Sets the concepts of this WSFingerprint.

        :param concepts: The concepts of this WSFingerprint.
        :type: list[WSRankedConcept]
        """

        self._concepts = concepts

    @property
    def info(self):
        """
        Gets the info of this WSFingerprint.

        :return: The info of this WSFingerprint.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSFingerprint.

        :param info: The info of this WSFingerprint.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSFingerprint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
