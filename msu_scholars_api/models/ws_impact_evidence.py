# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSImpactEvidence(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'evidence_titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'evidence_indicators': 'list[WSClassification]',
        'evidence_summaries': 'list[WSLocalizedString]',
        'evidence_contact_informations': 'list[WSEvidenceContactInformation]',
        'period': 'WSCompoundDateRange',
        'links': 'list[WSLink]',
        'documents': 'list[WSDocument]'
    }

    attribute_map = {
        'id': 'id',
        'evidence_titles': 'evidenceTitles',
        'types': 'types',
        'evidence_indicators': 'evidenceIndicators',
        'evidence_summaries': 'evidenceSummaries',
        'evidence_contact_informations': 'evidenceContactInformations',
        'period': 'period',
        'links': 'links',
        'documents': 'documents'
    }

    def __init__(self, id=None, evidence_titles=None, types=None, evidence_indicators=None, evidence_summaries=None, evidence_contact_informations=None, period=None, links=None, documents=None):
        """
        WSImpactEvidence - a model defined in Swagger
        """

        self._id = None
        self._evidence_titles = None
        self._types = None
        self._evidence_indicators = None
        self._evidence_summaries = None
        self._evidence_contact_informations = None
        self._period = None
        self._links = None
        self._documents = None

        if id is not None:
          self.id = id
        if evidence_titles is not None:
          self.evidence_titles = evidence_titles
        if types is not None:
          self.types = types
        if evidence_indicators is not None:
          self.evidence_indicators = evidence_indicators
        if evidence_summaries is not None:
          self.evidence_summaries = evidence_summaries
        if evidence_contact_informations is not None:
          self.evidence_contact_informations = evidence_contact_informations
        if period is not None:
          self.period = period
        if links is not None:
          self.links = links
        if documents is not None:
          self.documents = documents

    @property
    def id(self):
        """
        Gets the id of this WSImpactEvidence.

        :return: The id of this WSImpactEvidence.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSImpactEvidence.

        :param id: The id of this WSImpactEvidence.
        :type: int
        """

        self._id = id

    @property
    def evidence_titles(self):
        """
        Gets the evidence_titles of this WSImpactEvidence.

        :return: The evidence_titles of this WSImpactEvidence.
        :rtype: list[WSLocalizedString]
        """
        return self._evidence_titles

    @evidence_titles.setter
    def evidence_titles(self, evidence_titles):
        """
        Sets the evidence_titles of this WSImpactEvidence.

        :param evidence_titles: The evidence_titles of this WSImpactEvidence.
        :type: list[WSLocalizedString]
        """

        self._evidence_titles = evidence_titles

    @property
    def types(self):
        """
        Gets the types of this WSImpactEvidence.

        :return: The types of this WSImpactEvidence.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSImpactEvidence.

        :param types: The types of this WSImpactEvidence.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def evidence_indicators(self):
        """
        Gets the evidence_indicators of this WSImpactEvidence.

        :return: The evidence_indicators of this WSImpactEvidence.
        :rtype: list[WSClassification]
        """
        return self._evidence_indicators

    @evidence_indicators.setter
    def evidence_indicators(self, evidence_indicators):
        """
        Sets the evidence_indicators of this WSImpactEvidence.

        :param evidence_indicators: The evidence_indicators of this WSImpactEvidence.
        :type: list[WSClassification]
        """

        self._evidence_indicators = evidence_indicators

    @property
    def evidence_summaries(self):
        """
        Gets the evidence_summaries of this WSImpactEvidence.

        :return: The evidence_summaries of this WSImpactEvidence.
        :rtype: list[WSLocalizedString]
        """
        return self._evidence_summaries

    @evidence_summaries.setter
    def evidence_summaries(self, evidence_summaries):
        """
        Sets the evidence_summaries of this WSImpactEvidence.

        :param evidence_summaries: The evidence_summaries of this WSImpactEvidence.
        :type: list[WSLocalizedString]
        """

        self._evidence_summaries = evidence_summaries

    @property
    def evidence_contact_informations(self):
        """
        Gets the evidence_contact_informations of this WSImpactEvidence.

        :return: The evidence_contact_informations of this WSImpactEvidence.
        :rtype: list[WSEvidenceContactInformation]
        """
        return self._evidence_contact_informations

    @evidence_contact_informations.setter
    def evidence_contact_informations(self, evidence_contact_informations):
        """
        Sets the evidence_contact_informations of this WSImpactEvidence.

        :param evidence_contact_informations: The evidence_contact_informations of this WSImpactEvidence.
        :type: list[WSEvidenceContactInformation]
        """

        self._evidence_contact_informations = evidence_contact_informations

    @property
    def period(self):
        """
        Gets the period of this WSImpactEvidence.

        :return: The period of this WSImpactEvidence.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSImpactEvidence.

        :param period: The period of this WSImpactEvidence.
        :type: WSCompoundDateRange
        """

        self._period = period

    @property
    def links(self):
        """
        Gets the links of this WSImpactEvidence.

        :return: The links of this WSImpactEvidence.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSImpactEvidence.

        :param links: The links of this WSImpactEvidence.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def documents(self):
        """
        Gets the documents of this WSImpactEvidence.

        :return: The documents of this WSImpactEvidence.
        :rtype: list[WSDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSImpactEvidence.

        :param documents: The documents of this WSImpactEvidence.
        :type: list[WSDocument]
        """

        self._documents = documents

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSImpactEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
