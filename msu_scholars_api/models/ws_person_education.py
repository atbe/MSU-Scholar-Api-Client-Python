# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSPersonEducation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'period': 'WSCompoundDateRange',
        'field_of_studies': 'list[WSClassification]',
        'qualifications': 'list[WSClassification]',
        'award_date': 'datetime',
        'organisations': 'list[WSInternalExternalOrganisationAssociation]',
        'project_titles': 'list[WSLocalizedString]'
    }

    attribute_map = {
        'id': 'id',
        'period': 'period',
        'field_of_studies': 'fieldOfStudies',
        'qualifications': 'qualifications',
        'award_date': 'awardDate',
        'organisations': 'organisations',
        'project_titles': 'projectTitles'
    }

    def __init__(self, id=None, period=None, field_of_studies=None, qualifications=None, award_date=None, organisations=None, project_titles=None):
        """
        WSPersonEducation - a model defined in Swagger
        """

        self._id = None
        self._period = None
        self._field_of_studies = None
        self._qualifications = None
        self._award_date = None
        self._organisations = None
        self._project_titles = None

        if id is not None:
          self.id = id
        if period is not None:
          self.period = period
        if field_of_studies is not None:
          self.field_of_studies = field_of_studies
        if qualifications is not None:
          self.qualifications = qualifications
        if award_date is not None:
          self.award_date = award_date
        if organisations is not None:
          self.organisations = organisations
        if project_titles is not None:
          self.project_titles = project_titles

    @property
    def id(self):
        """
        Gets the id of this WSPersonEducation.

        :return: The id of this WSPersonEducation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSPersonEducation.

        :param id: The id of this WSPersonEducation.
        :type: int
        """

        self._id = id

    @property
    def period(self):
        """
        Gets the period of this WSPersonEducation.

        :return: The period of this WSPersonEducation.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSPersonEducation.

        :param period: The period of this WSPersonEducation.
        :type: WSCompoundDateRange
        """

        self._period = period

    @property
    def field_of_studies(self):
        """
        Gets the field_of_studies of this WSPersonEducation.

        :return: The field_of_studies of this WSPersonEducation.
        :rtype: list[WSClassification]
        """
        return self._field_of_studies

    @field_of_studies.setter
    def field_of_studies(self, field_of_studies):
        """
        Sets the field_of_studies of this WSPersonEducation.

        :param field_of_studies: The field_of_studies of this WSPersonEducation.
        :type: list[WSClassification]
        """

        self._field_of_studies = field_of_studies

    @property
    def qualifications(self):
        """
        Gets the qualifications of this WSPersonEducation.

        :return: The qualifications of this WSPersonEducation.
        :rtype: list[WSClassification]
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """
        Sets the qualifications of this WSPersonEducation.

        :param qualifications: The qualifications of this WSPersonEducation.
        :type: list[WSClassification]
        """

        self._qualifications = qualifications

    @property
    def award_date(self):
        """
        Gets the award_date of this WSPersonEducation.

        :return: The award_date of this WSPersonEducation.
        :rtype: datetime
        """
        return self._award_date

    @award_date.setter
    def award_date(self, award_date):
        """
        Sets the award_date of this WSPersonEducation.

        :param award_date: The award_date of this WSPersonEducation.
        :type: datetime
        """

        self._award_date = award_date

    @property
    def organisations(self):
        """
        Gets the organisations of this WSPersonEducation.

        :return: The organisations of this WSPersonEducation.
        :rtype: list[WSInternalExternalOrganisationAssociation]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSPersonEducation.

        :param organisations: The organisations of this WSPersonEducation.
        :type: list[WSInternalExternalOrganisationAssociation]
        """

        self._organisations = organisations

    @property
    def project_titles(self):
        """
        Gets the project_titles of this WSPersonEducation.

        :return: The project_titles of this WSPersonEducation.
        :rtype: list[WSLocalizedString]
        """
        return self._project_titles

    @project_titles.setter
    def project_titles(self, project_titles):
        """
        Sets the project_titles of this WSPersonEducation.

        :param project_titles: The project_titles of this WSPersonEducation.
        :type: list[WSLocalizedString]
        """

        self._project_titles = project_titles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSPersonEducation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
