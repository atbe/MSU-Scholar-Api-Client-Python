# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSExternalableInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'source_id': 'str',
        'externally_managed': 'bool',
        'secondary_sources': 'list[WSSecondarySource]'
    }

    attribute_map = {
        'source': 'source',
        'source_id': 'sourceId',
        'externally_managed': 'externallyManaged',
        'secondary_sources': 'secondarySources'
    }

    def __init__(self, source=None, source_id=None, externally_managed=False, secondary_sources=None):
        """
        WSExternalableInformation - a model defined in Swagger
        """

        self._source = None
        self._source_id = None
        self._externally_managed = None
        self._secondary_sources = None

        if source is not None:
          self.source = source
        if source_id is not None:
          self.source_id = source_id
        if externally_managed is not None:
          self.externally_managed = externally_managed
        if secondary_sources is not None:
          self.secondary_sources = secondary_sources

    @property
    def source(self):
        """
        Gets the source of this WSExternalableInformation.

        :return: The source of this WSExternalableInformation.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this WSExternalableInformation.

        :param source: The source of this WSExternalableInformation.
        :type: str
        """

        self._source = source

    @property
    def source_id(self):
        """
        Gets the source_id of this WSExternalableInformation.

        :return: The source_id of this WSExternalableInformation.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this WSExternalableInformation.

        :param source_id: The source_id of this WSExternalableInformation.
        :type: str
        """

        self._source_id = source_id

    @property
    def externally_managed(self):
        """
        Gets the externally_managed of this WSExternalableInformation.

        :return: The externally_managed of this WSExternalableInformation.
        :rtype: bool
        """
        return self._externally_managed

    @externally_managed.setter
    def externally_managed(self, externally_managed):
        """
        Sets the externally_managed of this WSExternalableInformation.

        :param externally_managed: The externally_managed of this WSExternalableInformation.
        :type: bool
        """

        self._externally_managed = externally_managed

    @property
    def secondary_sources(self):
        """
        Gets the secondary_sources of this WSExternalableInformation.

        :return: The secondary_sources of this WSExternalableInformation.
        :rtype: list[WSSecondarySource]
        """
        return self._secondary_sources

    @secondary_sources.setter
    def secondary_sources(self, secondary_sources):
        """
        Sets the secondary_sources of this WSExternalableInformation.

        :param secondary_sources: The secondary_sources of this WSExternalableInformation.
        :type: list[WSSecondarySource]
        """

        self._secondary_sources = secondary_sources

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSExternalableInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
