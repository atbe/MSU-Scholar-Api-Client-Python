# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSDataSetPhysicalData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'storage_location': 'str',
        'access_description': 'str',
        'media': 'str',
        'types': 'list[WSClassification]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'storage_location': 'storageLocation',
        'access_description': 'accessDescription',
        'media': 'media',
        'types': 'types'
    }

    def __init__(self, id=None, title=None, storage_location=None, access_description=None, media=None, types=None):
        """
        WSDataSetPhysicalData - a model defined in Swagger
        """

        self._id = None
        self._title = None
        self._storage_location = None
        self._access_description = None
        self._media = None
        self._types = None

        if id is not None:
          self.id = id
        if title is not None:
          self.title = title
        if storage_location is not None:
          self.storage_location = storage_location
        if access_description is not None:
          self.access_description = access_description
        if media is not None:
          self.media = media
        if types is not None:
          self.types = types

    @property
    def id(self):
        """
        Gets the id of this WSDataSetPhysicalData.

        :return: The id of this WSDataSetPhysicalData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSDataSetPhysicalData.

        :param id: The id of this WSDataSetPhysicalData.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this WSDataSetPhysicalData.

        :return: The title of this WSDataSetPhysicalData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this WSDataSetPhysicalData.

        :param title: The title of this WSDataSetPhysicalData.
        :type: str
        """

        self._title = title

    @property
    def storage_location(self):
        """
        Gets the storage_location of this WSDataSetPhysicalData.

        :return: The storage_location of this WSDataSetPhysicalData.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """
        Sets the storage_location of this WSDataSetPhysicalData.

        :param storage_location: The storage_location of this WSDataSetPhysicalData.
        :type: str
        """

        self._storage_location = storage_location

    @property
    def access_description(self):
        """
        Gets the access_description of this WSDataSetPhysicalData.

        :return: The access_description of this WSDataSetPhysicalData.
        :rtype: str
        """
        return self._access_description

    @access_description.setter
    def access_description(self, access_description):
        """
        Sets the access_description of this WSDataSetPhysicalData.

        :param access_description: The access_description of this WSDataSetPhysicalData.
        :type: str
        """

        self._access_description = access_description

    @property
    def media(self):
        """
        Gets the media of this WSDataSetPhysicalData.

        :return: The media of this WSDataSetPhysicalData.
        :rtype: str
        """
        return self._media

    @media.setter
    def media(self, media):
        """
        Sets the media of this WSDataSetPhysicalData.

        :param media: The media of this WSDataSetPhysicalData.
        :type: str
        """

        self._media = media

    @property
    def types(self):
        """
        Gets the types of this WSDataSetPhysicalData.

        :return: The types of this WSDataSetPhysicalData.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSDataSetPhysicalData.

        :param types: The types of this WSDataSetPhysicalData.
        :type: list[WSClassification]
        """

        self._types = types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSDataSetPhysicalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
