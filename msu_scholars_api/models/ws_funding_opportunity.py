# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSFundingOpportunity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'types': 'list[WSClassification]',
        'titles': 'list[WSLocalizedString]',
        'descriptions': 'list[WSLocalizedString]',
        'classified_sources': 'list[WSClassifiedValue]',
        'announcement_url': 'str',
        'funding_organisation': 'WSExternalOrganisationRef',
        'opening_date': 'datetime',
        'letter_of_intent_date': 'datetime',
        'deadline': 'datetime',
        'active': 'bool',
        'award_ceiling': 'float',
        'award_ceiling_currencies': 'list[WSClassification]',
        'estimated_funding': 'float',
        'estimated_funding_currencies': 'list[WSClassification]',
        'eligibilities': 'list[WSFundingOpportunityEligibility]',
        'academic_degree_eligibilities': 'list[WSFundingOpportunityEligibility]',
        'limited_submission': 'bool',
        'number_of_annual_applications_per_hei': 'int',
        'number_of_awards': 'int',
        'open_access_requirements': 'bool',
        'applications': 'list[WSApplicationRef]',
        'externalable_info': 'WSExternalableInformation',
        'keyword_groups': 'list[WSKeywordGroup]',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'types': 'types',
        'titles': 'titles',
        'descriptions': 'descriptions',
        'classified_sources': 'classifiedSources',
        'announcement_url': 'announcementUrl',
        'funding_organisation': 'fundingOrganisation',
        'opening_date': 'openingDate',
        'letter_of_intent_date': 'letterOfIntentDate',
        'deadline': 'deadline',
        'active': 'active',
        'award_ceiling': 'awardCeiling',
        'award_ceiling_currencies': 'awardCeilingCurrencies',
        'estimated_funding': 'estimatedFunding',
        'estimated_funding_currencies': 'estimatedFundingCurrencies',
        'eligibilities': 'eligibilities',
        'academic_degree_eligibilities': 'academicDegreeEligibilities',
        'limited_submission': 'limitedSubmission',
        'number_of_annual_applications_per_hei': 'numberOfAnnualApplicationsPerHEI',
        'number_of_awards': 'numberOfAwards',
        'open_access_requirements': 'openAccessRequirements',
        'applications': 'applications',
        'externalable_info': 'externalableInfo',
        'keyword_groups': 'keywordGroups',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, types=None, titles=None, descriptions=None, classified_sources=None, announcement_url=None, funding_organisation=None, opening_date=None, letter_of_intent_date=None, deadline=None, active=False, award_ceiling=None, award_ceiling_currencies=None, estimated_funding=None, estimated_funding_currencies=None, eligibilities=None, academic_degree_eligibilities=None, limited_submission=False, number_of_annual_applications_per_hei=None, number_of_awards=None, open_access_requirements=False, applications=None, externalable_info=None, keyword_groups=None, info=None):
        """
        WSFundingOpportunity - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._types = None
        self._titles = None
        self._descriptions = None
        self._classified_sources = None
        self._announcement_url = None
        self._funding_organisation = None
        self._opening_date = None
        self._letter_of_intent_date = None
        self._deadline = None
        self._active = None
        self._award_ceiling = None
        self._award_ceiling_currencies = None
        self._estimated_funding = None
        self._estimated_funding_currencies = None
        self._eligibilities = None
        self._academic_degree_eligibilities = None
        self._limited_submission = None
        self._number_of_annual_applications_per_hei = None
        self._number_of_awards = None
        self._open_access_requirements = None
        self._applications = None
        self._externalable_info = None
        self._keyword_groups = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if types is not None:
          self.types = types
        if titles is not None:
          self.titles = titles
        if descriptions is not None:
          self.descriptions = descriptions
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if announcement_url is not None:
          self.announcement_url = announcement_url
        if funding_organisation is not None:
          self.funding_organisation = funding_organisation
        if opening_date is not None:
          self.opening_date = opening_date
        if letter_of_intent_date is not None:
          self.letter_of_intent_date = letter_of_intent_date
        if deadline is not None:
          self.deadline = deadline
        if active is not None:
          self.active = active
        if award_ceiling is not None:
          self.award_ceiling = award_ceiling
        if award_ceiling_currencies is not None:
          self.award_ceiling_currencies = award_ceiling_currencies
        if estimated_funding is not None:
          self.estimated_funding = estimated_funding
        if estimated_funding_currencies is not None:
          self.estimated_funding_currencies = estimated_funding_currencies
        if eligibilities is not None:
          self.eligibilities = eligibilities
        if academic_degree_eligibilities is not None:
          self.academic_degree_eligibilities = academic_degree_eligibilities
        if limited_submission is not None:
          self.limited_submission = limited_submission
        if number_of_annual_applications_per_hei is not None:
          self.number_of_annual_applications_per_hei = number_of_annual_applications_per_hei
        if number_of_awards is not None:
          self.number_of_awards = number_of_awards
        if open_access_requirements is not None:
          self.open_access_requirements = open_access_requirements
        if applications is not None:
          self.applications = applications
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSFundingOpportunity.

        :return: The uuid of this WSFundingOpportunity.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSFundingOpportunity.

        :param uuid: The uuid of this WSFundingOpportunity.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSFundingOpportunity.

        :return: The html_renderings of this WSFundingOpportunity.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSFundingOpportunity.

        :param html_renderings: The html_renderings of this WSFundingOpportunity.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def types(self):
        """
        Gets the types of this WSFundingOpportunity.

        :return: The types of this WSFundingOpportunity.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSFundingOpportunity.

        :param types: The types of this WSFundingOpportunity.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def titles(self):
        """
        Gets the titles of this WSFundingOpportunity.

        :return: The titles of this WSFundingOpportunity.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSFundingOpportunity.

        :param titles: The titles of this WSFundingOpportunity.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSFundingOpportunity.

        :return: The descriptions of this WSFundingOpportunity.
        :rtype: list[WSLocalizedString]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSFundingOpportunity.

        :param descriptions: The descriptions of this WSFundingOpportunity.
        :type: list[WSLocalizedString]
        """

        self._descriptions = descriptions

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSFundingOpportunity.

        :return: The classified_sources of this WSFundingOpportunity.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSFundingOpportunity.

        :param classified_sources: The classified_sources of this WSFundingOpportunity.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def announcement_url(self):
        """
        Gets the announcement_url of this WSFundingOpportunity.

        :return: The announcement_url of this WSFundingOpportunity.
        :rtype: str
        """
        return self._announcement_url

    @announcement_url.setter
    def announcement_url(self, announcement_url):
        """
        Sets the announcement_url of this WSFundingOpportunity.

        :param announcement_url: The announcement_url of this WSFundingOpportunity.
        :type: str
        """

        self._announcement_url = announcement_url

    @property
    def funding_organisation(self):
        """
        Gets the funding_organisation of this WSFundingOpportunity.

        :return: The funding_organisation of this WSFundingOpportunity.
        :rtype: WSExternalOrganisationRef
        """
        return self._funding_organisation

    @funding_organisation.setter
    def funding_organisation(self, funding_organisation):
        """
        Sets the funding_organisation of this WSFundingOpportunity.

        :param funding_organisation: The funding_organisation of this WSFundingOpportunity.
        :type: WSExternalOrganisationRef
        """

        self._funding_organisation = funding_organisation

    @property
    def opening_date(self):
        """
        Gets the opening_date of this WSFundingOpportunity.

        :return: The opening_date of this WSFundingOpportunity.
        :rtype: datetime
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """
        Sets the opening_date of this WSFundingOpportunity.

        :param opening_date: The opening_date of this WSFundingOpportunity.
        :type: datetime
        """

        self._opening_date = opening_date

    @property
    def letter_of_intent_date(self):
        """
        Gets the letter_of_intent_date of this WSFundingOpportunity.

        :return: The letter_of_intent_date of this WSFundingOpportunity.
        :rtype: datetime
        """
        return self._letter_of_intent_date

    @letter_of_intent_date.setter
    def letter_of_intent_date(self, letter_of_intent_date):
        """
        Sets the letter_of_intent_date of this WSFundingOpportunity.

        :param letter_of_intent_date: The letter_of_intent_date of this WSFundingOpportunity.
        :type: datetime
        """

        self._letter_of_intent_date = letter_of_intent_date

    @property
    def deadline(self):
        """
        Gets the deadline of this WSFundingOpportunity.

        :return: The deadline of this WSFundingOpportunity.
        :rtype: datetime
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """
        Sets the deadline of this WSFundingOpportunity.

        :param deadline: The deadline of this WSFundingOpportunity.
        :type: datetime
        """

        self._deadline = deadline

    @property
    def active(self):
        """
        Gets the active of this WSFundingOpportunity.

        :return: The active of this WSFundingOpportunity.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this WSFundingOpportunity.

        :param active: The active of this WSFundingOpportunity.
        :type: bool
        """

        self._active = active

    @property
    def award_ceiling(self):
        """
        Gets the award_ceiling of this WSFundingOpportunity.

        :return: The award_ceiling of this WSFundingOpportunity.
        :rtype: float
        """
        return self._award_ceiling

    @award_ceiling.setter
    def award_ceiling(self, award_ceiling):
        """
        Sets the award_ceiling of this WSFundingOpportunity.

        :param award_ceiling: The award_ceiling of this WSFundingOpportunity.
        :type: float
        """

        self._award_ceiling = award_ceiling

    @property
    def award_ceiling_currencies(self):
        """
        Gets the award_ceiling_currencies of this WSFundingOpportunity.

        :return: The award_ceiling_currencies of this WSFundingOpportunity.
        :rtype: list[WSClassification]
        """
        return self._award_ceiling_currencies

    @award_ceiling_currencies.setter
    def award_ceiling_currencies(self, award_ceiling_currencies):
        """
        Sets the award_ceiling_currencies of this WSFundingOpportunity.

        :param award_ceiling_currencies: The award_ceiling_currencies of this WSFundingOpportunity.
        :type: list[WSClassification]
        """

        self._award_ceiling_currencies = award_ceiling_currencies

    @property
    def estimated_funding(self):
        """
        Gets the estimated_funding of this WSFundingOpportunity.

        :return: The estimated_funding of this WSFundingOpportunity.
        :rtype: float
        """
        return self._estimated_funding

    @estimated_funding.setter
    def estimated_funding(self, estimated_funding):
        """
        Sets the estimated_funding of this WSFundingOpportunity.

        :param estimated_funding: The estimated_funding of this WSFundingOpportunity.
        :type: float
        """

        self._estimated_funding = estimated_funding

    @property
    def estimated_funding_currencies(self):
        """
        Gets the estimated_funding_currencies of this WSFundingOpportunity.

        :return: The estimated_funding_currencies of this WSFundingOpportunity.
        :rtype: list[WSClassification]
        """
        return self._estimated_funding_currencies

    @estimated_funding_currencies.setter
    def estimated_funding_currencies(self, estimated_funding_currencies):
        """
        Sets the estimated_funding_currencies of this WSFundingOpportunity.

        :param estimated_funding_currencies: The estimated_funding_currencies of this WSFundingOpportunity.
        :type: list[WSClassification]
        """

        self._estimated_funding_currencies = estimated_funding_currencies

    @property
    def eligibilities(self):
        """
        Gets the eligibilities of this WSFundingOpportunity.

        :return: The eligibilities of this WSFundingOpportunity.
        :rtype: list[WSFundingOpportunityEligibility]
        """
        return self._eligibilities

    @eligibilities.setter
    def eligibilities(self, eligibilities):
        """
        Sets the eligibilities of this WSFundingOpportunity.

        :param eligibilities: The eligibilities of this WSFundingOpportunity.
        :type: list[WSFundingOpportunityEligibility]
        """

        self._eligibilities = eligibilities

    @property
    def academic_degree_eligibilities(self):
        """
        Gets the academic_degree_eligibilities of this WSFundingOpportunity.

        :return: The academic_degree_eligibilities of this WSFundingOpportunity.
        :rtype: list[WSFundingOpportunityEligibility]
        """
        return self._academic_degree_eligibilities

    @academic_degree_eligibilities.setter
    def academic_degree_eligibilities(self, academic_degree_eligibilities):
        """
        Sets the academic_degree_eligibilities of this WSFundingOpportunity.

        :param academic_degree_eligibilities: The academic_degree_eligibilities of this WSFundingOpportunity.
        :type: list[WSFundingOpportunityEligibility]
        """

        self._academic_degree_eligibilities = academic_degree_eligibilities

    @property
    def limited_submission(self):
        """
        Gets the limited_submission of this WSFundingOpportunity.

        :return: The limited_submission of this WSFundingOpportunity.
        :rtype: bool
        """
        return self._limited_submission

    @limited_submission.setter
    def limited_submission(self, limited_submission):
        """
        Sets the limited_submission of this WSFundingOpportunity.

        :param limited_submission: The limited_submission of this WSFundingOpportunity.
        :type: bool
        """

        self._limited_submission = limited_submission

    @property
    def number_of_annual_applications_per_hei(self):
        """
        Gets the number_of_annual_applications_per_hei of this WSFundingOpportunity.

        :return: The number_of_annual_applications_per_hei of this WSFundingOpportunity.
        :rtype: int
        """
        return self._number_of_annual_applications_per_hei

    @number_of_annual_applications_per_hei.setter
    def number_of_annual_applications_per_hei(self, number_of_annual_applications_per_hei):
        """
        Sets the number_of_annual_applications_per_hei of this WSFundingOpportunity.

        :param number_of_annual_applications_per_hei: The number_of_annual_applications_per_hei of this WSFundingOpportunity.
        :type: int
        """

        self._number_of_annual_applications_per_hei = number_of_annual_applications_per_hei

    @property
    def number_of_awards(self):
        """
        Gets the number_of_awards of this WSFundingOpportunity.

        :return: The number_of_awards of this WSFundingOpportunity.
        :rtype: int
        """
        return self._number_of_awards

    @number_of_awards.setter
    def number_of_awards(self, number_of_awards):
        """
        Sets the number_of_awards of this WSFundingOpportunity.

        :param number_of_awards: The number_of_awards of this WSFundingOpportunity.
        :type: int
        """

        self._number_of_awards = number_of_awards

    @property
    def open_access_requirements(self):
        """
        Gets the open_access_requirements of this WSFundingOpportunity.

        :return: The open_access_requirements of this WSFundingOpportunity.
        :rtype: bool
        """
        return self._open_access_requirements

    @open_access_requirements.setter
    def open_access_requirements(self, open_access_requirements):
        """
        Sets the open_access_requirements of this WSFundingOpportunity.

        :param open_access_requirements: The open_access_requirements of this WSFundingOpportunity.
        :type: bool
        """

        self._open_access_requirements = open_access_requirements

    @property
    def applications(self):
        """
        Gets the applications of this WSFundingOpportunity.
        Only available when the Unified Project Model module is enabled

        :return: The applications of this WSFundingOpportunity.
        :rtype: list[WSApplicationRef]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """
        Sets the applications of this WSFundingOpportunity.
        Only available when the Unified Project Model module is enabled

        :param applications: The applications of this WSFundingOpportunity.
        :type: list[WSApplicationRef]
        """

        self._applications = applications

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSFundingOpportunity.

        :return: The externalable_info of this WSFundingOpportunity.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSFundingOpportunity.

        :param externalable_info: The externalable_info of this WSFundingOpportunity.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSFundingOpportunity.

        :return: The keyword_groups of this WSFundingOpportunity.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSFundingOpportunity.

        :param keyword_groups: The keyword_groups of this WSFundingOpportunity.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def info(self):
        """
        Gets the info of this WSFundingOpportunity.

        :return: The info of this WSFundingOpportunity.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSFundingOpportunity.

        :param info: The info of this WSFundingOpportunity.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSFundingOpportunity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
