# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSReference(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'types': 'list[WSReferenceType]',
        'titles': 'list[WSLocalizedString]',
        'descriptions': 'list[WSLocalizedString]',
        'person_associations': 'list[WSClassifiedPersonAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'date': 'datetime',
        'url': 'str',
        'medium': 'str',
        'media_types': 'list[WSClassification]',
        'degree_of_recognitions': 'list[WSClassification]',
        'countries': 'list[WSClassification]',
        'subdivisions': 'list[WSClassification]',
        'author': 'str',
        'extent': 'str',
        'newsflo_fragment': 'str',
        'newsflo_ranks': 'list[WSClassification]'
    }

    attribute_map = {
        'id': 'id',
        'types': 'types',
        'titles': 'titles',
        'descriptions': 'descriptions',
        'person_associations': 'personAssociations',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'date': 'date',
        'url': 'url',
        'medium': 'medium',
        'media_types': 'mediaTypes',
        'degree_of_recognitions': 'degreeOfRecognitions',
        'countries': 'countries',
        'subdivisions': 'subdivisions',
        'author': 'author',
        'extent': 'extent',
        'newsflo_fragment': 'newsfloFragment',
        'newsflo_ranks': 'newsfloRanks'
    }

    def __init__(self, id=None, types=None, titles=None, descriptions=None, person_associations=None, organisations=None, external_organisations=None, date=None, url=None, medium=None, media_types=None, degree_of_recognitions=None, countries=None, subdivisions=None, author=None, extent=None, newsflo_fragment=None, newsflo_ranks=None):
        """
        WSReference - a model defined in Swagger
        """

        self._id = None
        self._types = None
        self._titles = None
        self._descriptions = None
        self._person_associations = None
        self._organisations = None
        self._external_organisations = None
        self._date = None
        self._url = None
        self._medium = None
        self._media_types = None
        self._degree_of_recognitions = None
        self._countries = None
        self._subdivisions = None
        self._author = None
        self._extent = None
        self._newsflo_fragment = None
        self._newsflo_ranks = None

        if id is not None:
          self.id = id
        if types is not None:
          self.types = types
        if titles is not None:
          self.titles = titles
        if descriptions is not None:
          self.descriptions = descriptions
        if person_associations is not None:
          self.person_associations = person_associations
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if date is not None:
          self.date = date
        if url is not None:
          self.url = url
        if medium is not None:
          self.medium = medium
        if media_types is not None:
          self.media_types = media_types
        if degree_of_recognitions is not None:
          self.degree_of_recognitions = degree_of_recognitions
        if countries is not None:
          self.countries = countries
        if subdivisions is not None:
          self.subdivisions = subdivisions
        if author is not None:
          self.author = author
        if extent is not None:
          self.extent = extent
        if newsflo_fragment is not None:
          self.newsflo_fragment = newsflo_fragment
        if newsflo_ranks is not None:
          self.newsflo_ranks = newsflo_ranks

    @property
    def id(self):
        """
        Gets the id of this WSReference.

        :return: The id of this WSReference.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSReference.

        :param id: The id of this WSReference.
        :type: int
        """

        self._id = id

    @property
    def types(self):
        """
        Gets the types of this WSReference.

        :return: The types of this WSReference.
        :rtype: list[WSReferenceType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSReference.

        :param types: The types of this WSReference.
        :type: list[WSReferenceType]
        """

        self._types = types

    @property
    def titles(self):
        """
        Gets the titles of this WSReference.

        :return: The titles of this WSReference.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSReference.

        :param titles: The titles of this WSReference.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSReference.

        :return: The descriptions of this WSReference.
        :rtype: list[WSLocalizedString]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSReference.

        :param descriptions: The descriptions of this WSReference.
        :type: list[WSLocalizedString]
        """

        self._descriptions = descriptions

    @property
    def person_associations(self):
        """
        Gets the person_associations of this WSReference.

        :return: The person_associations of this WSReference.
        :rtype: list[WSClassifiedPersonAssociation]
        """
        return self._person_associations

    @person_associations.setter
    def person_associations(self, person_associations):
        """
        Sets the person_associations of this WSReference.

        :param person_associations: The person_associations of this WSReference.
        :type: list[WSClassifiedPersonAssociation]
        """

        self._person_associations = person_associations

    @property
    def organisations(self):
        """
        Gets the organisations of this WSReference.

        :return: The organisations of this WSReference.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSReference.

        :param organisations: The organisations of this WSReference.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSReference.

        :return: The external_organisations of this WSReference.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSReference.

        :param external_organisations: The external_organisations of this WSReference.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def date(self):
        """
        Gets the date of this WSReference.

        :return: The date of this WSReference.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this WSReference.

        :param date: The date of this WSReference.
        :type: datetime
        """

        self._date = date

    @property
    def url(self):
        """
        Gets the url of this WSReference.

        :return: The url of this WSReference.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this WSReference.

        :param url: The url of this WSReference.
        :type: str
        """

        self._url = url

    @property
    def medium(self):
        """
        Gets the medium of this WSReference.

        :return: The medium of this WSReference.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """
        Sets the medium of this WSReference.

        :param medium: The medium of this WSReference.
        :type: str
        """

        self._medium = medium

    @property
    def media_types(self):
        """
        Gets the media_types of this WSReference.

        :return: The media_types of this WSReference.
        :rtype: list[WSClassification]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """
        Sets the media_types of this WSReference.

        :param media_types: The media_types of this WSReference.
        :type: list[WSClassification]
        """

        self._media_types = media_types

    @property
    def degree_of_recognitions(self):
        """
        Gets the degree_of_recognitions of this WSReference.

        :return: The degree_of_recognitions of this WSReference.
        :rtype: list[WSClassification]
        """
        return self._degree_of_recognitions

    @degree_of_recognitions.setter
    def degree_of_recognitions(self, degree_of_recognitions):
        """
        Sets the degree_of_recognitions of this WSReference.

        :param degree_of_recognitions: The degree_of_recognitions of this WSReference.
        :type: list[WSClassification]
        """

        self._degree_of_recognitions = degree_of_recognitions

    @property
    def countries(self):
        """
        Gets the countries of this WSReference.

        :return: The countries of this WSReference.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSReference.

        :param countries: The countries of this WSReference.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def subdivisions(self):
        """
        Gets the subdivisions of this WSReference.

        :return: The subdivisions of this WSReference.
        :rtype: list[WSClassification]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """
        Sets the subdivisions of this WSReference.

        :param subdivisions: The subdivisions of this WSReference.
        :type: list[WSClassification]
        """

        self._subdivisions = subdivisions

    @property
    def author(self):
        """
        Gets the author of this WSReference.

        :return: The author of this WSReference.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this WSReference.

        :param author: The author of this WSReference.
        :type: str
        """

        self._author = author

    @property
    def extent(self):
        """
        Gets the extent of this WSReference.

        :return: The extent of this WSReference.
        :rtype: str
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """
        Sets the extent of this WSReference.

        :param extent: The extent of this WSReference.
        :type: str
        """

        self._extent = extent

    @property
    def newsflo_fragment(self):
        """
        Gets the newsflo_fragment of this WSReference.
        Only available when Newsflo integration is enabled

        :return: The newsflo_fragment of this WSReference.
        :rtype: str
        """
        return self._newsflo_fragment

    @newsflo_fragment.setter
    def newsflo_fragment(self, newsflo_fragment):
        """
        Sets the newsflo_fragment of this WSReference.
        Only available when Newsflo integration is enabled

        :param newsflo_fragment: The newsflo_fragment of this WSReference.
        :type: str
        """

        self._newsflo_fragment = newsflo_fragment

    @property
    def newsflo_ranks(self):
        """
        Gets the newsflo_ranks of this WSReference.
        Only available when Newsflo integration is enabled

        :return: The newsflo_ranks of this WSReference.
        :rtype: list[WSClassification]
        """
        return self._newsflo_ranks

    @newsflo_ranks.setter
    def newsflo_ranks(self, newsflo_ranks):
        """
        Sets the newsflo_ranks of this WSReference.
        Only available when Newsflo integration is enabled

        :param newsflo_ranks: The newsflo_ranks of this WSReference.
        :type: list[WSClassification]
        """

        self._newsflo_ranks = newsflo_ranks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
