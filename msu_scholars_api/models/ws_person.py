# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSPerson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'name': 'WSName',
        'genders': 'list[WSClassification]',
        'date_of_birth': 'datetime',
        'nationalities': 'list[WSClassification]',
        'name_variants': 'list[WSClassifiedName]',
        'titles': 'list[WSClassifiedLocalizedValue]',
        'classified_sources': 'list[WSClassifiedValue]',
        'orcid': 'str',
        'profile_photos': 'list[WSClassifiedFileRef]',
        'links': 'list[WSLink]',
        'start_date_as_researcher': 'datetime',
        'retirement_date': 'datetime',
        'profiled': 'bool',
        'scopus_h_index': 'int',
        'profile_informations': 'list[WSClassifiedLocalizedValue]',
        'student_organisation_associations': 'list[WSStudentOrganisationAssociation]',
        'staff_organisation_associations': 'list[WSStaffOrganisationAssociation]',
        'visiting_scholar_organisation_associations': 'list[WSVisitingScholarOrganisationAssociation]',
        'honorary_staff_organisation_associations': 'list[WSHonoraryStaffOrganisationAssociation]',
        'supervisor_for_relations': 'list[WSPersonSupervisorAssociation]',
        'leave_of_absence': 'WSPersonClassifiedLeaveOfAbsence',
        'employee_start_date': 'datetime',
        'employee_end_date': 'datetime',
        'fte': 'float',
        'affiliation_note': 'str',
        'external_positions': 'list[WSPersonExternalPosition]',
        'educations': 'list[WSPersonEducation]',
        'professional_qualifications': 'list[WSProfessionalQualification]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'will_take_phd_students': 'bool',
        'phd_research_projects': 'str',
        'private_address': 'WSClassifiedAddress',
        'visibility': 'list[WSVisibility]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation',
        'expert': 'bool'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'name': 'name',
        'genders': 'genders',
        'date_of_birth': 'dateOfBirth',
        'nationalities': 'nationalities',
        'name_variants': 'nameVariants',
        'titles': 'titles',
        'classified_sources': 'classifiedSources',
        'orcid': 'orcid',
        'profile_photos': 'profilePhotos',
        'links': 'links',
        'start_date_as_researcher': 'startDateAsResearcher',
        'retirement_date': 'retirementDate',
        'profiled': 'profiled',
        'scopus_h_index': 'scopusHIndex',
        'profile_informations': 'profileInformations',
        'student_organisation_associations': 'studentOrganisationAssociations',
        'staff_organisation_associations': 'staffOrganisationAssociations',
        'visiting_scholar_organisation_associations': 'visitingScholarOrganisationAssociations',
        'honorary_staff_organisation_associations': 'honoraryStaffOrganisationAssociations',
        'supervisor_for_relations': 'supervisorForRelations',
        'leave_of_absence': 'leaveOfAbsence',
        'employee_start_date': 'employeeStartDate',
        'employee_end_date': 'employeeEndDate',
        'fte': 'fte',
        'affiliation_note': 'affiliationNote',
        'external_positions': 'externalPositions',
        'educations': 'educations',
        'professional_qualifications': 'professionalQualifications',
        'keyword_groups': 'keywordGroups',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'will_take_phd_students': 'willTakePhdStudents',
        'phd_research_projects': 'phdResearchProjects',
        'private_address': 'privateAddress',
        'visibility': 'visibility',
        'externalable_info': 'externalableInfo',
        'info': 'info',
        'expert': 'expert'
    }

    def __init__(self, uuid=None, html_renderings=None, name=None, genders=None, date_of_birth=None, nationalities=None, name_variants=None, titles=None, classified_sources=None, orcid=None, profile_photos=None, links=None, start_date_as_researcher=None, retirement_date=None, profiled=False, scopus_h_index=None, profile_informations=None, student_organisation_associations=None, staff_organisation_associations=None, visiting_scholar_organisation_associations=None, honorary_staff_organisation_associations=None, supervisor_for_relations=None, leave_of_absence=None, employee_start_date=None, employee_end_date=None, fte=None, affiliation_note=None, external_positions=None, educations=None, professional_qualifications=None, keyword_groups=None, field_of_research_associations=None, will_take_phd_students=False, phd_research_projects=None, private_address=None, visibility=None, externalable_info=None, info=None, expert=False):
        """
        WSPerson - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._name = None
        self._genders = None
        self._date_of_birth = None
        self._nationalities = None
        self._name_variants = None
        self._titles = None
        self._classified_sources = None
        self._orcid = None
        self._profile_photos = None
        self._links = None
        self._start_date_as_researcher = None
        self._retirement_date = None
        self._profiled = None
        self._scopus_h_index = None
        self._profile_informations = None
        self._student_organisation_associations = None
        self._staff_organisation_associations = None
        self._visiting_scholar_organisation_associations = None
        self._honorary_staff_organisation_associations = None
        self._supervisor_for_relations = None
        self._leave_of_absence = None
        self._employee_start_date = None
        self._employee_end_date = None
        self._fte = None
        self._affiliation_note = None
        self._external_positions = None
        self._educations = None
        self._professional_qualifications = None
        self._keyword_groups = None
        self._field_of_research_associations = None
        self._will_take_phd_students = None
        self._phd_research_projects = None
        self._private_address = None
        self._visibility = None
        self._externalable_info = None
        self._info = None
        self._expert = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if name is not None:
          self.name = name
        if genders is not None:
          self.genders = genders
        if date_of_birth is not None:
          self.date_of_birth = date_of_birth
        if nationalities is not None:
          self.nationalities = nationalities
        if name_variants is not None:
          self.name_variants = name_variants
        if titles is not None:
          self.titles = titles
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if orcid is not None:
          self.orcid = orcid
        if profile_photos is not None:
          self.profile_photos = profile_photos
        if links is not None:
          self.links = links
        if start_date_as_researcher is not None:
          self.start_date_as_researcher = start_date_as_researcher
        if retirement_date is not None:
          self.retirement_date = retirement_date
        if profiled is not None:
          self.profiled = profiled
        if scopus_h_index is not None:
          self.scopus_h_index = scopus_h_index
        if profile_informations is not None:
          self.profile_informations = profile_informations
        if student_organisation_associations is not None:
          self.student_organisation_associations = student_organisation_associations
        if staff_organisation_associations is not None:
          self.staff_organisation_associations = staff_organisation_associations
        if visiting_scholar_organisation_associations is not None:
          self.visiting_scholar_organisation_associations = visiting_scholar_organisation_associations
        if honorary_staff_organisation_associations is not None:
          self.honorary_staff_organisation_associations = honorary_staff_organisation_associations
        if supervisor_for_relations is not None:
          self.supervisor_for_relations = supervisor_for_relations
        if leave_of_absence is not None:
          self.leave_of_absence = leave_of_absence
        if employee_start_date is not None:
          self.employee_start_date = employee_start_date
        if employee_end_date is not None:
          self.employee_end_date = employee_end_date
        if fte is not None:
          self.fte = fte
        if affiliation_note is not None:
          self.affiliation_note = affiliation_note
        if external_positions is not None:
          self.external_positions = external_positions
        if educations is not None:
          self.educations = educations
        if professional_qualifications is not None:
          self.professional_qualifications = professional_qualifications
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if will_take_phd_students is not None:
          self.will_take_phd_students = will_take_phd_students
        if phd_research_projects is not None:
          self.phd_research_projects = phd_research_projects
        if private_address is not None:
          self.private_address = private_address
        if visibility is not None:
          self.visibility = visibility
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info
        if expert is not None:
          self.expert = expert

    @property
    def uuid(self):
        """
        Gets the uuid of this WSPerson.

        :return: The uuid of this WSPerson.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSPerson.

        :param uuid: The uuid of this WSPerson.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSPerson.

        :return: The html_renderings of this WSPerson.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSPerson.

        :param html_renderings: The html_renderings of this WSPerson.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def name(self):
        """
        Gets the name of this WSPerson.

        :return: The name of this WSPerson.
        :rtype: WSName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSPerson.

        :param name: The name of this WSPerson.
        :type: WSName
        """

        self._name = name

    @property
    def genders(self):
        """
        Gets the genders of this WSPerson.
        Only available if it is made public

        :return: The genders of this WSPerson.
        :rtype: list[WSClassification]
        """
        return self._genders

    @genders.setter
    def genders(self, genders):
        """
        Sets the genders of this WSPerson.
        Only available if it is made public

        :param genders: The genders of this WSPerson.
        :type: list[WSClassification]
        """

        self._genders = genders

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this WSPerson.
        Only available if it is made public

        :return: The date_of_birth of this WSPerson.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this WSPerson.
        Only available if it is made public

        :param date_of_birth: The date_of_birth of this WSPerson.
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def nationalities(self):
        """
        Gets the nationalities of this WSPerson.

        :return: The nationalities of this WSPerson.
        :rtype: list[WSClassification]
        """
        return self._nationalities

    @nationalities.setter
    def nationalities(self, nationalities):
        """
        Sets the nationalities of this WSPerson.

        :param nationalities: The nationalities of this WSPerson.
        :type: list[WSClassification]
        """

        self._nationalities = nationalities

    @property
    def name_variants(self):
        """
        Gets the name_variants of this WSPerson.

        :return: The name_variants of this WSPerson.
        :rtype: list[WSClassifiedName]
        """
        return self._name_variants

    @name_variants.setter
    def name_variants(self, name_variants):
        """
        Sets the name_variants of this WSPerson.

        :param name_variants: The name_variants of this WSPerson.
        :type: list[WSClassifiedName]
        """

        self._name_variants = name_variants

    @property
    def titles(self):
        """
        Gets the titles of this WSPerson.

        :return: The titles of this WSPerson.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSPerson.

        :param titles: The titles of this WSPerson.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._titles = titles

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSPerson.

        :return: The classified_sources of this WSPerson.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSPerson.

        :param classified_sources: The classified_sources of this WSPerson.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def orcid(self):
        """
        Gets the orcid of this WSPerson.

        :return: The orcid of this WSPerson.
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """
        Sets the orcid of this WSPerson.

        :param orcid: The orcid of this WSPerson.
        :type: str
        """

        self._orcid = orcid

    @property
    def profile_photos(self):
        """
        Gets the profile_photos of this WSPerson.

        :return: The profile_photos of this WSPerson.
        :rtype: list[WSClassifiedFileRef]
        """
        return self._profile_photos

    @profile_photos.setter
    def profile_photos(self, profile_photos):
        """
        Sets the profile_photos of this WSPerson.

        :param profile_photos: The profile_photos of this WSPerson.
        :type: list[WSClassifiedFileRef]
        """

        self._profile_photos = profile_photos

    @property
    def links(self):
        """
        Gets the links of this WSPerson.

        :return: The links of this WSPerson.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSPerson.

        :param links: The links of this WSPerson.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def start_date_as_researcher(self):
        """
        Gets the start_date_as_researcher of this WSPerson.

        :return: The start_date_as_researcher of this WSPerson.
        :rtype: datetime
        """
        return self._start_date_as_researcher

    @start_date_as_researcher.setter
    def start_date_as_researcher(self, start_date_as_researcher):
        """
        Sets the start_date_as_researcher of this WSPerson.

        :param start_date_as_researcher: The start_date_as_researcher of this WSPerson.
        :type: datetime
        """

        self._start_date_as_researcher = start_date_as_researcher

    @property
    def retirement_date(self):
        """
        Gets the retirement_date of this WSPerson.

        :return: The retirement_date of this WSPerson.
        :rtype: datetime
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """
        Sets the retirement_date of this WSPerson.

        :param retirement_date: The retirement_date of this WSPerson.
        :type: datetime
        """

        self._retirement_date = retirement_date

    @property
    def profiled(self):
        """
        Gets the profiled of this WSPerson.
        Only available when the Author Profile module is enabled

        :return: The profiled of this WSPerson.
        :rtype: bool
        """
        return self._profiled

    @profiled.setter
    def profiled(self, profiled):
        """
        Sets the profiled of this WSPerson.
        Only available when the Author Profile module is enabled

        :param profiled: The profiled of this WSPerson.
        :type: bool
        """

        self._profiled = profiled

    @property
    def scopus_h_index(self):
        """
        Gets the scopus_h_index of this WSPerson.

        :return: The scopus_h_index of this WSPerson.
        :rtype: int
        """
        return self._scopus_h_index

    @scopus_h_index.setter
    def scopus_h_index(self, scopus_h_index):
        """
        Sets the scopus_h_index of this WSPerson.

        :param scopus_h_index: The scopus_h_index of this WSPerson.
        :type: int
        """

        self._scopus_h_index = scopus_h_index

    @property
    def profile_informations(self):
        """
        Gets the profile_informations of this WSPerson.

        :return: The profile_informations of this WSPerson.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._profile_informations

    @profile_informations.setter
    def profile_informations(self, profile_informations):
        """
        Sets the profile_informations of this WSPerson.

        :param profile_informations: The profile_informations of this WSPerson.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._profile_informations = profile_informations

    @property
    def student_organisation_associations(self):
        """
        Gets the student_organisation_associations of this WSPerson.

        :return: The student_organisation_associations of this WSPerson.
        :rtype: list[WSStudentOrganisationAssociation]
        """
        return self._student_organisation_associations

    @student_organisation_associations.setter
    def student_organisation_associations(self, student_organisation_associations):
        """
        Sets the student_organisation_associations of this WSPerson.

        :param student_organisation_associations: The student_organisation_associations of this WSPerson.
        :type: list[WSStudentOrganisationAssociation]
        """

        self._student_organisation_associations = student_organisation_associations

    @property
    def staff_organisation_associations(self):
        """
        Gets the staff_organisation_associations of this WSPerson.

        :return: The staff_organisation_associations of this WSPerson.
        :rtype: list[WSStaffOrganisationAssociation]
        """
        return self._staff_organisation_associations

    @staff_organisation_associations.setter
    def staff_organisation_associations(self, staff_organisation_associations):
        """
        Sets the staff_organisation_associations of this WSPerson.

        :param staff_organisation_associations: The staff_organisation_associations of this WSPerson.
        :type: list[WSStaffOrganisationAssociation]
        """

        self._staff_organisation_associations = staff_organisation_associations

    @property
    def visiting_scholar_organisation_associations(self):
        """
        Gets the visiting_scholar_organisation_associations of this WSPerson.

        :return: The visiting_scholar_organisation_associations of this WSPerson.
        :rtype: list[WSVisitingScholarOrganisationAssociation]
        """
        return self._visiting_scholar_organisation_associations

    @visiting_scholar_organisation_associations.setter
    def visiting_scholar_organisation_associations(self, visiting_scholar_organisation_associations):
        """
        Sets the visiting_scholar_organisation_associations of this WSPerson.

        :param visiting_scholar_organisation_associations: The visiting_scholar_organisation_associations of this WSPerson.
        :type: list[WSVisitingScholarOrganisationAssociation]
        """

        self._visiting_scholar_organisation_associations = visiting_scholar_organisation_associations

    @property
    def honorary_staff_organisation_associations(self):
        """
        Gets the honorary_staff_organisation_associations of this WSPerson.

        :return: The honorary_staff_organisation_associations of this WSPerson.
        :rtype: list[WSHonoraryStaffOrganisationAssociation]
        """
        return self._honorary_staff_organisation_associations

    @honorary_staff_organisation_associations.setter
    def honorary_staff_organisation_associations(self, honorary_staff_organisation_associations):
        """
        Sets the honorary_staff_organisation_associations of this WSPerson.

        :param honorary_staff_organisation_associations: The honorary_staff_organisation_associations of this WSPerson.
        :type: list[WSHonoraryStaffOrganisationAssociation]
        """

        self._honorary_staff_organisation_associations = honorary_staff_organisation_associations

    @property
    def supervisor_for_relations(self):
        """
        Gets the supervisor_for_relations of this WSPerson.

        :return: The supervisor_for_relations of this WSPerson.
        :rtype: list[WSPersonSupervisorAssociation]
        """
        return self._supervisor_for_relations

    @supervisor_for_relations.setter
    def supervisor_for_relations(self, supervisor_for_relations):
        """
        Sets the supervisor_for_relations of this WSPerson.

        :param supervisor_for_relations: The supervisor_for_relations of this WSPerson.
        :type: list[WSPersonSupervisorAssociation]
        """

        self._supervisor_for_relations = supervisor_for_relations

    @property
    def leave_of_absence(self):
        """
        Gets the leave_of_absence of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The leave_of_absence of this WSPerson.
        :rtype: WSPersonClassifiedLeaveOfAbsence
        """
        return self._leave_of_absence

    @leave_of_absence.setter
    def leave_of_absence(self, leave_of_absence):
        """
        Sets the leave_of_absence of this WSPerson.
        Only available when the proper configuration is enabled

        :param leave_of_absence: The leave_of_absence of this WSPerson.
        :type: WSPersonClassifiedLeaveOfAbsence
        """

        self._leave_of_absence = leave_of_absence

    @property
    def employee_start_date(self):
        """
        Gets the employee_start_date of this WSPerson.

        :return: The employee_start_date of this WSPerson.
        :rtype: datetime
        """
        return self._employee_start_date

    @employee_start_date.setter
    def employee_start_date(self, employee_start_date):
        """
        Sets the employee_start_date of this WSPerson.

        :param employee_start_date: The employee_start_date of this WSPerson.
        :type: datetime
        """

        self._employee_start_date = employee_start_date

    @property
    def employee_end_date(self):
        """
        Gets the employee_end_date of this WSPerson.

        :return: The employee_end_date of this WSPerson.
        :rtype: datetime
        """
        return self._employee_end_date

    @employee_end_date.setter
    def employee_end_date(self, employee_end_date):
        """
        Sets the employee_end_date of this WSPerson.

        :param employee_end_date: The employee_end_date of this WSPerson.
        :type: datetime
        """

        self._employee_end_date = employee_end_date

    @property
    def fte(self):
        """
        Gets the fte of this WSPerson.

        :return: The fte of this WSPerson.
        :rtype: float
        """
        return self._fte

    @fte.setter
    def fte(self, fte):
        """
        Sets the fte of this WSPerson.

        :param fte: The fte of this WSPerson.
        :type: float
        """

        self._fte = fte

    @property
    def affiliation_note(self):
        """
        Gets the affiliation_note of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The affiliation_note of this WSPerson.
        :rtype: str
        """
        return self._affiliation_note

    @affiliation_note.setter
    def affiliation_note(self, affiliation_note):
        """
        Sets the affiliation_note of this WSPerson.
        Only available when the proper configuration is enabled

        :param affiliation_note: The affiliation_note of this WSPerson.
        :type: str
        """

        self._affiliation_note = affiliation_note

    @property
    def external_positions(self):
        """
        Gets the external_positions of this WSPerson.

        :return: The external_positions of this WSPerson.
        :rtype: list[WSPersonExternalPosition]
        """
        return self._external_positions

    @external_positions.setter
    def external_positions(self, external_positions):
        """
        Sets the external_positions of this WSPerson.

        :param external_positions: The external_positions of this WSPerson.
        :type: list[WSPersonExternalPosition]
        """

        self._external_positions = external_positions

    @property
    def educations(self):
        """
        Gets the educations of this WSPerson.

        :return: The educations of this WSPerson.
        :rtype: list[WSPersonEducation]
        """
        return self._educations

    @educations.setter
    def educations(self, educations):
        """
        Sets the educations of this WSPerson.

        :param educations: The educations of this WSPerson.
        :type: list[WSPersonEducation]
        """

        self._educations = educations

    @property
    def professional_qualifications(self):
        """
        Gets the professional_qualifications of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The professional_qualifications of this WSPerson.
        :rtype: list[WSProfessionalQualification]
        """
        return self._professional_qualifications

    @professional_qualifications.setter
    def professional_qualifications(self, professional_qualifications):
        """
        Sets the professional_qualifications of this WSPerson.
        Only available when the proper configuration is enabled

        :param professional_qualifications: The professional_qualifications of this WSPerson.
        :type: list[WSProfessionalQualification]
        """

        self._professional_qualifications = professional_qualifications

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSPerson.

        :return: The keyword_groups of this WSPerson.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSPerson.

        :param keyword_groups: The keyword_groups of this WSPerson.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSPerson.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSPerson.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSPerson.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSPerson.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def will_take_phd_students(self):
        """
        Gets the will_take_phd_students of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The will_take_phd_students of this WSPerson.
        :rtype: bool
        """
        return self._will_take_phd_students

    @will_take_phd_students.setter
    def will_take_phd_students(self, will_take_phd_students):
        """
        Sets the will_take_phd_students of this WSPerson.
        Only available when the proper configuration is enabled

        :param will_take_phd_students: The will_take_phd_students of this WSPerson.
        :type: bool
        """

        self._will_take_phd_students = will_take_phd_students

    @property
    def phd_research_projects(self):
        """
        Gets the phd_research_projects of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The phd_research_projects of this WSPerson.
        :rtype: str
        """
        return self._phd_research_projects

    @phd_research_projects.setter
    def phd_research_projects(self, phd_research_projects):
        """
        Sets the phd_research_projects of this WSPerson.
        Only available when the proper configuration is enabled

        :param phd_research_projects: The phd_research_projects of this WSPerson.
        :type: str
        """

        self._phd_research_projects = phd_research_projects

    @property
    def private_address(self):
        """
        Gets the private_address of this WSPerson.
        Only available when the proper configuration is enabled

        :return: The private_address of this WSPerson.
        :rtype: WSClassifiedAddress
        """
        return self._private_address

    @private_address.setter
    def private_address(self, private_address):
        """
        Sets the private_address of this WSPerson.
        Only available when the proper configuration is enabled

        :param private_address: The private_address of this WSPerson.
        :type: WSClassifiedAddress
        """

        self._private_address = private_address

    @property
    def visibility(self):
        """
        Gets the visibility of this WSPerson.

        :return: The visibility of this WSPerson.
        :rtype: list[WSVisibility]
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this WSPerson.

        :param visibility: The visibility of this WSPerson.
        :type: list[WSVisibility]
        """

        self._visibility = visibility

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSPerson.

        :return: The externalable_info of this WSPerson.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSPerson.

        :param externalable_info: The externalable_info of this WSPerson.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSPerson.

        :return: The info of this WSPerson.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSPerson.

        :param info: The info of this WSPerson.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def expert(self):
        """
        Gets the expert of this WSPerson.

        :return: The expert of this WSPerson.
        :rtype: bool
        """
        return self._expert

    @expert.setter
    def expert(self, expert):
        """
        Sets the expert of this WSPerson.

        :param expert: The expert of this WSPerson.
        :type: bool
        """

        self._expert = expert

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSPerson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
