# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSThesauri(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'acronym': 'str',
        'workflow': 'str',
        'name': 'list[WSLocalizedString]',
        'thesaurus_version': 'str',
        'description': 'list[WSLocalizedString]',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'acronym': 'acronym',
        'workflow': 'workflow',
        'name': 'name',
        'thesaurus_version': 'thesaurusVersion',
        'description': 'description',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, acronym=None, workflow=None, name=None, thesaurus_version=None, description=None, info=None):
        """
        WSThesauri - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._acronym = None
        self._workflow = None
        self._name = None
        self._thesaurus_version = None
        self._description = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if acronym is not None:
          self.acronym = acronym
        if workflow is not None:
          self.workflow = workflow
        if name is not None:
          self.name = name
        if thesaurus_version is not None:
          self.thesaurus_version = thesaurus_version
        if description is not None:
          self.description = description
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSThesauri.

        :return: The uuid of this WSThesauri.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSThesauri.

        :param uuid: The uuid of this WSThesauri.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSThesauri.

        :return: The html_renderings of this WSThesauri.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSThesauri.

        :param html_renderings: The html_renderings of this WSThesauri.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def acronym(self):
        """
        Gets the acronym of this WSThesauri.

        :return: The acronym of this WSThesauri.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """
        Sets the acronym of this WSThesauri.

        :param acronym: The acronym of this WSThesauri.
        :type: str
        """

        self._acronym = acronym

    @property
    def workflow(self):
        """
        Gets the workflow of this WSThesauri.

        :return: The workflow of this WSThesauri.
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """
        Sets the workflow of this WSThesauri.

        :param workflow: The workflow of this WSThesauri.
        :type: str
        """

        self._workflow = workflow

    @property
    def name(self):
        """
        Gets the name of this WSThesauri.

        :return: The name of this WSThesauri.
        :rtype: list[WSLocalizedString]
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSThesauri.

        :param name: The name of this WSThesauri.
        :type: list[WSLocalizedString]
        """

        self._name = name

    @property
    def thesaurus_version(self):
        """
        Gets the thesaurus_version of this WSThesauri.

        :return: The thesaurus_version of this WSThesauri.
        :rtype: str
        """
        return self._thesaurus_version

    @thesaurus_version.setter
    def thesaurus_version(self, thesaurus_version):
        """
        Sets the thesaurus_version of this WSThesauri.

        :param thesaurus_version: The thesaurus_version of this WSThesauri.
        :type: str
        """

        self._thesaurus_version = thesaurus_version

    @property
    def description(self):
        """
        Gets the description of this WSThesauri.

        :return: The description of this WSThesauri.
        :rtype: list[WSLocalizedString]
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WSThesauri.

        :param description: The description of this WSThesauri.
        :type: list[WSLocalizedString]
        """

        self._description = description

    @property
    def info(self):
        """
        Gets the info of this WSThesauri.

        :return: The info of this WSThesauri.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSThesauri.

        :param info: The info of this WSThesauri.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSThesauri):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
