# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSResearchOutputsQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_string': 'str',
        'uuids': 'list[str]',
        'size': 'int',
        'offset': 'int',
        'linking_strategy': 'str',
        'locales': 'list[str]',
        'fallback_locales': 'list[str]',
        'renderings': 'list[str]',
        'fields': 'list[str]',
        'orderings': 'list[str]',
        'return_used_content': 'bool',
        'navigation_link': 'bool',
        'id_classification': 'str',
        'type_uris': 'list[str]',
        'publication_statuses': 'list[str]',
        'publication_categories': 'list[str]',
        'peer_reviewed': 'bool',
        'international_peer_reviewed': 'bool',
        'for_journals': 'WSJournalsQuery',
        'for_publishers': 'WSPublishersQuery',
        'for_persons': 'WSPersonsQuery',
        'for_organisational_units': 'WSOrganisationsQuery',
        'workflow_steps': 'list[str]'
    }

    attribute_map = {
        'search_string': 'searchString',
        'uuids': 'uuids',
        'size': 'size',
        'offset': 'offset',
        'linking_strategy': 'linkingStrategy',
        'locales': 'locales',
        'fallback_locales': 'fallbackLocales',
        'renderings': 'renderings',
        'fields': 'fields',
        'orderings': 'orderings',
        'return_used_content': 'returnUsedContent',
        'navigation_link': 'navigationLink',
        'id_classification': 'idClassification',
        'type_uris': 'typeUris',
        'publication_statuses': 'publicationStatuses',
        'publication_categories': 'publicationCategories',
        'peer_reviewed': 'peerReviewed',
        'international_peer_reviewed': 'internationalPeerReviewed',
        'for_journals': 'forJournals',
        'for_publishers': 'forPublishers',
        'for_persons': 'forPersons',
        'for_organisational_units': 'forOrganisationalUnits',
        'workflow_steps': 'workflowSteps'
    }

    def __init__(self, search_string=None, uuids=None, size=None, offset=None, linking_strategy=None, locales=None, fallback_locales=None, renderings=None, fields=None, orderings=None, return_used_content=False, navigation_link=False, id_classification=None, type_uris=None, publication_statuses=None, publication_categories=None, peer_reviewed=False, international_peer_reviewed=False, for_journals=None, for_publishers=None, for_persons=None, for_organisational_units=None, workflow_steps=None):
        """
        WSResearchOutputsQuery - a model defined in Swagger
        """

        self._search_string = None
        self._uuids = None
        self._size = None
        self._offset = None
        self._linking_strategy = None
        self._locales = None
        self._fallback_locales = None
        self._renderings = None
        self._fields = None
        self._orderings = None
        self._return_used_content = None
        self._navigation_link = None
        self._id_classification = None
        self._type_uris = None
        self._publication_statuses = None
        self._publication_categories = None
        self._peer_reviewed = None
        self._international_peer_reviewed = None
        self._for_journals = None
        self._for_publishers = None
        self._for_persons = None
        self._for_organisational_units = None
        self._workflow_steps = None

        if search_string is not None:
          self.search_string = search_string
        if uuids is not None:
          self.uuids = uuids
        if size is not None:
          self.size = size
        if offset is not None:
          self.offset = offset
        if linking_strategy is not None:
          self.linking_strategy = linking_strategy
        if locales is not None:
          self.locales = locales
        if fallback_locales is not None:
          self.fallback_locales = fallback_locales
        if renderings is not None:
          self.renderings = renderings
        if fields is not None:
          self.fields = fields
        if orderings is not None:
          self.orderings = orderings
        if return_used_content is not None:
          self.return_used_content = return_used_content
        if navigation_link is not None:
          self.navigation_link = navigation_link
        if id_classification is not None:
          self.id_classification = id_classification
        if type_uris is not None:
          self.type_uris = type_uris
        if publication_statuses is not None:
          self.publication_statuses = publication_statuses
        if publication_categories is not None:
          self.publication_categories = publication_categories
        if peer_reviewed is not None:
          self.peer_reviewed = peer_reviewed
        if international_peer_reviewed is not None:
          self.international_peer_reviewed = international_peer_reviewed
        if for_journals is not None:
          self.for_journals = for_journals
        if for_publishers is not None:
          self.for_publishers = for_publishers
        if for_persons is not None:
          self.for_persons = for_persons
        if for_organisational_units is not None:
          self.for_organisational_units = for_organisational_units
        if workflow_steps is not None:
          self.workflow_steps = workflow_steps

    @property
    def search_string(self):
        """
        Gets the search_string of this WSResearchOutputsQuery.

        :return: The search_string of this WSResearchOutputsQuery.
        :rtype: str
        """
        return self._search_string

    @search_string.setter
    def search_string(self, search_string):
        """
        Sets the search_string of this WSResearchOutputsQuery.

        :param search_string: The search_string of this WSResearchOutputsQuery.
        :type: str
        """

        self._search_string = search_string

    @property
    def uuids(self):
        """
        Gets the uuids of this WSResearchOutputsQuery.

        :return: The uuids of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._uuids

    @uuids.setter
    def uuids(self, uuids):
        """
        Sets the uuids of this WSResearchOutputsQuery.

        :param uuids: The uuids of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._uuids = uuids

    @property
    def size(self):
        """
        Gets the size of this WSResearchOutputsQuery.

        :return: The size of this WSResearchOutputsQuery.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this WSResearchOutputsQuery.

        :param size: The size of this WSResearchOutputsQuery.
        :type: int
        """

        self._size = size

    @property
    def offset(self):
        """
        Gets the offset of this WSResearchOutputsQuery.

        :return: The offset of this WSResearchOutputsQuery.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this WSResearchOutputsQuery.

        :param offset: The offset of this WSResearchOutputsQuery.
        :type: int
        """

        self._offset = offset

    @property
    def linking_strategy(self):
        """
        Gets the linking_strategy of this WSResearchOutputsQuery.

        :return: The linking_strategy of this WSResearchOutputsQuery.
        :rtype: str
        """
        return self._linking_strategy

    @linking_strategy.setter
    def linking_strategy(self, linking_strategy):
        """
        Sets the linking_strategy of this WSResearchOutputsQuery.

        :param linking_strategy: The linking_strategy of this WSResearchOutputsQuery.
        :type: str
        """

        self._linking_strategy = linking_strategy

    @property
    def locales(self):
        """
        Gets the locales of this WSResearchOutputsQuery.

        :return: The locales of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """
        Sets the locales of this WSResearchOutputsQuery.

        :param locales: The locales of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._locales = locales

    @property
    def fallback_locales(self):
        """
        Gets the fallback_locales of this WSResearchOutputsQuery.

        :return: The fallback_locales of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._fallback_locales

    @fallback_locales.setter
    def fallback_locales(self, fallback_locales):
        """
        Sets the fallback_locales of this WSResearchOutputsQuery.

        :param fallback_locales: The fallback_locales of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._fallback_locales = fallback_locales

    @property
    def renderings(self):
        """
        Gets the renderings of this WSResearchOutputsQuery.

        :return: The renderings of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._renderings

    @renderings.setter
    def renderings(self, renderings):
        """
        Sets the renderings of this WSResearchOutputsQuery.

        :param renderings: The renderings of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._renderings = renderings

    @property
    def fields(self):
        """
        Gets the fields of this WSResearchOutputsQuery.

        :return: The fields of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this WSResearchOutputsQuery.

        :param fields: The fields of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._fields = fields

    @property
    def orderings(self):
        """
        Gets the orderings of this WSResearchOutputsQuery.

        :return: The orderings of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._orderings

    @orderings.setter
    def orderings(self, orderings):
        """
        Sets the orderings of this WSResearchOutputsQuery.

        :param orderings: The orderings of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._orderings = orderings

    @property
    def return_used_content(self):
        """
        Gets the return_used_content of this WSResearchOutputsQuery.

        :return: The return_used_content of this WSResearchOutputsQuery.
        :rtype: bool
        """
        return self._return_used_content

    @return_used_content.setter
    def return_used_content(self, return_used_content):
        """
        Sets the return_used_content of this WSResearchOutputsQuery.

        :param return_used_content: The return_used_content of this WSResearchOutputsQuery.
        :type: bool
        """

        self._return_used_content = return_used_content

    @property
    def navigation_link(self):
        """
        Gets the navigation_link of this WSResearchOutputsQuery.

        :return: The navigation_link of this WSResearchOutputsQuery.
        :rtype: bool
        """
        return self._navigation_link

    @navigation_link.setter
    def navigation_link(self, navigation_link):
        """
        Sets the navigation_link of this WSResearchOutputsQuery.

        :param navigation_link: The navigation_link of this WSResearchOutputsQuery.
        :type: bool
        """

        self._navigation_link = navigation_link

    @property
    def id_classification(self):
        """
        Gets the id_classification of this WSResearchOutputsQuery.

        :return: The id_classification of this WSResearchOutputsQuery.
        :rtype: str
        """
        return self._id_classification

    @id_classification.setter
    def id_classification(self, id_classification):
        """
        Sets the id_classification of this WSResearchOutputsQuery.

        :param id_classification: The id_classification of this WSResearchOutputsQuery.
        :type: str
        """

        self._id_classification = id_classification

    @property
    def type_uris(self):
        """
        Gets the type_uris of this WSResearchOutputsQuery.

        :return: The type_uris of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._type_uris

    @type_uris.setter
    def type_uris(self, type_uris):
        """
        Sets the type_uris of this WSResearchOutputsQuery.

        :param type_uris: The type_uris of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._type_uris = type_uris

    @property
    def publication_statuses(self):
        """
        Gets the publication_statuses of this WSResearchOutputsQuery.

        :return: The publication_statuses of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._publication_statuses

    @publication_statuses.setter
    def publication_statuses(self, publication_statuses):
        """
        Sets the publication_statuses of this WSResearchOutputsQuery.

        :param publication_statuses: The publication_statuses of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._publication_statuses = publication_statuses

    @property
    def publication_categories(self):
        """
        Gets the publication_categories of this WSResearchOutputsQuery.

        :return: The publication_categories of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._publication_categories

    @publication_categories.setter
    def publication_categories(self, publication_categories):
        """
        Sets the publication_categories of this WSResearchOutputsQuery.

        :param publication_categories: The publication_categories of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._publication_categories = publication_categories

    @property
    def peer_reviewed(self):
        """
        Gets the peer_reviewed of this WSResearchOutputsQuery.

        :return: The peer_reviewed of this WSResearchOutputsQuery.
        :rtype: bool
        """
        return self._peer_reviewed

    @peer_reviewed.setter
    def peer_reviewed(self, peer_reviewed):
        """
        Sets the peer_reviewed of this WSResearchOutputsQuery.

        :param peer_reviewed: The peer_reviewed of this WSResearchOutputsQuery.
        :type: bool
        """

        self._peer_reviewed = peer_reviewed

    @property
    def international_peer_reviewed(self):
        """
        Gets the international_peer_reviewed of this WSResearchOutputsQuery.

        :return: The international_peer_reviewed of this WSResearchOutputsQuery.
        :rtype: bool
        """
        return self._international_peer_reviewed

    @international_peer_reviewed.setter
    def international_peer_reviewed(self, international_peer_reviewed):
        """
        Sets the international_peer_reviewed of this WSResearchOutputsQuery.

        :param international_peer_reviewed: The international_peer_reviewed of this WSResearchOutputsQuery.
        :type: bool
        """

        self._international_peer_reviewed = international_peer_reviewed

    @property
    def for_journals(self):
        """
        Gets the for_journals of this WSResearchOutputsQuery.

        :return: The for_journals of this WSResearchOutputsQuery.
        :rtype: WSJournalsQuery
        """
        return self._for_journals

    @for_journals.setter
    def for_journals(self, for_journals):
        """
        Sets the for_journals of this WSResearchOutputsQuery.

        :param for_journals: The for_journals of this WSResearchOutputsQuery.
        :type: WSJournalsQuery
        """

        self._for_journals = for_journals

    @property
    def for_publishers(self):
        """
        Gets the for_publishers of this WSResearchOutputsQuery.

        :return: The for_publishers of this WSResearchOutputsQuery.
        :rtype: WSPublishersQuery
        """
        return self._for_publishers

    @for_publishers.setter
    def for_publishers(self, for_publishers):
        """
        Sets the for_publishers of this WSResearchOutputsQuery.

        :param for_publishers: The for_publishers of this WSResearchOutputsQuery.
        :type: WSPublishersQuery
        """

        self._for_publishers = for_publishers

    @property
    def for_persons(self):
        """
        Gets the for_persons of this WSResearchOutputsQuery.

        :return: The for_persons of this WSResearchOutputsQuery.
        :rtype: WSPersonsQuery
        """
        return self._for_persons

    @for_persons.setter
    def for_persons(self, for_persons):
        """
        Sets the for_persons of this WSResearchOutputsQuery.

        :param for_persons: The for_persons of this WSResearchOutputsQuery.
        :type: WSPersonsQuery
        """

        self._for_persons = for_persons

    @property
    def for_organisational_units(self):
        """
        Gets the for_organisational_units of this WSResearchOutputsQuery.

        :return: The for_organisational_units of this WSResearchOutputsQuery.
        :rtype: WSOrganisationsQuery
        """
        return self._for_organisational_units

    @for_organisational_units.setter
    def for_organisational_units(self, for_organisational_units):
        """
        Sets the for_organisational_units of this WSResearchOutputsQuery.

        :param for_organisational_units: The for_organisational_units of this WSResearchOutputsQuery.
        :type: WSOrganisationsQuery
        """

        self._for_organisational_units = for_organisational_units

    @property
    def workflow_steps(self):
        """
        Gets the workflow_steps of this WSResearchOutputsQuery.

        :return: The workflow_steps of this WSResearchOutputsQuery.
        :rtype: list[str]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """
        Sets the workflow_steps of this WSResearchOutputsQuery.

        :param workflow_steps: The workflow_steps of this WSResearchOutputsQuery.
        :type: list[str]
        """

        self._workflow_steps = workflow_steps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSResearchOutputsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
