# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cost_centers': 'list[WSClassification]',
        'classifications': 'list[WSClassification]',
        'entries': 'list[WSAccountEntry]',
        'specification': 'str',
        'budget': 'float',
        'recovery_percentage': 'float',
        'funder_contribution': 'float',
        'yearly_budgets': 'list[WSYearlyBudget]'
    }

    attribute_map = {
        'id': 'id',
        'cost_centers': 'costCenters',
        'classifications': 'classifications',
        'entries': 'entries',
        'specification': 'specification',
        'budget': 'budget',
        'recovery_percentage': 'recoveryPercentage',
        'funder_contribution': 'funderContribution',
        'yearly_budgets': 'yearlyBudgets'
    }

    def __init__(self, id=None, cost_centers=None, classifications=None, entries=None, specification=None, budget=None, recovery_percentage=None, funder_contribution=None, yearly_budgets=None):
        """
        WSAccount - a model defined in Swagger
        """

        self._id = None
        self._cost_centers = None
        self._classifications = None
        self._entries = None
        self._specification = None
        self._budget = None
        self._recovery_percentage = None
        self._funder_contribution = None
        self._yearly_budgets = None

        if id is not None:
          self.id = id
        if cost_centers is not None:
          self.cost_centers = cost_centers
        if classifications is not None:
          self.classifications = classifications
        if entries is not None:
          self.entries = entries
        if specification is not None:
          self.specification = specification
        if budget is not None:
          self.budget = budget
        if recovery_percentage is not None:
          self.recovery_percentage = recovery_percentage
        if funder_contribution is not None:
          self.funder_contribution = funder_contribution
        if yearly_budgets is not None:
          self.yearly_budgets = yearly_budgets

    @property
    def id(self):
        """
        Gets the id of this WSAccount.

        :return: The id of this WSAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSAccount.

        :param id: The id of this WSAccount.
        :type: int
        """

        self._id = id

    @property
    def cost_centers(self):
        """
        Gets the cost_centers of this WSAccount.

        :return: The cost_centers of this WSAccount.
        :rtype: list[WSClassification]
        """
        return self._cost_centers

    @cost_centers.setter
    def cost_centers(self, cost_centers):
        """
        Sets the cost_centers of this WSAccount.

        :param cost_centers: The cost_centers of this WSAccount.
        :type: list[WSClassification]
        """

        self._cost_centers = cost_centers

    @property
    def classifications(self):
        """
        Gets the classifications of this WSAccount.

        :return: The classifications of this WSAccount.
        :rtype: list[WSClassification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """
        Sets the classifications of this WSAccount.

        :param classifications: The classifications of this WSAccount.
        :type: list[WSClassification]
        """

        self._classifications = classifications

    @property
    def entries(self):
        """
        Gets the entries of this WSAccount.

        :return: The entries of this WSAccount.
        :rtype: list[WSAccountEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """
        Sets the entries of this WSAccount.

        :param entries: The entries of this WSAccount.
        :type: list[WSAccountEntry]
        """

        self._entries = entries

    @property
    def specification(self):
        """
        Gets the specification of this WSAccount.

        :return: The specification of this WSAccount.
        :rtype: str
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """
        Sets the specification of this WSAccount.

        :param specification: The specification of this WSAccount.
        :type: str
        """

        self._specification = specification

    @property
    def budget(self):
        """
        Gets the budget of this WSAccount.

        :return: The budget of this WSAccount.
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """
        Sets the budget of this WSAccount.

        :param budget: The budget of this WSAccount.
        :type: float
        """

        self._budget = budget

    @property
    def recovery_percentage(self):
        """
        Gets the recovery_percentage of this WSAccount.

        :return: The recovery_percentage of this WSAccount.
        :rtype: float
        """
        return self._recovery_percentage

    @recovery_percentage.setter
    def recovery_percentage(self, recovery_percentage):
        """
        Sets the recovery_percentage of this WSAccount.

        :param recovery_percentage: The recovery_percentage of this WSAccount.
        :type: float
        """

        self._recovery_percentage = recovery_percentage

    @property
    def funder_contribution(self):
        """
        Gets the funder_contribution of this WSAccount.

        :return: The funder_contribution of this WSAccount.
        :rtype: float
        """
        return self._funder_contribution

    @funder_contribution.setter
    def funder_contribution(self, funder_contribution):
        """
        Sets the funder_contribution of this WSAccount.

        :param funder_contribution: The funder_contribution of this WSAccount.
        :type: float
        """

        self._funder_contribution = funder_contribution

    @property
    def yearly_budgets(self):
        """
        Gets the yearly_budgets of this WSAccount.

        :return: The yearly_budgets of this WSAccount.
        :rtype: list[WSYearlyBudget]
        """
        return self._yearly_budgets

    @yearly_budgets.setter
    def yearly_budgets(self, yearly_budgets):
        """
        Sets the yearly_budgets of this WSAccount.

        :param yearly_budgets: The yearly_budgets of this WSAccount.
        :type: list[WSYearlyBudget]
        """

        self._yearly_budgets = yearly_budgets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
