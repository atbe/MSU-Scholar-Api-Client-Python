# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IntervalInteger(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min': 'int',
        'max': 'int',
        'include_min': 'bool',
        'include_max': 'bool',
        'degenerate': 'bool',
        'empty_set': 'bool',
        'bounded': 'bool',
        'un_bounded': 'bool',
        'closed': 'bool'
    }

    attribute_map = {
        'min': 'min',
        'max': 'max',
        'include_min': 'includeMin',
        'include_max': 'includeMax',
        'degenerate': 'degenerate',
        'empty_set': 'emptySet',
        'bounded': 'bounded',
        'un_bounded': 'unBounded',
        'closed': 'closed'
    }

    def __init__(self, min=None, max=None, include_min=False, include_max=False, degenerate=False, empty_set=False, bounded=False, un_bounded=False, closed=False):
        """
        IntervalInteger - a model defined in Swagger
        """

        self._min = None
        self._max = None
        self._include_min = None
        self._include_max = None
        self._degenerate = None
        self._empty_set = None
        self._bounded = None
        self._un_bounded = None
        self._closed = None

        if min is not None:
          self.min = min
        if max is not None:
          self.max = max
        if include_min is not None:
          self.include_min = include_min
        if include_max is not None:
          self.include_max = include_max
        if degenerate is not None:
          self.degenerate = degenerate
        if empty_set is not None:
          self.empty_set = empty_set
        if bounded is not None:
          self.bounded = bounded
        if un_bounded is not None:
          self.un_bounded = un_bounded
        if closed is not None:
          self.closed = closed

    @property
    def min(self):
        """
        Gets the min of this IntervalInteger.

        :return: The min of this IntervalInteger.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this IntervalInteger.

        :param min: The min of this IntervalInteger.
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """
        Gets the max of this IntervalInteger.

        :return: The max of this IntervalInteger.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this IntervalInteger.

        :param max: The max of this IntervalInteger.
        :type: int
        """

        self._max = max

    @property
    def include_min(self):
        """
        Gets the include_min of this IntervalInteger.

        :return: The include_min of this IntervalInteger.
        :rtype: bool
        """
        return self._include_min

    @include_min.setter
    def include_min(self, include_min):
        """
        Sets the include_min of this IntervalInteger.

        :param include_min: The include_min of this IntervalInteger.
        :type: bool
        """

        self._include_min = include_min

    @property
    def include_max(self):
        """
        Gets the include_max of this IntervalInteger.

        :return: The include_max of this IntervalInteger.
        :rtype: bool
        """
        return self._include_max

    @include_max.setter
    def include_max(self, include_max):
        """
        Sets the include_max of this IntervalInteger.

        :param include_max: The include_max of this IntervalInteger.
        :type: bool
        """

        self._include_max = include_max

    @property
    def degenerate(self):
        """
        Gets the degenerate of this IntervalInteger.

        :return: The degenerate of this IntervalInteger.
        :rtype: bool
        """
        return self._degenerate

    @degenerate.setter
    def degenerate(self, degenerate):
        """
        Sets the degenerate of this IntervalInteger.

        :param degenerate: The degenerate of this IntervalInteger.
        :type: bool
        """

        self._degenerate = degenerate

    @property
    def empty_set(self):
        """
        Gets the empty_set of this IntervalInteger.

        :return: The empty_set of this IntervalInteger.
        :rtype: bool
        """
        return self._empty_set

    @empty_set.setter
    def empty_set(self, empty_set):
        """
        Sets the empty_set of this IntervalInteger.

        :param empty_set: The empty_set of this IntervalInteger.
        :type: bool
        """

        self._empty_set = empty_set

    @property
    def bounded(self):
        """
        Gets the bounded of this IntervalInteger.

        :return: The bounded of this IntervalInteger.
        :rtype: bool
        """
        return self._bounded

    @bounded.setter
    def bounded(self, bounded):
        """
        Sets the bounded of this IntervalInteger.

        :param bounded: The bounded of this IntervalInteger.
        :type: bool
        """

        self._bounded = bounded

    @property
    def un_bounded(self):
        """
        Gets the un_bounded of this IntervalInteger.

        :return: The un_bounded of this IntervalInteger.
        :rtype: bool
        """
        return self._un_bounded

    @un_bounded.setter
    def un_bounded(self, un_bounded):
        """
        Sets the un_bounded of this IntervalInteger.

        :param un_bounded: The un_bounded of this IntervalInteger.
        :type: bool
        """

        self._un_bounded = un_bounded

    @property
    def closed(self):
        """
        Gets the closed of this IntervalInteger.

        :return: The closed of this IntervalInteger.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """
        Sets the closed of this IntervalInteger.

        :param closed: The closed of this IntervalInteger.
        :type: bool
        """

        self._closed = closed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IntervalInteger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
