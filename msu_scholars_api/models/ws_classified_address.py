# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSClassifiedAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'address_types': 'list[WSClassification]',
        'address_lines': 'str',
        'street': 'str',
        'building': 'str',
        'postalcode': 'str',
        'city': 'str',
        'countries': 'list[WSClassification]',
        'subdivisions': 'list[WSClassification]',
        'geo_location': 'WSGeoLocation'
    }

    attribute_map = {
        'id': 'id',
        'address_types': 'addressTypes',
        'address_lines': 'addressLines',
        'street': 'street',
        'building': 'building',
        'postalcode': 'postalcode',
        'city': 'city',
        'countries': 'countries',
        'subdivisions': 'subdivisions',
        'geo_location': 'geoLocation'
    }

    def __init__(self, id=None, address_types=None, address_lines=None, street=None, building=None, postalcode=None, city=None, countries=None, subdivisions=None, geo_location=None):
        """
        WSClassifiedAddress - a model defined in Swagger
        """

        self._id = None
        self._address_types = None
        self._address_lines = None
        self._street = None
        self._building = None
        self._postalcode = None
        self._city = None
        self._countries = None
        self._subdivisions = None
        self._geo_location = None

        if id is not None:
          self.id = id
        if address_types is not None:
          self.address_types = address_types
        if address_lines is not None:
          self.address_lines = address_lines
        if street is not None:
          self.street = street
        if building is not None:
          self.building = building
        if postalcode is not None:
          self.postalcode = postalcode
        if city is not None:
          self.city = city
        if countries is not None:
          self.countries = countries
        if subdivisions is not None:
          self.subdivisions = subdivisions
        if geo_location is not None:
          self.geo_location = geo_location

    @property
    def id(self):
        """
        Gets the id of this WSClassifiedAddress.

        :return: The id of this WSClassifiedAddress.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSClassifiedAddress.

        :param id: The id of this WSClassifiedAddress.
        :type: int
        """

        self._id = id

    @property
    def address_types(self):
        """
        Gets the address_types of this WSClassifiedAddress.

        :return: The address_types of this WSClassifiedAddress.
        :rtype: list[WSClassification]
        """
        return self._address_types

    @address_types.setter
    def address_types(self, address_types):
        """
        Sets the address_types of this WSClassifiedAddress.

        :param address_types: The address_types of this WSClassifiedAddress.
        :type: list[WSClassification]
        """

        self._address_types = address_types

    @property
    def address_lines(self):
        """
        Gets the address_lines of this WSClassifiedAddress.

        :return: The address_lines of this WSClassifiedAddress.
        :rtype: str
        """
        return self._address_lines

    @address_lines.setter
    def address_lines(self, address_lines):
        """
        Sets the address_lines of this WSClassifiedAddress.

        :param address_lines: The address_lines of this WSClassifiedAddress.
        :type: str
        """

        self._address_lines = address_lines

    @property
    def street(self):
        """
        Gets the street of this WSClassifiedAddress.

        :return: The street of this WSClassifiedAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this WSClassifiedAddress.

        :param street: The street of this WSClassifiedAddress.
        :type: str
        """

        self._street = street

    @property
    def building(self):
        """
        Gets the building of this WSClassifiedAddress.

        :return: The building of this WSClassifiedAddress.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """
        Sets the building of this WSClassifiedAddress.

        :param building: The building of this WSClassifiedAddress.
        :type: str
        """

        self._building = building

    @property
    def postalcode(self):
        """
        Gets the postalcode of this WSClassifiedAddress.

        :return: The postalcode of this WSClassifiedAddress.
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """
        Sets the postalcode of this WSClassifiedAddress.

        :param postalcode: The postalcode of this WSClassifiedAddress.
        :type: str
        """

        self._postalcode = postalcode

    @property
    def city(self):
        """
        Gets the city of this WSClassifiedAddress.

        :return: The city of this WSClassifiedAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this WSClassifiedAddress.

        :param city: The city of this WSClassifiedAddress.
        :type: str
        """

        self._city = city

    @property
    def countries(self):
        """
        Gets the countries of this WSClassifiedAddress.

        :return: The countries of this WSClassifiedAddress.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSClassifiedAddress.

        :param countries: The countries of this WSClassifiedAddress.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def subdivisions(self):
        """
        Gets the subdivisions of this WSClassifiedAddress.

        :return: The subdivisions of this WSClassifiedAddress.
        :rtype: list[WSClassification]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """
        Sets the subdivisions of this WSClassifiedAddress.

        :param subdivisions: The subdivisions of this WSClassifiedAddress.
        :type: list[WSClassification]
        """

        self._subdivisions = subdivisions

    @property
    def geo_location(self):
        """
        Gets the geo_location of this WSClassifiedAddress.

        :return: The geo_location of this WSClassifiedAddress.
        :rtype: WSGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """
        Sets the geo_location of this WSClassifiedAddress.

        :param geo_location: The geo_location of this WSClassifiedAddress.
        :type: WSGeoLocation
        """

        self._geo_location = geo_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSClassifiedAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
