# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSClassifiedAuthorAssociation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'person': 'WSPersonRef',
        'external_person': 'WSExternalPersonRef',
        'name': 'WSName',
        'person_role': 'list[WSClassification]',
        'organisational_units': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'group_author': 'str',
        'contribution_description': 'str',
        'contribution_percentage': 'float',
        'countries': 'list[WSClassification]',
        'hidden': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'person': 'person',
        'external_person': 'externalPerson',
        'name': 'name',
        'person_role': 'personRole',
        'organisational_units': 'organisationalUnits',
        'external_organisations': 'externalOrganisations',
        'group_author': 'groupAuthor',
        'contribution_description': 'contributionDescription',
        'contribution_percentage': 'contributionPercentage',
        'countries': 'countries',
        'hidden': 'hidden'
    }

    def __init__(self, id=None, person=None, external_person=None, name=None, person_role=None, organisational_units=None, external_organisations=None, group_author=None, contribution_description=None, contribution_percentage=None, countries=None, hidden=False):
        """
        WSClassifiedAuthorAssociation - a model defined in Swagger
        """

        self._id = None
        self._person = None
        self._external_person = None
        self._name = None
        self._person_role = None
        self._organisational_units = None
        self._external_organisations = None
        self._group_author = None
        self._contribution_description = None
        self._contribution_percentage = None
        self._countries = None
        self._hidden = None

        if id is not None:
          self.id = id
        if person is not None:
          self.person = person
        if external_person is not None:
          self.external_person = external_person
        if name is not None:
          self.name = name
        if person_role is not None:
          self.person_role = person_role
        if organisational_units is not None:
          self.organisational_units = organisational_units
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if group_author is not None:
          self.group_author = group_author
        if contribution_description is not None:
          self.contribution_description = contribution_description
        if contribution_percentage is not None:
          self.contribution_percentage = contribution_percentage
        if countries is not None:
          self.countries = countries
        if hidden is not None:
          self.hidden = hidden

    @property
    def id(self):
        """
        Gets the id of this WSClassifiedAuthorAssociation.

        :return: The id of this WSClassifiedAuthorAssociation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSClassifiedAuthorAssociation.

        :param id: The id of this WSClassifiedAuthorAssociation.
        :type: int
        """

        self._id = id

    @property
    def person(self):
        """
        Gets the person of this WSClassifiedAuthorAssociation.

        :return: The person of this WSClassifiedAuthorAssociation.
        :rtype: WSPersonRef
        """
        return self._person

    @person.setter
    def person(self, person):
        """
        Sets the person of this WSClassifiedAuthorAssociation.

        :param person: The person of this WSClassifiedAuthorAssociation.
        :type: WSPersonRef
        """

        self._person = person

    @property
    def external_person(self):
        """
        Gets the external_person of this WSClassifiedAuthorAssociation.

        :return: The external_person of this WSClassifiedAuthorAssociation.
        :rtype: WSExternalPersonRef
        """
        return self._external_person

    @external_person.setter
    def external_person(self, external_person):
        """
        Sets the external_person of this WSClassifiedAuthorAssociation.

        :param external_person: The external_person of this WSClassifiedAuthorAssociation.
        :type: WSExternalPersonRef
        """

        self._external_person = external_person

    @property
    def name(self):
        """
        Gets the name of this WSClassifiedAuthorAssociation.

        :return: The name of this WSClassifiedAuthorAssociation.
        :rtype: WSName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSClassifiedAuthorAssociation.

        :param name: The name of this WSClassifiedAuthorAssociation.
        :type: WSName
        """

        self._name = name

    @property
    def person_role(self):
        """
        Gets the person_role of this WSClassifiedAuthorAssociation.

        :return: The person_role of this WSClassifiedAuthorAssociation.
        :rtype: list[WSClassification]
        """
        return self._person_role

    @person_role.setter
    def person_role(self, person_role):
        """
        Sets the person_role of this WSClassifiedAuthorAssociation.

        :param person_role: The person_role of this WSClassifiedAuthorAssociation.
        :type: list[WSClassification]
        """

        self._person_role = person_role

    @property
    def organisational_units(self):
        """
        Gets the organisational_units of this WSClassifiedAuthorAssociation.

        :return: The organisational_units of this WSClassifiedAuthorAssociation.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisational_units

    @organisational_units.setter
    def organisational_units(self, organisational_units):
        """
        Sets the organisational_units of this WSClassifiedAuthorAssociation.

        :param organisational_units: The organisational_units of this WSClassifiedAuthorAssociation.
        :type: list[WSOrganisationRef]
        """

        self._organisational_units = organisational_units

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSClassifiedAuthorAssociation.

        :return: The external_organisations of this WSClassifiedAuthorAssociation.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSClassifiedAuthorAssociation.

        :param external_organisations: The external_organisations of this WSClassifiedAuthorAssociation.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def group_author(self):
        """
        Gets the group_author of this WSClassifiedAuthorAssociation.

        :return: The group_author of this WSClassifiedAuthorAssociation.
        :rtype: str
        """
        return self._group_author

    @group_author.setter
    def group_author(self, group_author):
        """
        Sets the group_author of this WSClassifiedAuthorAssociation.

        :param group_author: The group_author of this WSClassifiedAuthorAssociation.
        :type: str
        """

        self._group_author = group_author

    @property
    def contribution_description(self):
        """
        Gets the contribution_description of this WSClassifiedAuthorAssociation.

        :return: The contribution_description of this WSClassifiedAuthorAssociation.
        :rtype: str
        """
        return self._contribution_description

    @contribution_description.setter
    def contribution_description(self, contribution_description):
        """
        Sets the contribution_description of this WSClassifiedAuthorAssociation.

        :param contribution_description: The contribution_description of this WSClassifiedAuthorAssociation.
        :type: str
        """

        self._contribution_description = contribution_description

    @property
    def contribution_percentage(self):
        """
        Gets the contribution_percentage of this WSClassifiedAuthorAssociation.

        :return: The contribution_percentage of this WSClassifiedAuthorAssociation.
        :rtype: float
        """
        return self._contribution_percentage

    @contribution_percentage.setter
    def contribution_percentage(self, contribution_percentage):
        """
        Sets the contribution_percentage of this WSClassifiedAuthorAssociation.

        :param contribution_percentage: The contribution_percentage of this WSClassifiedAuthorAssociation.
        :type: float
        """

        self._contribution_percentage = contribution_percentage

    @property
    def countries(self):
        """
        Gets the countries of this WSClassifiedAuthorAssociation.

        :return: The countries of this WSClassifiedAuthorAssociation.
        :rtype: list[WSClassification]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this WSClassifiedAuthorAssociation.

        :param countries: The countries of this WSClassifiedAuthorAssociation.
        :type: list[WSClassification]
        """

        self._countries = countries

    @property
    def hidden(self):
        """
        Gets the hidden of this WSClassifiedAuthorAssociation.

        :return: The hidden of this WSClassifiedAuthorAssociation.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this WSClassifiedAuthorAssociation.

        :param hidden: The hidden of this WSClassifiedAuthorAssociation.
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSClassifiedAuthorAssociation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
