# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSClassificationScheme(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'base_uri': 'str',
        'type_classifications': 'list[WSClassification]',
        'descriptions': 'list[WSLocalizedString]',
        'associated_schemes': 'list[WSClassificationSchemeRef]',
        'contained_classifications': 'list[WSClassification]',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'base_uri': 'baseUri',
        'type_classifications': 'typeClassifications',
        'descriptions': 'descriptions',
        'associated_schemes': 'associatedSchemes',
        'contained_classifications': 'containedClassifications',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, base_uri=None, type_classifications=None, descriptions=None, associated_schemes=None, contained_classifications=None, info=None):
        """
        WSClassificationScheme - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._base_uri = None
        self._type_classifications = None
        self._descriptions = None
        self._associated_schemes = None
        self._contained_classifications = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if base_uri is not None:
          self.base_uri = base_uri
        if type_classifications is not None:
          self.type_classifications = type_classifications
        if descriptions is not None:
          self.descriptions = descriptions
        if associated_schemes is not None:
          self.associated_schemes = associated_schemes
        if contained_classifications is not None:
          self.contained_classifications = contained_classifications
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSClassificationScheme.

        :return: The uuid of this WSClassificationScheme.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSClassificationScheme.

        :param uuid: The uuid of this WSClassificationScheme.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSClassificationScheme.

        :return: The html_renderings of this WSClassificationScheme.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSClassificationScheme.

        :param html_renderings: The html_renderings of this WSClassificationScheme.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def base_uri(self):
        """
        Gets the base_uri of this WSClassificationScheme.

        :return: The base_uri of this WSClassificationScheme.
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """
        Sets the base_uri of this WSClassificationScheme.

        :param base_uri: The base_uri of this WSClassificationScheme.
        :type: str
        """

        self._base_uri = base_uri

    @property
    def type_classifications(self):
        """
        Gets the type_classifications of this WSClassificationScheme.

        :return: The type_classifications of this WSClassificationScheme.
        :rtype: list[WSClassification]
        """
        return self._type_classifications

    @type_classifications.setter
    def type_classifications(self, type_classifications):
        """
        Sets the type_classifications of this WSClassificationScheme.

        :param type_classifications: The type_classifications of this WSClassificationScheme.
        :type: list[WSClassification]
        """

        self._type_classifications = type_classifications

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSClassificationScheme.

        :return: The descriptions of this WSClassificationScheme.
        :rtype: list[WSLocalizedString]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSClassificationScheme.

        :param descriptions: The descriptions of this WSClassificationScheme.
        :type: list[WSLocalizedString]
        """

        self._descriptions = descriptions

    @property
    def associated_schemes(self):
        """
        Gets the associated_schemes of this WSClassificationScheme.

        :return: The associated_schemes of this WSClassificationScheme.
        :rtype: list[WSClassificationSchemeRef]
        """
        return self._associated_schemes

    @associated_schemes.setter
    def associated_schemes(self, associated_schemes):
        """
        Sets the associated_schemes of this WSClassificationScheme.

        :param associated_schemes: The associated_schemes of this WSClassificationScheme.
        :type: list[WSClassificationSchemeRef]
        """

        self._associated_schemes = associated_schemes

    @property
    def contained_classifications(self):
        """
        Gets the contained_classifications of this WSClassificationScheme.

        :return: The contained_classifications of this WSClassificationScheme.
        :rtype: list[WSClassification]
        """
        return self._contained_classifications

    @contained_classifications.setter
    def contained_classifications(self, contained_classifications):
        """
        Sets the contained_classifications of this WSClassificationScheme.

        :param contained_classifications: The contained_classifications of this WSClassificationScheme.
        :type: list[WSClassification]
        """

        self._contained_classifications = contained_classifications

    @property
    def info(self):
        """
        Gets the info of this WSClassificationScheme.

        :return: The info of this WSClassificationScheme.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSClassificationScheme.

        :param info: The info of this WSClassificationScheme.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSClassificationScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
