# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSEthicalReview(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'replies': 'list[WSEthicalReviewReply]',
        'classified_sources': 'list[WSClassifiedValue]',
        'related_application': 'WSApplicationRef',
        'person_associations': 'list[WSClassifiedPersonAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'documents': 'list[WSEthicalReviewDocument]',
        'links': 'list[WSLink]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'confidential': 'bool',
        'visibilities': 'list[WSVisibility]',
        'workflows': 'list[WSWorkflow]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'descriptions': 'descriptions',
        'replies': 'replies',
        'classified_sources': 'classifiedSources',
        'related_application': 'relatedApplication',
        'person_associations': 'personAssociations',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'documents': 'documents',
        'links': 'links',
        'keyword_groups': 'keywordGroups',
        'confidential': 'confidential',
        'visibilities': 'visibilities',
        'workflows': 'workflows',
        'externalable_info': 'externalableInfo',
        'info': 'info'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, descriptions=None, replies=None, classified_sources=None, related_application=None, person_associations=None, organisations=None, external_organisations=None, managing_organisational_unit=None, documents=None, links=None, keyword_groups=None, confidential=False, visibilities=None, workflows=None, externalable_info=None, info=None):
        """
        WSEthicalReview - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._descriptions = None
        self._replies = None
        self._classified_sources = None
        self._related_application = None
        self._person_associations = None
        self._organisations = None
        self._external_organisations = None
        self._managing_organisational_unit = None
        self._documents = None
        self._links = None
        self._keyword_groups = None
        self._confidential = None
        self._visibilities = None
        self._workflows = None
        self._externalable_info = None
        self._info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if descriptions is not None:
          self.descriptions = descriptions
        if replies is not None:
          self.replies = replies
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if related_application is not None:
          self.related_application = related_application
        if person_associations is not None:
          self.person_associations = person_associations
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if documents is not None:
          self.documents = documents
        if links is not None:
          self.links = links
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if confidential is not None:
          self.confidential = confidential
        if visibilities is not None:
          self.visibilities = visibilities
        if workflows is not None:
          self.workflows = workflows
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSEthicalReview.

        :return: The uuid of this WSEthicalReview.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSEthicalReview.

        :param uuid: The uuid of this WSEthicalReview.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSEthicalReview.

        :return: The html_renderings of this WSEthicalReview.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSEthicalReview.

        :param html_renderings: The html_renderings of this WSEthicalReview.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSEthicalReview.

        :return: The titles of this WSEthicalReview.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSEthicalReview.

        :param titles: The titles of this WSEthicalReview.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSEthicalReview.

        :return: The types of this WSEthicalReview.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSEthicalReview.

        :param types: The types of this WSEthicalReview.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSEthicalReview.

        :return: The descriptions of this WSEthicalReview.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSEthicalReview.

        :param descriptions: The descriptions of this WSEthicalReview.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def replies(self):
        """
        Gets the replies of this WSEthicalReview.

        :return: The replies of this WSEthicalReview.
        :rtype: list[WSEthicalReviewReply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """
        Sets the replies of this WSEthicalReview.

        :param replies: The replies of this WSEthicalReview.
        :type: list[WSEthicalReviewReply]
        """

        self._replies = replies

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSEthicalReview.

        :return: The classified_sources of this WSEthicalReview.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSEthicalReview.

        :param classified_sources: The classified_sources of this WSEthicalReview.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def related_application(self):
        """
        Gets the related_application of this WSEthicalReview.

        :return: The related_application of this WSEthicalReview.
        :rtype: WSApplicationRef
        """
        return self._related_application

    @related_application.setter
    def related_application(self, related_application):
        """
        Sets the related_application of this WSEthicalReview.

        :param related_application: The related_application of this WSEthicalReview.
        :type: WSApplicationRef
        """

        self._related_application = related_application

    @property
    def person_associations(self):
        """
        Gets the person_associations of this WSEthicalReview.

        :return: The person_associations of this WSEthicalReview.
        :rtype: list[WSClassifiedPersonAssociation]
        """
        return self._person_associations

    @person_associations.setter
    def person_associations(self, person_associations):
        """
        Sets the person_associations of this WSEthicalReview.

        :param person_associations: The person_associations of this WSEthicalReview.
        :type: list[WSClassifiedPersonAssociation]
        """

        self._person_associations = person_associations

    @property
    def organisations(self):
        """
        Gets the organisations of this WSEthicalReview.

        :return: The organisations of this WSEthicalReview.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSEthicalReview.

        :param organisations: The organisations of this WSEthicalReview.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSEthicalReview.

        :return: The external_organisations of this WSEthicalReview.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSEthicalReview.

        :param external_organisations: The external_organisations of this WSEthicalReview.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSEthicalReview.

        :return: The managing_organisational_unit of this WSEthicalReview.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSEthicalReview.

        :param managing_organisational_unit: The managing_organisational_unit of this WSEthicalReview.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def documents(self):
        """
        Gets the documents of this WSEthicalReview.

        :return: The documents of this WSEthicalReview.
        :rtype: list[WSEthicalReviewDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """
        Sets the documents of this WSEthicalReview.

        :param documents: The documents of this WSEthicalReview.
        :type: list[WSEthicalReviewDocument]
        """

        self._documents = documents

    @property
    def links(self):
        """
        Gets the links of this WSEthicalReview.

        :return: The links of this WSEthicalReview.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSEthicalReview.

        :param links: The links of this WSEthicalReview.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSEthicalReview.

        :return: The keyword_groups of this WSEthicalReview.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSEthicalReview.

        :param keyword_groups: The keyword_groups of this WSEthicalReview.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def confidential(self):
        """
        Gets the confidential of this WSEthicalReview.

        :return: The confidential of this WSEthicalReview.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSEthicalReview.

        :param confidential: The confidential of this WSEthicalReview.
        :type: bool
        """

        self._confidential = confidential

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSEthicalReview.

        :return: The visibilities of this WSEthicalReview.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSEthicalReview.

        :param visibilities: The visibilities of this WSEthicalReview.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def workflows(self):
        """
        Gets the workflows of this WSEthicalReview.

        :return: The workflows of this WSEthicalReview.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSEthicalReview.

        :param workflows: The workflows of this WSEthicalReview.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSEthicalReview.

        :return: The externalable_info of this WSEthicalReview.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSEthicalReview.

        :param externalable_info: The externalable_info of this WSEthicalReview.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSEthicalReview.

        :return: The info of this WSEthicalReview.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSEthicalReview.

        :param info: The info of this WSEthicalReview.
        :type: WSContentInformation
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSEthicalReview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
