# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSCourse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'titles': 'list[WSLocalizedString]',
        'types': 'list[WSClassification]',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'period': 'WSDateRange',
        'levels': 'list[WSClassification]',
        'formats': 'list[WSClassification]',
        'classified_sources': 'list[WSClassifiedValue]',
        'creators': 'list[WSClassifiedCourseDevelopedByAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'occurrences': 'list[WSCourseOccurrence]',
        'visibilities': 'list[WSVisibility]',
        'workflows': 'list[WSWorkflow]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'info': 'WSContentInformation',
        'externalable_info': 'WSExternalableInformation'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'titles': 'titles',
        'types': 'types',
        'descriptions': 'descriptions',
        'period': 'period',
        'levels': 'levels',
        'formats': 'formats',
        'classified_sources': 'classifiedSources',
        'creators': 'creators',
        'organisations': 'organisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'occurrences': 'occurrences',
        'visibilities': 'visibilities',
        'workflows': 'workflows',
        'keyword_groups': 'keywordGroups',
        'info': 'info',
        'externalable_info': 'externalableInfo'
    }

    def __init__(self, uuid=None, html_renderings=None, titles=None, types=None, descriptions=None, period=None, levels=None, formats=None, classified_sources=None, creators=None, organisations=None, managing_organisational_unit=None, occurrences=None, visibilities=None, workflows=None, keyword_groups=None, info=None, externalable_info=None):
        """
        WSCourse - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._titles = None
        self._types = None
        self._descriptions = None
        self._period = None
        self._levels = None
        self._formats = None
        self._classified_sources = None
        self._creators = None
        self._organisations = None
        self._managing_organisational_unit = None
        self._occurrences = None
        self._visibilities = None
        self._workflows = None
        self._keyword_groups = None
        self._info = None
        self._externalable_info = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if titles is not None:
          self.titles = titles
        if types is not None:
          self.types = types
        if descriptions is not None:
          self.descriptions = descriptions
        if period is not None:
          self.period = period
        if levels is not None:
          self.levels = levels
        if formats is not None:
          self.formats = formats
        if classified_sources is not None:
          self.classified_sources = classified_sources
        if creators is not None:
          self.creators = creators
        if organisations is not None:
          self.organisations = organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if occurrences is not None:
          self.occurrences = occurrences
        if visibilities is not None:
          self.visibilities = visibilities
        if workflows is not None:
          self.workflows = workflows
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if info is not None:
          self.info = info
        if externalable_info is not None:
          self.externalable_info = externalable_info

    @property
    def uuid(self):
        """
        Gets the uuid of this WSCourse.

        :return: The uuid of this WSCourse.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSCourse.

        :param uuid: The uuid of this WSCourse.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSCourse.

        :return: The html_renderings of this WSCourse.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSCourse.

        :param html_renderings: The html_renderings of this WSCourse.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def titles(self):
        """
        Gets the titles of this WSCourse.

        :return: The titles of this WSCourse.
        :rtype: list[WSLocalizedString]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this WSCourse.

        :param titles: The titles of this WSCourse.
        :type: list[WSLocalizedString]
        """

        self._titles = titles

    @property
    def types(self):
        """
        Gets the types of this WSCourse.

        :return: The types of this WSCourse.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSCourse.

        :param types: The types of this WSCourse.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSCourse.

        :return: The descriptions of this WSCourse.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSCourse.

        :param descriptions: The descriptions of this WSCourse.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def period(self):
        """
        Gets the period of this WSCourse.

        :return: The period of this WSCourse.
        :rtype: WSDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSCourse.

        :param period: The period of this WSCourse.
        :type: WSDateRange
        """

        self._period = period

    @property
    def levels(self):
        """
        Gets the levels of this WSCourse.

        :return: The levels of this WSCourse.
        :rtype: list[WSClassification]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """
        Sets the levels of this WSCourse.

        :param levels: The levels of this WSCourse.
        :type: list[WSClassification]
        """

        self._levels = levels

    @property
    def formats(self):
        """
        Gets the formats of this WSCourse.

        :return: The formats of this WSCourse.
        :rtype: list[WSClassification]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """
        Sets the formats of this WSCourse.

        :param formats: The formats of this WSCourse.
        :type: list[WSClassification]
        """

        self._formats = formats

    @property
    def classified_sources(self):
        """
        Gets the classified_sources of this WSCourse.

        :return: The classified_sources of this WSCourse.
        :rtype: list[WSClassifiedValue]
        """
        return self._classified_sources

    @classified_sources.setter
    def classified_sources(self, classified_sources):
        """
        Sets the classified_sources of this WSCourse.

        :param classified_sources: The classified_sources of this WSCourse.
        :type: list[WSClassifiedValue]
        """

        self._classified_sources = classified_sources

    @property
    def creators(self):
        """
        Gets the creators of this WSCourse.

        :return: The creators of this WSCourse.
        :rtype: list[WSClassifiedCourseDevelopedByAssociation]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """
        Sets the creators of this WSCourse.

        :param creators: The creators of this WSCourse.
        :type: list[WSClassifiedCourseDevelopedByAssociation]
        """

        self._creators = creators

    @property
    def organisations(self):
        """
        Gets the organisations of this WSCourse.

        :return: The organisations of this WSCourse.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSCourse.

        :param organisations: The organisations of this WSCourse.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSCourse.

        :return: The managing_organisational_unit of this WSCourse.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSCourse.

        :param managing_organisational_unit: The managing_organisational_unit of this WSCourse.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def occurrences(self):
        """
        Gets the occurrences of this WSCourse.

        :return: The occurrences of this WSCourse.
        :rtype: list[WSCourseOccurrence]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """
        Sets the occurrences of this WSCourse.

        :param occurrences: The occurrences of this WSCourse.
        :type: list[WSCourseOccurrence]
        """

        self._occurrences = occurrences

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSCourse.

        :return: The visibilities of this WSCourse.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSCourse.

        :param visibilities: The visibilities of this WSCourse.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def workflows(self):
        """
        Gets the workflows of this WSCourse.

        :return: The workflows of this WSCourse.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSCourse.

        :param workflows: The workflows of this WSCourse.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSCourse.

        :return: The keyword_groups of this WSCourse.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSCourse.

        :param keyword_groups: The keyword_groups of this WSCourse.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def info(self):
        """
        Gets the info of this WSCourse.

        :return: The info of this WSCourse.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSCourse.

        :param info: The info of this WSCourse.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSCourse.

        :return: The externalable_info of this WSCourse.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSCourse.

        :param externalable_info: The externalable_info of this WSCourse.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSCourse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
