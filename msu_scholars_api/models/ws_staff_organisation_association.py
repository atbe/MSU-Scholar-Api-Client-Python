# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSStaffOrganisationAssociation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'person': 'WSPersonRef',
        'affiliation_id': 'str',
        'addresses': 'list[WSClassifiedAddress]',
        'emails': 'list[WSClassifiedValue]',
        'phone_numbers': 'list[WSClassifiedValue]',
        'employment_type': 'list[WSClassification]',
        'web_addresses': 'list[WSClassifiedLocalizedValue]',
        'organisational_unit': 'WSOrganisationRef',
        'period': 'WSDateRange',
        'keyword_groups': 'list[WSKeywordGroup]',
        'contract_types': 'list[WSClassification]',
        'staff_types': 'list[WSClassification]',
        'job_descriptions': 'list[WSLocalizedString]',
        'job_titles': 'list[WSClassification]',
        'fte': 'float',
        'primary_association': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'person': 'person',
        'affiliation_id': 'affiliationId',
        'addresses': 'addresses',
        'emails': 'emails',
        'phone_numbers': 'phoneNumbers',
        'employment_type': 'employmentType',
        'web_addresses': 'webAddresses',
        'organisational_unit': 'organisationalUnit',
        'period': 'period',
        'keyword_groups': 'keywordGroups',
        'contract_types': 'contractTypes',
        'staff_types': 'staffTypes',
        'job_descriptions': 'jobDescriptions',
        'job_titles': 'jobTitles',
        'fte': 'fte',
        'primary_association': 'primaryAssociation'
    }

    def __init__(self, id=None, person=None, affiliation_id=None, addresses=None, emails=None, phone_numbers=None, employment_type=None, web_addresses=None, organisational_unit=None, period=None, keyword_groups=None, contract_types=None, staff_types=None, job_descriptions=None, job_titles=None, fte=None, primary_association=False):
        """
        WSStaffOrganisationAssociation - a model defined in Swagger
        """

        self._id = None
        self._person = None
        self._affiliation_id = None
        self._addresses = None
        self._emails = None
        self._phone_numbers = None
        self._employment_type = None
        self._web_addresses = None
        self._organisational_unit = None
        self._period = None
        self._keyword_groups = None
        self._contract_types = None
        self._staff_types = None
        self._job_descriptions = None
        self._job_titles = None
        self._fte = None
        self._primary_association = None

        if id is not None:
          self.id = id
        if person is not None:
          self.person = person
        if affiliation_id is not None:
          self.affiliation_id = affiliation_id
        if addresses is not None:
          self.addresses = addresses
        if emails is not None:
          self.emails = emails
        if phone_numbers is not None:
          self.phone_numbers = phone_numbers
        if employment_type is not None:
          self.employment_type = employment_type
        if web_addresses is not None:
          self.web_addresses = web_addresses
        if organisational_unit is not None:
          self.organisational_unit = organisational_unit
        if period is not None:
          self.period = period
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if contract_types is not None:
          self.contract_types = contract_types
        if staff_types is not None:
          self.staff_types = staff_types
        if job_descriptions is not None:
          self.job_descriptions = job_descriptions
        if job_titles is not None:
          self.job_titles = job_titles
        if fte is not None:
          self.fte = fte
        if primary_association is not None:
          self.primary_association = primary_association

    @property
    def id(self):
        """
        Gets the id of this WSStaffOrganisationAssociation.

        :return: The id of this WSStaffOrganisationAssociation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSStaffOrganisationAssociation.

        :param id: The id of this WSStaffOrganisationAssociation.
        :type: int
        """

        self._id = id

    @property
    def person(self):
        """
        Gets the person of this WSStaffOrganisationAssociation.

        :return: The person of this WSStaffOrganisationAssociation.
        :rtype: WSPersonRef
        """
        return self._person

    @person.setter
    def person(self, person):
        """
        Sets the person of this WSStaffOrganisationAssociation.

        :param person: The person of this WSStaffOrganisationAssociation.
        :type: WSPersonRef
        """

        self._person = person

    @property
    def affiliation_id(self):
        """
        Gets the affiliation_id of this WSStaffOrganisationAssociation.

        :return: The affiliation_id of this WSStaffOrganisationAssociation.
        :rtype: str
        """
        return self._affiliation_id

    @affiliation_id.setter
    def affiliation_id(self, affiliation_id):
        """
        Sets the affiliation_id of this WSStaffOrganisationAssociation.

        :param affiliation_id: The affiliation_id of this WSStaffOrganisationAssociation.
        :type: str
        """

        self._affiliation_id = affiliation_id

    @property
    def addresses(self):
        """
        Gets the addresses of this WSStaffOrganisationAssociation.

        :return: The addresses of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassifiedAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this WSStaffOrganisationAssociation.

        :param addresses: The addresses of this WSStaffOrganisationAssociation.
        :type: list[WSClassifiedAddress]
        """

        self._addresses = addresses

    @property
    def emails(self):
        """
        Gets the emails of this WSStaffOrganisationAssociation.

        :return: The emails of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassifiedValue]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """
        Sets the emails of this WSStaffOrganisationAssociation.

        :param emails: The emails of this WSStaffOrganisationAssociation.
        :type: list[WSClassifiedValue]
        """

        self._emails = emails

    @property
    def phone_numbers(self):
        """
        Gets the phone_numbers of this WSStaffOrganisationAssociation.

        :return: The phone_numbers of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassifiedValue]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """
        Sets the phone_numbers of this WSStaffOrganisationAssociation.

        :param phone_numbers: The phone_numbers of this WSStaffOrganisationAssociation.
        :type: list[WSClassifiedValue]
        """

        self._phone_numbers = phone_numbers

    @property
    def employment_type(self):
        """
        Gets the employment_type of this WSStaffOrganisationAssociation.

        :return: The employment_type of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassification]
        """
        return self._employment_type

    @employment_type.setter
    def employment_type(self, employment_type):
        """
        Sets the employment_type of this WSStaffOrganisationAssociation.

        :param employment_type: The employment_type of this WSStaffOrganisationAssociation.
        :type: list[WSClassification]
        """

        self._employment_type = employment_type

    @property
    def web_addresses(self):
        """
        Gets the web_addresses of this WSStaffOrganisationAssociation.

        :return: The web_addresses of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._web_addresses

    @web_addresses.setter
    def web_addresses(self, web_addresses):
        """
        Sets the web_addresses of this WSStaffOrganisationAssociation.

        :param web_addresses: The web_addresses of this WSStaffOrganisationAssociation.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._web_addresses = web_addresses

    @property
    def organisational_unit(self):
        """
        Gets the organisational_unit of this WSStaffOrganisationAssociation.

        :return: The organisational_unit of this WSStaffOrganisationAssociation.
        :rtype: WSOrganisationRef
        """
        return self._organisational_unit

    @organisational_unit.setter
    def organisational_unit(self, organisational_unit):
        """
        Sets the organisational_unit of this WSStaffOrganisationAssociation.

        :param organisational_unit: The organisational_unit of this WSStaffOrganisationAssociation.
        :type: WSOrganisationRef
        """

        self._organisational_unit = organisational_unit

    @property
    def period(self):
        """
        Gets the period of this WSStaffOrganisationAssociation.

        :return: The period of this WSStaffOrganisationAssociation.
        :rtype: WSDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSStaffOrganisationAssociation.

        :param period: The period of this WSStaffOrganisationAssociation.
        :type: WSDateRange
        """

        self._period = period

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSStaffOrganisationAssociation.

        :return: The keyword_groups of this WSStaffOrganisationAssociation.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSStaffOrganisationAssociation.

        :param keyword_groups: The keyword_groups of this WSStaffOrganisationAssociation.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def contract_types(self):
        """
        Gets the contract_types of this WSStaffOrganisationAssociation.

        :return: The contract_types of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassification]
        """
        return self._contract_types

    @contract_types.setter
    def contract_types(self, contract_types):
        """
        Sets the contract_types of this WSStaffOrganisationAssociation.

        :param contract_types: The contract_types of this WSStaffOrganisationAssociation.
        :type: list[WSClassification]
        """

        self._contract_types = contract_types

    @property
    def staff_types(self):
        """
        Gets the staff_types of this WSStaffOrganisationAssociation.

        :return: The staff_types of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassification]
        """
        return self._staff_types

    @staff_types.setter
    def staff_types(self, staff_types):
        """
        Sets the staff_types of this WSStaffOrganisationAssociation.

        :param staff_types: The staff_types of this WSStaffOrganisationAssociation.
        :type: list[WSClassification]
        """

        self._staff_types = staff_types

    @property
    def job_descriptions(self):
        """
        Gets the job_descriptions of this WSStaffOrganisationAssociation.

        :return: The job_descriptions of this WSStaffOrganisationAssociation.
        :rtype: list[WSLocalizedString]
        """
        return self._job_descriptions

    @job_descriptions.setter
    def job_descriptions(self, job_descriptions):
        """
        Sets the job_descriptions of this WSStaffOrganisationAssociation.

        :param job_descriptions: The job_descriptions of this WSStaffOrganisationAssociation.
        :type: list[WSLocalizedString]
        """

        self._job_descriptions = job_descriptions

    @property
    def job_titles(self):
        """
        Gets the job_titles of this WSStaffOrganisationAssociation.

        :return: The job_titles of this WSStaffOrganisationAssociation.
        :rtype: list[WSClassification]
        """
        return self._job_titles

    @job_titles.setter
    def job_titles(self, job_titles):
        """
        Sets the job_titles of this WSStaffOrganisationAssociation.

        :param job_titles: The job_titles of this WSStaffOrganisationAssociation.
        :type: list[WSClassification]
        """

        self._job_titles = job_titles

    @property
    def fte(self):
        """
        Gets the fte of this WSStaffOrganisationAssociation.

        :return: The fte of this WSStaffOrganisationAssociation.
        :rtype: float
        """
        return self._fte

    @fte.setter
    def fte(self, fte):
        """
        Sets the fte of this WSStaffOrganisationAssociation.

        :param fte: The fte of this WSStaffOrganisationAssociation.
        :type: float
        """

        self._fte = fte

    @property
    def primary_association(self):
        """
        Gets the primary_association of this WSStaffOrganisationAssociation.

        :return: The primary_association of this WSStaffOrganisationAssociation.
        :rtype: bool
        """
        return self._primary_association

    @primary_association.setter
    def primary_association(self, primary_association):
        """
        Sets the primary_association of this WSStaffOrganisationAssociation.

        :param primary_association: The primary_association of this WSStaffOrganisationAssociation.
        :type: bool
        """

        self._primary_association = primary_association

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSStaffOrganisationAssociation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
