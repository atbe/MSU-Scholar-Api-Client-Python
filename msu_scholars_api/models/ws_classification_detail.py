# coding: utf-8

"""
    Pure API 511

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/><br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issued with a given set of available endpoints.<br/>To enter your API key and begin your use, press the 'Authorize' button to at the top of this page. <br/>You are then presented with two options for entering the API key: <ol><li>Use the API key in query format.</li><li>Use the API key in a header.</li><br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/><br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.15.<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13.

    OpenAPI spec version: 511
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSClassificationDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pure_id': 'int',
        'external_id': 'str',
        'external_id_source': 'str',
        'externally_managed': 'bool',
        'uri': 'str',
        'disabled': 'bool',
        'terms': 'list[WSLocalizedString]',
        'descriptions': 'list[WSLocalizedString]',
        'classification_relations': 'list[WSClassificationRelation]'
    }

    attribute_map = {
        'pure_id': 'pureId',
        'external_id': 'externalId',
        'external_id_source': 'externalIdSource',
        'externally_managed': 'externallyManaged',
        'uri': 'uri',
        'disabled': 'disabled',
        'terms': 'terms',
        'descriptions': 'descriptions',
        'classification_relations': 'classificationRelations'
    }

    def __init__(self, pure_id=None, external_id=None, external_id_source=None, externally_managed=False, uri=None, disabled=False, terms=None, descriptions=None, classification_relations=None):
        """
        WSClassificationDetail - a model defined in Swagger
        """

        self._pure_id = None
        self._external_id = None
        self._external_id_source = None
        self._externally_managed = None
        self._uri = None
        self._disabled = None
        self._terms = None
        self._descriptions = None
        self._classification_relations = None

        if pure_id is not None:
          self.pure_id = pure_id
        if external_id is not None:
          self.external_id = external_id
        if external_id_source is not None:
          self.external_id_source = external_id_source
        if externally_managed is not None:
          self.externally_managed = externally_managed
        if uri is not None:
          self.uri = uri
        if disabled is not None:
          self.disabled = disabled
        if terms is not None:
          self.terms = terms
        if descriptions is not None:
          self.descriptions = descriptions
        if classification_relations is not None:
          self.classification_relations = classification_relations

    @property
    def pure_id(self):
        """
        Gets the pure_id of this WSClassificationDetail.

        :return: The pure_id of this WSClassificationDetail.
        :rtype: int
        """
        return self._pure_id

    @pure_id.setter
    def pure_id(self, pure_id):
        """
        Sets the pure_id of this WSClassificationDetail.

        :param pure_id: The pure_id of this WSClassificationDetail.
        :type: int
        """

        self._pure_id = pure_id

    @property
    def external_id(self):
        """
        Gets the external_id of this WSClassificationDetail.

        :return: The external_id of this WSClassificationDetail.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this WSClassificationDetail.

        :param external_id: The external_id of this WSClassificationDetail.
        :type: str
        """

        self._external_id = external_id

    @property
    def external_id_source(self):
        """
        Gets the external_id_source of this WSClassificationDetail.

        :return: The external_id_source of this WSClassificationDetail.
        :rtype: str
        """
        return self._external_id_source

    @external_id_source.setter
    def external_id_source(self, external_id_source):
        """
        Sets the external_id_source of this WSClassificationDetail.

        :param external_id_source: The external_id_source of this WSClassificationDetail.
        :type: str
        """

        self._external_id_source = external_id_source

    @property
    def externally_managed(self):
        """
        Gets the externally_managed of this WSClassificationDetail.

        :return: The externally_managed of this WSClassificationDetail.
        :rtype: bool
        """
        return self._externally_managed

    @externally_managed.setter
    def externally_managed(self, externally_managed):
        """
        Sets the externally_managed of this WSClassificationDetail.

        :param externally_managed: The externally_managed of this WSClassificationDetail.
        :type: bool
        """

        self._externally_managed = externally_managed

    @property
    def uri(self):
        """
        Gets the uri of this WSClassificationDetail.

        :return: The uri of this WSClassificationDetail.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this WSClassificationDetail.

        :param uri: The uri of this WSClassificationDetail.
        :type: str
        """

        self._uri = uri

    @property
    def disabled(self):
        """
        Gets the disabled of this WSClassificationDetail.

        :return: The disabled of this WSClassificationDetail.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this WSClassificationDetail.

        :param disabled: The disabled of this WSClassificationDetail.
        :type: bool
        """

        self._disabled = disabled

    @property
    def terms(self):
        """
        Gets the terms of this WSClassificationDetail.

        :return: The terms of this WSClassificationDetail.
        :rtype: list[WSLocalizedString]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this WSClassificationDetail.

        :param terms: The terms of this WSClassificationDetail.
        :type: list[WSLocalizedString]
        """

        self._terms = terms

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSClassificationDetail.

        :return: The descriptions of this WSClassificationDetail.
        :rtype: list[WSLocalizedString]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSClassificationDetail.

        :param descriptions: The descriptions of this WSClassificationDetail.
        :type: list[WSLocalizedString]
        """

        self._descriptions = descriptions

    @property
    def classification_relations(self):
        """
        Gets the classification_relations of this WSClassificationDetail.

        :return: The classification_relations of this WSClassificationDetail.
        :rtype: list[WSClassificationRelation]
        """
        return self._classification_relations

    @classification_relations.setter
    def classification_relations(self, classification_relations):
        """
        Sets the classification_relations of this WSClassificationDetail.

        :param classification_relations: The classification_relations of this WSClassificationDetail.
        :type: list[WSClassificationRelation]
        """

        self._classification_relations = classification_relations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSClassificationDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
