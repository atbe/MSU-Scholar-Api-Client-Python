# coding: utf-8

"""
    Pure API 511

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/><br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issued with a given set of available endpoints.<br/>To enter your API key and begin your use, press the 'Authorize' button to at the top of this page. <br/>You are then presented with two options for entering the API key: <ol><li>Use the API key in query format.</li><li>Use the API key in a header.</li><br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/><br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.15.<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13.

    OpenAPI spec version: 511
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSKeywordGroupConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pure_id': 'int',
        'external_id': 'str',
        'external_id_source': 'str',
        'externally_managed': 'bool',
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'target_family': 'str',
        'name': 'list[WSLocalizedString]',
        'descriptions': 'list[WSLocalizedString]',
        'classification_scheme': 'WSClassificationSchemeRef',
        'allow_userdefined_keywords': 'bool',
        'modifying_roles': 'list[str]',
        'weight': 'int',
        'userdefined_keyword_edit_mode': 'str',
        'limit_to_leaf_selection': 'bool',
        'logical_name': 'str',
        'tags': 'list[str]',
        'relation_type': 'str',
        'relation_name': 'str',
        'info': 'WSContentInformation',
        'propagation_configurations': 'list[WSKeywordPropagationConfiguration]'
    }

    attribute_map = {
        'pure_id': 'pureId',
        'external_id': 'externalId',
        'external_id_source': 'externalIdSource',
        'externally_managed': 'externallyManaged',
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'target_family': 'targetFamily',
        'name': 'name',
        'descriptions': 'descriptions',
        'classification_scheme': 'classificationScheme',
        'allow_userdefined_keywords': 'allowUserdefinedKeywords',
        'modifying_roles': 'modifyingRoles',
        'weight': 'weight',
        'userdefined_keyword_edit_mode': 'userdefinedKeywordEditMode',
        'limit_to_leaf_selection': 'limitToLeafSelection',
        'logical_name': 'logicalName',
        'tags': 'tags',
        'relation_type': 'relationType',
        'relation_name': 'relationName',
        'info': 'info',
        'propagation_configurations': 'propagationConfigurations'
    }

    def __init__(self, pure_id=None, external_id=None, external_id_source=None, externally_managed=False, uuid=None, html_renderings=None, target_family=None, name=None, descriptions=None, classification_scheme=None, allow_userdefined_keywords=False, modifying_roles=None, weight=None, userdefined_keyword_edit_mode=None, limit_to_leaf_selection=False, logical_name=None, tags=None, relation_type=None, relation_name=None, info=None, propagation_configurations=None):
        """
        WSKeywordGroupConfiguration - a model defined in Swagger
        """

        self._pure_id = None
        self._external_id = None
        self._external_id_source = None
        self._externally_managed = None
        self._uuid = None
        self._html_renderings = None
        self._target_family = None
        self._name = None
        self._descriptions = None
        self._classification_scheme = None
        self._allow_userdefined_keywords = None
        self._modifying_roles = None
        self._weight = None
        self._userdefined_keyword_edit_mode = None
        self._limit_to_leaf_selection = None
        self._logical_name = None
        self._tags = None
        self._relation_type = None
        self._relation_name = None
        self._info = None
        self._propagation_configurations = None

        if pure_id is not None:
          self.pure_id = pure_id
        if external_id is not None:
          self.external_id = external_id
        if external_id_source is not None:
          self.external_id_source = external_id_source
        if externally_managed is not None:
          self.externally_managed = externally_managed
        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if target_family is not None:
          self.target_family = target_family
        if name is not None:
          self.name = name
        if descriptions is not None:
          self.descriptions = descriptions
        if classification_scheme is not None:
          self.classification_scheme = classification_scheme
        if allow_userdefined_keywords is not None:
          self.allow_userdefined_keywords = allow_userdefined_keywords
        if modifying_roles is not None:
          self.modifying_roles = modifying_roles
        if weight is not None:
          self.weight = weight
        if userdefined_keyword_edit_mode is not None:
          self.userdefined_keyword_edit_mode = userdefined_keyword_edit_mode
        if limit_to_leaf_selection is not None:
          self.limit_to_leaf_selection = limit_to_leaf_selection
        if logical_name is not None:
          self.logical_name = logical_name
        if tags is not None:
          self.tags = tags
        if relation_type is not None:
          self.relation_type = relation_type
        if relation_name is not None:
          self.relation_name = relation_name
        if info is not None:
          self.info = info
        if propagation_configurations is not None:
          self.propagation_configurations = propagation_configurations

    @property
    def pure_id(self):
        """
        Gets the pure_id of this WSKeywordGroupConfiguration.

        :return: The pure_id of this WSKeywordGroupConfiguration.
        :rtype: int
        """
        return self._pure_id

    @pure_id.setter
    def pure_id(self, pure_id):
        """
        Sets the pure_id of this WSKeywordGroupConfiguration.

        :param pure_id: The pure_id of this WSKeywordGroupConfiguration.
        :type: int
        """

        self._pure_id = pure_id

    @property
    def external_id(self):
        """
        Gets the external_id of this WSKeywordGroupConfiguration.

        :return: The external_id of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this WSKeywordGroupConfiguration.

        :param external_id: The external_id of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._external_id = external_id

    @property
    def external_id_source(self):
        """
        Gets the external_id_source of this WSKeywordGroupConfiguration.

        :return: The external_id_source of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._external_id_source

    @external_id_source.setter
    def external_id_source(self, external_id_source):
        """
        Sets the external_id_source of this WSKeywordGroupConfiguration.

        :param external_id_source: The external_id_source of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._external_id_source = external_id_source

    @property
    def externally_managed(self):
        """
        Gets the externally_managed of this WSKeywordGroupConfiguration.

        :return: The externally_managed of this WSKeywordGroupConfiguration.
        :rtype: bool
        """
        return self._externally_managed

    @externally_managed.setter
    def externally_managed(self, externally_managed):
        """
        Sets the externally_managed of this WSKeywordGroupConfiguration.

        :param externally_managed: The externally_managed of this WSKeywordGroupConfiguration.
        :type: bool
        """

        self._externally_managed = externally_managed

    @property
    def uuid(self):
        """
        Gets the uuid of this WSKeywordGroupConfiguration.

        :return: The uuid of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSKeywordGroupConfiguration.

        :param uuid: The uuid of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSKeywordGroupConfiguration.

        :return: The html_renderings of this WSKeywordGroupConfiguration.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSKeywordGroupConfiguration.

        :param html_renderings: The html_renderings of this WSKeywordGroupConfiguration.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def target_family(self):
        """
        Gets the target_family of this WSKeywordGroupConfiguration.

        :return: The target_family of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._target_family

    @target_family.setter
    def target_family(self, target_family):
        """
        Sets the target_family of this WSKeywordGroupConfiguration.

        :param target_family: The target_family of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._target_family = target_family

    @property
    def name(self):
        """
        Gets the name of this WSKeywordGroupConfiguration.

        :return: The name of this WSKeywordGroupConfiguration.
        :rtype: list[WSLocalizedString]
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WSKeywordGroupConfiguration.

        :param name: The name of this WSKeywordGroupConfiguration.
        :type: list[WSLocalizedString]
        """

        self._name = name

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSKeywordGroupConfiguration.

        :return: The descriptions of this WSKeywordGroupConfiguration.
        :rtype: list[WSLocalizedString]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSKeywordGroupConfiguration.

        :param descriptions: The descriptions of this WSKeywordGroupConfiguration.
        :type: list[WSLocalizedString]
        """

        self._descriptions = descriptions

    @property
    def classification_scheme(self):
        """
        Gets the classification_scheme of this WSKeywordGroupConfiguration.

        :return: The classification_scheme of this WSKeywordGroupConfiguration.
        :rtype: WSClassificationSchemeRef
        """
        return self._classification_scheme

    @classification_scheme.setter
    def classification_scheme(self, classification_scheme):
        """
        Sets the classification_scheme of this WSKeywordGroupConfiguration.

        :param classification_scheme: The classification_scheme of this WSKeywordGroupConfiguration.
        :type: WSClassificationSchemeRef
        """

        self._classification_scheme = classification_scheme

    @property
    def allow_userdefined_keywords(self):
        """
        Gets the allow_userdefined_keywords of this WSKeywordGroupConfiguration.

        :return: The allow_userdefined_keywords of this WSKeywordGroupConfiguration.
        :rtype: bool
        """
        return self._allow_userdefined_keywords

    @allow_userdefined_keywords.setter
    def allow_userdefined_keywords(self, allow_userdefined_keywords):
        """
        Sets the allow_userdefined_keywords of this WSKeywordGroupConfiguration.

        :param allow_userdefined_keywords: The allow_userdefined_keywords of this WSKeywordGroupConfiguration.
        :type: bool
        """

        self._allow_userdefined_keywords = allow_userdefined_keywords

    @property
    def modifying_roles(self):
        """
        Gets the modifying_roles of this WSKeywordGroupConfiguration.

        :return: The modifying_roles of this WSKeywordGroupConfiguration.
        :rtype: list[str]
        """
        return self._modifying_roles

    @modifying_roles.setter
    def modifying_roles(self, modifying_roles):
        """
        Sets the modifying_roles of this WSKeywordGroupConfiguration.

        :param modifying_roles: The modifying_roles of this WSKeywordGroupConfiguration.
        :type: list[str]
        """

        self._modifying_roles = modifying_roles

    @property
    def weight(self):
        """
        Gets the weight of this WSKeywordGroupConfiguration.

        :return: The weight of this WSKeywordGroupConfiguration.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this WSKeywordGroupConfiguration.

        :param weight: The weight of this WSKeywordGroupConfiguration.
        :type: int
        """

        self._weight = weight

    @property
    def userdefined_keyword_edit_mode(self):
        """
        Gets the userdefined_keyword_edit_mode of this WSKeywordGroupConfiguration.

        :return: The userdefined_keyword_edit_mode of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._userdefined_keyword_edit_mode

    @userdefined_keyword_edit_mode.setter
    def userdefined_keyword_edit_mode(self, userdefined_keyword_edit_mode):
        """
        Sets the userdefined_keyword_edit_mode of this WSKeywordGroupConfiguration.

        :param userdefined_keyword_edit_mode: The userdefined_keyword_edit_mode of this WSKeywordGroupConfiguration.
        :type: str
        """
        allowed_values = ["SUBMISSION_LOCALE", "ALL_SUPPORTED_SUBMISSION_LOCALES", "ALL_SUPPORTED_LOCALES"]
        if userdefined_keyword_edit_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `userdefined_keyword_edit_mode` ({0}), must be one of {1}"
                .format(userdefined_keyword_edit_mode, allowed_values)
            )

        self._userdefined_keyword_edit_mode = userdefined_keyword_edit_mode

    @property
    def limit_to_leaf_selection(self):
        """
        Gets the limit_to_leaf_selection of this WSKeywordGroupConfiguration.

        :return: The limit_to_leaf_selection of this WSKeywordGroupConfiguration.
        :rtype: bool
        """
        return self._limit_to_leaf_selection

    @limit_to_leaf_selection.setter
    def limit_to_leaf_selection(self, limit_to_leaf_selection):
        """
        Sets the limit_to_leaf_selection of this WSKeywordGroupConfiguration.

        :param limit_to_leaf_selection: The limit_to_leaf_selection of this WSKeywordGroupConfiguration.
        :type: bool
        """

        self._limit_to_leaf_selection = limit_to_leaf_selection

    @property
    def logical_name(self):
        """
        Gets the logical_name of this WSKeywordGroupConfiguration.

        :return: The logical_name of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._logical_name

    @logical_name.setter
    def logical_name(self, logical_name):
        """
        Sets the logical_name of this WSKeywordGroupConfiguration.

        :param logical_name: The logical_name of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._logical_name = logical_name

    @property
    def tags(self):
        """
        Gets the tags of this WSKeywordGroupConfiguration.

        :return: The tags of this WSKeywordGroupConfiguration.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this WSKeywordGroupConfiguration.

        :param tags: The tags of this WSKeywordGroupConfiguration.
        :type: list[str]
        """

        self._tags = tags

    @property
    def relation_type(self):
        """
        Gets the relation_type of this WSKeywordGroupConfiguration.

        :return: The relation_type of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """
        Sets the relation_type of this WSKeywordGroupConfiguration.

        :param relation_type: The relation_type of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._relation_type = relation_type

    @property
    def relation_name(self):
        """
        Gets the relation_name of this WSKeywordGroupConfiguration.

        :return: The relation_name of this WSKeywordGroupConfiguration.
        :rtype: str
        """
        return self._relation_name

    @relation_name.setter
    def relation_name(self, relation_name):
        """
        Sets the relation_name of this WSKeywordGroupConfiguration.

        :param relation_name: The relation_name of this WSKeywordGroupConfiguration.
        :type: str
        """

        self._relation_name = relation_name

    @property
    def info(self):
        """
        Gets the info of this WSKeywordGroupConfiguration.

        :return: The info of this WSKeywordGroupConfiguration.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSKeywordGroupConfiguration.

        :param info: The info of this WSKeywordGroupConfiguration.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def propagation_configurations(self):
        """
        Gets the propagation_configurations of this WSKeywordGroupConfiguration.

        :return: The propagation_configurations of this WSKeywordGroupConfiguration.
        :rtype: list[WSKeywordPropagationConfiguration]
        """
        return self._propagation_configurations

    @propagation_configurations.setter
    def propagation_configurations(self, propagation_configurations):
        """
        Sets the propagation_configurations of this WSKeywordGroupConfiguration.

        :param propagation_configurations: The propagation_configurations of this WSKeywordGroupConfiguration.
        :type: list[WSKeywordPropagationConfiguration]
        """

        self._propagation_configurations = propagation_configurations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSKeywordGroupConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
