# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSProfessionalQualification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'qualifications': 'list[WSLocalizedString]',
        'abbreviated_qualifications': 'list[WSLocalizedString]',
        'period': 'WSCompoundDateRange'
    }

    attribute_map = {
        'id': 'id',
        'qualifications': 'qualifications',
        'abbreviated_qualifications': 'abbreviatedQualifications',
        'period': 'period'
    }

    def __init__(self, id=None, qualifications=None, abbreviated_qualifications=None, period=None):
        """
        WSProfessionalQualification - a model defined in Swagger
        """

        self._id = None
        self._qualifications = None
        self._abbreviated_qualifications = None
        self._period = None

        if id is not None:
          self.id = id
        if qualifications is not None:
          self.qualifications = qualifications
        if abbreviated_qualifications is not None:
          self.abbreviated_qualifications = abbreviated_qualifications
        if period is not None:
          self.period = period

    @property
    def id(self):
        """
        Gets the id of this WSProfessionalQualification.

        :return: The id of this WSProfessionalQualification.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WSProfessionalQualification.

        :param id: The id of this WSProfessionalQualification.
        :type: int
        """

        self._id = id

    @property
    def qualifications(self):
        """
        Gets the qualifications of this WSProfessionalQualification.

        :return: The qualifications of this WSProfessionalQualification.
        :rtype: list[WSLocalizedString]
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """
        Sets the qualifications of this WSProfessionalQualification.

        :param qualifications: The qualifications of this WSProfessionalQualification.
        :type: list[WSLocalizedString]
        """

        self._qualifications = qualifications

    @property
    def abbreviated_qualifications(self):
        """
        Gets the abbreviated_qualifications of this WSProfessionalQualification.

        :return: The abbreviated_qualifications of this WSProfessionalQualification.
        :rtype: list[WSLocalizedString]
        """
        return self._abbreviated_qualifications

    @abbreviated_qualifications.setter
    def abbreviated_qualifications(self, abbreviated_qualifications):
        """
        Sets the abbreviated_qualifications of this WSProfessionalQualification.

        :param abbreviated_qualifications: The abbreviated_qualifications of this WSProfessionalQualification.
        :type: list[WSLocalizedString]
        """

        self._abbreviated_qualifications = abbreviated_qualifications

    @property
    def period(self):
        """
        Gets the period of this WSProfessionalQualification.

        :return: The period of this WSProfessionalQualification.
        :rtype: WSCompoundDateRange
        """
        return self._period

    @period.setter
    def period(self, period):
        """
        Sets the period of this WSProfessionalQualification.

        :param period: The period of this WSProfessionalQualification.
        :type: WSCompoundDateRange
        """

        self._period = period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSProfessionalQualification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
