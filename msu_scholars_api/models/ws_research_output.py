# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSResearchOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'html_renderings': 'list[WSHtmlRendering]',
        'title': 'str',
        'sub_title': 'str',
        'types': 'list[WSClassification]',
        'categories': 'list[WSClassification]',
        'peer_review': 'bool',
        'international_peer_review': 'bool',
        'publication_statuses': 'list[WSPublicationStatus]',
        'languages': 'list[WSClassification]',
        'translated_titles': 'list[WSLocalizedString]',
        'translated_sub_titles': 'list[WSLocalizedString]',
        'number_of_pages': 'int',
        'field_of_research_associations': 'list[WSERA2015FieldOfResearchAssociation]',
        'abstracts': 'list[WSLocalizedString]',
        'person_associations': 'list[WSClassifiedAuthorAssociation]',
        'organisations': 'list[WSOrganisationRef]',
        'external_organisations': 'list[WSExternalOrganisationRef]',
        'managing_organisational_unit': 'WSOrganisationRef',
        'open_access_permissions': 'list[WSClassification]',
        'open_access_embargo_months': 'int',
        'open_access_embargo_date': 'datetime',
        'submission_year': 'int',
        'main_research_area': 'list[WSClassification]',
        'electronic_versions': 'list[WSElectronicVersionAssociation]',
        'additional_files': 'list[WSElectronicVersionAdditionalFileAssociation]',
        'links': 'list[WSLink]',
        'article_processing_charge_paid': 'bool',
        'article_processing_charge_amount_in_article_processing_charge_currency': 'float',
        'article_processing_charges_currency': 'list[WSClassification]',
        'keyword_groups': 'list[WSKeywordGroup]',
        'bibliographical_notes': 'list[WSLocalizedString]',
        'descriptions': 'list[WSClassifiedLocalizedValue]',
        'related_research_outputs': 'list[WSResearchOutputRef]',
        'related_activities': 'list[WSActivityRef]',
        'related_press_media': 'list[WSPressMediaRef]',
        'related_impacts': 'list[WSImpactRef]',
        'related_projects': 'list[WSUPMProjectRef]',
        'related_data_sets': 'list[WSDataSetRef]',
        'related_prizes': 'list[WSPrizeRef]',
        'related_student_theses': 'list[WSStudentThesisRef]',
        'confidential': 'bool',
        'visibilities': 'list[WSVisibility]',
        'workflows': 'list[WSWorkflow]',
        'externalable_info': 'WSExternalableInformation',
        'info': 'WSContentInformation',
        'total_scopus_citations': 'int',
        'scopus_metrics': 'list[WSResearchOutputMetric]',
        'article_processing_charge_amount': 'float'
    }

    attribute_map = {
        'uuid': 'uuid',
        'html_renderings': 'htmlRenderings',
        'title': 'title',
        'sub_title': 'subTitle',
        'types': 'types',
        'categories': 'categories',
        'peer_review': 'peerReview',
        'international_peer_review': 'internationalPeerReview',
        'publication_statuses': 'publicationStatuses',
        'languages': 'languages',
        'translated_titles': 'translatedTitles',
        'translated_sub_titles': 'translatedSubTitles',
        'number_of_pages': 'numberOfPages',
        'field_of_research_associations': 'fieldOfResearchAssociations',
        'abstracts': 'abstracts',
        'person_associations': 'personAssociations',
        'organisations': 'organisations',
        'external_organisations': 'externalOrganisations',
        'managing_organisational_unit': 'managingOrganisationalUnit',
        'open_access_permissions': 'openAccessPermissions',
        'open_access_embargo_months': 'openAccessEmbargoMonths',
        'open_access_embargo_date': 'openAccessEmbargoDate',
        'submission_year': 'submissionYear',
        'main_research_area': 'mainResearchArea',
        'electronic_versions': 'electronicVersions',
        'additional_files': 'additionalFiles',
        'links': 'links',
        'article_processing_charge_paid': 'articleProcessingChargePaid',
        'article_processing_charge_amount_in_article_processing_charge_currency': 'articleProcessingChargeAmountInArticleProcessingChargeCurrency',
        'article_processing_charges_currency': 'articleProcessingChargesCurrency',
        'keyword_groups': 'keywordGroups',
        'bibliographical_notes': 'bibliographicalNotes',
        'descriptions': 'descriptions',
        'related_research_outputs': 'relatedResearchOutputs',
        'related_activities': 'relatedActivities',
        'related_press_media': 'relatedPressMedia',
        'related_impacts': 'relatedImpacts',
        'related_projects': 'relatedProjects',
        'related_data_sets': 'relatedDataSets',
        'related_prizes': 'relatedPrizes',
        'related_student_theses': 'relatedStudentTheses',
        'confidential': 'confidential',
        'visibilities': 'visibilities',
        'workflows': 'workflows',
        'externalable_info': 'externalableInfo',
        'info': 'info',
        'total_scopus_citations': 'totalScopusCitations',
        'scopus_metrics': 'scopusMetrics',
        'article_processing_charge_amount': 'articleProcessingChargeAmount'
    }

    def __init__(self, uuid=None, html_renderings=None, title=None, sub_title=None, types=None, categories=None, peer_review=False, international_peer_review=False, publication_statuses=None, languages=None, translated_titles=None, translated_sub_titles=None, number_of_pages=None, field_of_research_associations=None, abstracts=None, person_associations=None, organisations=None, external_organisations=None, managing_organisational_unit=None, open_access_permissions=None, open_access_embargo_months=None, open_access_embargo_date=None, submission_year=None, main_research_area=None, electronic_versions=None, additional_files=None, links=None, article_processing_charge_paid=False, article_processing_charge_amount_in_article_processing_charge_currency=None, article_processing_charges_currency=None, keyword_groups=None, bibliographical_notes=None, descriptions=None, related_research_outputs=None, related_activities=None, related_press_media=None, related_impacts=None, related_projects=None, related_data_sets=None, related_prizes=None, related_student_theses=None, confidential=False, visibilities=None, workflows=None, externalable_info=None, info=None, total_scopus_citations=None, scopus_metrics=None, article_processing_charge_amount=None):
        """
        WSResearchOutput - a model defined in Swagger
        """

        self._uuid = None
        self._html_renderings = None
        self._title = None
        self._sub_title = None
        self._types = None
        self._categories = None
        self._peer_review = None
        self._international_peer_review = None
        self._publication_statuses = None
        self._languages = None
        self._translated_titles = None
        self._translated_sub_titles = None
        self._number_of_pages = None
        self._field_of_research_associations = None
        self._abstracts = None
        self._person_associations = None
        self._organisations = None
        self._external_organisations = None
        self._managing_organisational_unit = None
        self._open_access_permissions = None
        self._open_access_embargo_months = None
        self._open_access_embargo_date = None
        self._submission_year = None
        self._main_research_area = None
        self._electronic_versions = None
        self._additional_files = None
        self._links = None
        self._article_processing_charge_paid = None
        self._article_processing_charge_amount_in_article_processing_charge_currency = None
        self._article_processing_charges_currency = None
        self._keyword_groups = None
        self._bibliographical_notes = None
        self._descriptions = None
        self._related_research_outputs = None
        self._related_activities = None
        self._related_press_media = None
        self._related_impacts = None
        self._related_projects = None
        self._related_data_sets = None
        self._related_prizes = None
        self._related_student_theses = None
        self._confidential = None
        self._visibilities = None
        self._workflows = None
        self._externalable_info = None
        self._info = None
        self._total_scopus_citations = None
        self._scopus_metrics = None
        self._article_processing_charge_amount = None

        if uuid is not None:
          self.uuid = uuid
        if html_renderings is not None:
          self.html_renderings = html_renderings
        if title is not None:
          self.title = title
        if sub_title is not None:
          self.sub_title = sub_title
        if types is not None:
          self.types = types
        if categories is not None:
          self.categories = categories
        if peer_review is not None:
          self.peer_review = peer_review
        if international_peer_review is not None:
          self.international_peer_review = international_peer_review
        if publication_statuses is not None:
          self.publication_statuses = publication_statuses
        if languages is not None:
          self.languages = languages
        if translated_titles is not None:
          self.translated_titles = translated_titles
        if translated_sub_titles is not None:
          self.translated_sub_titles = translated_sub_titles
        if number_of_pages is not None:
          self.number_of_pages = number_of_pages
        if field_of_research_associations is not None:
          self.field_of_research_associations = field_of_research_associations
        if abstracts is not None:
          self.abstracts = abstracts
        if person_associations is not None:
          self.person_associations = person_associations
        if organisations is not None:
          self.organisations = organisations
        if external_organisations is not None:
          self.external_organisations = external_organisations
        if managing_organisational_unit is not None:
          self.managing_organisational_unit = managing_organisational_unit
        if open_access_permissions is not None:
          self.open_access_permissions = open_access_permissions
        if open_access_embargo_months is not None:
          self.open_access_embargo_months = open_access_embargo_months
        if open_access_embargo_date is not None:
          self.open_access_embargo_date = open_access_embargo_date
        if submission_year is not None:
          self.submission_year = submission_year
        if main_research_area is not None:
          self.main_research_area = main_research_area
        if electronic_versions is not None:
          self.electronic_versions = electronic_versions
        if additional_files is not None:
          self.additional_files = additional_files
        if links is not None:
          self.links = links
        if article_processing_charge_paid is not None:
          self.article_processing_charge_paid = article_processing_charge_paid
        if article_processing_charge_amount_in_article_processing_charge_currency is not None:
          self.article_processing_charge_amount_in_article_processing_charge_currency = article_processing_charge_amount_in_article_processing_charge_currency
        if article_processing_charges_currency is not None:
          self.article_processing_charges_currency = article_processing_charges_currency
        if keyword_groups is not None:
          self.keyword_groups = keyword_groups
        if bibliographical_notes is not None:
          self.bibliographical_notes = bibliographical_notes
        if descriptions is not None:
          self.descriptions = descriptions
        if related_research_outputs is not None:
          self.related_research_outputs = related_research_outputs
        if related_activities is not None:
          self.related_activities = related_activities
        if related_press_media is not None:
          self.related_press_media = related_press_media
        if related_impacts is not None:
          self.related_impacts = related_impacts
        if related_projects is not None:
          self.related_projects = related_projects
        if related_data_sets is not None:
          self.related_data_sets = related_data_sets
        if related_prizes is not None:
          self.related_prizes = related_prizes
        if related_student_theses is not None:
          self.related_student_theses = related_student_theses
        if confidential is not None:
          self.confidential = confidential
        if visibilities is not None:
          self.visibilities = visibilities
        if workflows is not None:
          self.workflows = workflows
        if externalable_info is not None:
          self.externalable_info = externalable_info
        if info is not None:
          self.info = info
        if total_scopus_citations is not None:
          self.total_scopus_citations = total_scopus_citations
        if scopus_metrics is not None:
          self.scopus_metrics = scopus_metrics
        if article_processing_charge_amount is not None:
          self.article_processing_charge_amount = article_processing_charge_amount

    @property
    def uuid(self):
        """
        Gets the uuid of this WSResearchOutput.

        :return: The uuid of this WSResearchOutput.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this WSResearchOutput.

        :param uuid: The uuid of this WSResearchOutput.
        :type: str
        """

        self._uuid = uuid

    @property
    def html_renderings(self):
        """
        Gets the html_renderings of this WSResearchOutput.

        :return: The html_renderings of this WSResearchOutput.
        :rtype: list[WSHtmlRendering]
        """
        return self._html_renderings

    @html_renderings.setter
    def html_renderings(self, html_renderings):
        """
        Sets the html_renderings of this WSResearchOutput.

        :param html_renderings: The html_renderings of this WSResearchOutput.
        :type: list[WSHtmlRendering]
        """

        self._html_renderings = html_renderings

    @property
    def title(self):
        """
        Gets the title of this WSResearchOutput.

        :return: The title of this WSResearchOutput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this WSResearchOutput.

        :param title: The title of this WSResearchOutput.
        :type: str
        """

        self._title = title

    @property
    def sub_title(self):
        """
        Gets the sub_title of this WSResearchOutput.

        :return: The sub_title of this WSResearchOutput.
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """
        Sets the sub_title of this WSResearchOutput.

        :param sub_title: The sub_title of this WSResearchOutput.
        :type: str
        """

        self._sub_title = sub_title

    @property
    def types(self):
        """
        Gets the types of this WSResearchOutput.

        :return: The types of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this WSResearchOutput.

        :param types: The types of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._types = types

    @property
    def categories(self):
        """
        Gets the categories of this WSResearchOutput.

        :return: The categories of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this WSResearchOutput.

        :param categories: The categories of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._categories = categories

    @property
    def peer_review(self):
        """
        Gets the peer_review of this WSResearchOutput.

        :return: The peer_review of this WSResearchOutput.
        :rtype: bool
        """
        return self._peer_review

    @peer_review.setter
    def peer_review(self, peer_review):
        """
        Sets the peer_review of this WSResearchOutput.

        :param peer_review: The peer_review of this WSResearchOutput.
        :type: bool
        """

        self._peer_review = peer_review

    @property
    def international_peer_review(self):
        """
        Gets the international_peer_review of this WSResearchOutput.

        :return: The international_peer_review of this WSResearchOutput.
        :rtype: bool
        """
        return self._international_peer_review

    @international_peer_review.setter
    def international_peer_review(self, international_peer_review):
        """
        Sets the international_peer_review of this WSResearchOutput.

        :param international_peer_review: The international_peer_review of this WSResearchOutput.
        :type: bool
        """

        self._international_peer_review = international_peer_review

    @property
    def publication_statuses(self):
        """
        Gets the publication_statuses of this WSResearchOutput.

        :return: The publication_statuses of this WSResearchOutput.
        :rtype: list[WSPublicationStatus]
        """
        return self._publication_statuses

    @publication_statuses.setter
    def publication_statuses(self, publication_statuses):
        """
        Sets the publication_statuses of this WSResearchOutput.

        :param publication_statuses: The publication_statuses of this WSResearchOutput.
        :type: list[WSPublicationStatus]
        """

        self._publication_statuses = publication_statuses

    @property
    def languages(self):
        """
        Gets the languages of this WSResearchOutput.

        :return: The languages of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """
        Sets the languages of this WSResearchOutput.

        :param languages: The languages of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._languages = languages

    @property
    def translated_titles(self):
        """
        Gets the translated_titles of this WSResearchOutput.

        :return: The translated_titles of this WSResearchOutput.
        :rtype: list[WSLocalizedString]
        """
        return self._translated_titles

    @translated_titles.setter
    def translated_titles(self, translated_titles):
        """
        Sets the translated_titles of this WSResearchOutput.

        :param translated_titles: The translated_titles of this WSResearchOutput.
        :type: list[WSLocalizedString]
        """

        self._translated_titles = translated_titles

    @property
    def translated_sub_titles(self):
        """
        Gets the translated_sub_titles of this WSResearchOutput.

        :return: The translated_sub_titles of this WSResearchOutput.
        :rtype: list[WSLocalizedString]
        """
        return self._translated_sub_titles

    @translated_sub_titles.setter
    def translated_sub_titles(self, translated_sub_titles):
        """
        Sets the translated_sub_titles of this WSResearchOutput.

        :param translated_sub_titles: The translated_sub_titles of this WSResearchOutput.
        :type: list[WSLocalizedString]
        """

        self._translated_sub_titles = translated_sub_titles

    @property
    def number_of_pages(self):
        """
        Gets the number_of_pages of this WSResearchOutput.

        :return: The number_of_pages of this WSResearchOutput.
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """
        Sets the number_of_pages of this WSResearchOutput.

        :param number_of_pages: The number_of_pages of this WSResearchOutput.
        :type: int
        """

        self._number_of_pages = number_of_pages

    @property
    def field_of_research_associations(self):
        """
        Gets the field_of_research_associations of this WSResearchOutput.
        Only available when the ERA module is enabled

        :return: The field_of_research_associations of this WSResearchOutput.
        :rtype: list[WSERA2015FieldOfResearchAssociation]
        """
        return self._field_of_research_associations

    @field_of_research_associations.setter
    def field_of_research_associations(self, field_of_research_associations):
        """
        Sets the field_of_research_associations of this WSResearchOutput.
        Only available when the ERA module is enabled

        :param field_of_research_associations: The field_of_research_associations of this WSResearchOutput.
        :type: list[WSERA2015FieldOfResearchAssociation]
        """

        self._field_of_research_associations = field_of_research_associations

    @property
    def abstracts(self):
        """
        Gets the abstracts of this WSResearchOutput.

        :return: The abstracts of this WSResearchOutput.
        :rtype: list[WSLocalizedString]
        """
        return self._abstracts

    @abstracts.setter
    def abstracts(self, abstracts):
        """
        Sets the abstracts of this WSResearchOutput.

        :param abstracts: The abstracts of this WSResearchOutput.
        :type: list[WSLocalizedString]
        """

        self._abstracts = abstracts

    @property
    def person_associations(self):
        """
        Gets the person_associations of this WSResearchOutput.

        :return: The person_associations of this WSResearchOutput.
        :rtype: list[WSClassifiedAuthorAssociation]
        """
        return self._person_associations

    @person_associations.setter
    def person_associations(self, person_associations):
        """
        Sets the person_associations of this WSResearchOutput.

        :param person_associations: The person_associations of this WSResearchOutput.
        :type: list[WSClassifiedAuthorAssociation]
        """

        self._person_associations = person_associations

    @property
    def organisations(self):
        """
        Gets the organisations of this WSResearchOutput.

        :return: The organisations of this WSResearchOutput.
        :rtype: list[WSOrganisationRef]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """
        Sets the organisations of this WSResearchOutput.

        :param organisations: The organisations of this WSResearchOutput.
        :type: list[WSOrganisationRef]
        """

        self._organisations = organisations

    @property
    def external_organisations(self):
        """
        Gets the external_organisations of this WSResearchOutput.

        :return: The external_organisations of this WSResearchOutput.
        :rtype: list[WSExternalOrganisationRef]
        """
        return self._external_organisations

    @external_organisations.setter
    def external_organisations(self, external_organisations):
        """
        Sets the external_organisations of this WSResearchOutput.

        :param external_organisations: The external_organisations of this WSResearchOutput.
        :type: list[WSExternalOrganisationRef]
        """

        self._external_organisations = external_organisations

    @property
    def managing_organisational_unit(self):
        """
        Gets the managing_organisational_unit of this WSResearchOutput.

        :return: The managing_organisational_unit of this WSResearchOutput.
        :rtype: WSOrganisationRef
        """
        return self._managing_organisational_unit

    @managing_organisational_unit.setter
    def managing_organisational_unit(self, managing_organisational_unit):
        """
        Sets the managing_organisational_unit of this WSResearchOutput.

        :param managing_organisational_unit: The managing_organisational_unit of this WSResearchOutput.
        :type: WSOrganisationRef
        """

        self._managing_organisational_unit = managing_organisational_unit

    @property
    def open_access_permissions(self):
        """
        Gets the open_access_permissions of this WSResearchOutput.

        :return: The open_access_permissions of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._open_access_permissions

    @open_access_permissions.setter
    def open_access_permissions(self, open_access_permissions):
        """
        Sets the open_access_permissions of this WSResearchOutput.

        :param open_access_permissions: The open_access_permissions of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._open_access_permissions = open_access_permissions

    @property
    def open_access_embargo_months(self):
        """
        Gets the open_access_embargo_months of this WSResearchOutput.

        :return: The open_access_embargo_months of this WSResearchOutput.
        :rtype: int
        """
        return self._open_access_embargo_months

    @open_access_embargo_months.setter
    def open_access_embargo_months(self, open_access_embargo_months):
        """
        Sets the open_access_embargo_months of this WSResearchOutput.

        :param open_access_embargo_months: The open_access_embargo_months of this WSResearchOutput.
        :type: int
        """

        self._open_access_embargo_months = open_access_embargo_months

    @property
    def open_access_embargo_date(self):
        """
        Gets the open_access_embargo_date of this WSResearchOutput.

        :return: The open_access_embargo_date of this WSResearchOutput.
        :rtype: datetime
        """
        return self._open_access_embargo_date

    @open_access_embargo_date.setter
    def open_access_embargo_date(self, open_access_embargo_date):
        """
        Sets the open_access_embargo_date of this WSResearchOutput.

        :param open_access_embargo_date: The open_access_embargo_date of this WSResearchOutput.
        :type: datetime
        """

        self._open_access_embargo_date = open_access_embargo_date

    @property
    def submission_year(self):
        """
        Gets the submission_year of this WSResearchOutput.
        Only available when this field has been enabled

        :return: The submission_year of this WSResearchOutput.
        :rtype: int
        """
        return self._submission_year

    @submission_year.setter
    def submission_year(self, submission_year):
        """
        Sets the submission_year of this WSResearchOutput.
        Only available when this field has been enabled

        :param submission_year: The submission_year of this WSResearchOutput.
        :type: int
        """

        self._submission_year = submission_year

    @property
    def main_research_area(self):
        """
        Gets the main_research_area of this WSResearchOutput.
        Only available when the BFI module is enabled

        :return: The main_research_area of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._main_research_area

    @main_research_area.setter
    def main_research_area(self, main_research_area):
        """
        Sets the main_research_area of this WSResearchOutput.
        Only available when the BFI module is enabled

        :param main_research_area: The main_research_area of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._main_research_area = main_research_area

    @property
    def electronic_versions(self):
        """
        Gets the electronic_versions of this WSResearchOutput.

        :return: The electronic_versions of this WSResearchOutput.
        :rtype: list[WSElectronicVersionAssociation]
        """
        return self._electronic_versions

    @electronic_versions.setter
    def electronic_versions(self, electronic_versions):
        """
        Sets the electronic_versions of this WSResearchOutput.

        :param electronic_versions: The electronic_versions of this WSResearchOutput.
        :type: list[WSElectronicVersionAssociation]
        """

        self._electronic_versions = electronic_versions

    @property
    def additional_files(self):
        """
        Gets the additional_files of this WSResearchOutput.

        :return: The additional_files of this WSResearchOutput.
        :rtype: list[WSElectronicVersionAdditionalFileAssociation]
        """
        return self._additional_files

    @additional_files.setter
    def additional_files(self, additional_files):
        """
        Sets the additional_files of this WSResearchOutput.

        :param additional_files: The additional_files of this WSResearchOutput.
        :type: list[WSElectronicVersionAdditionalFileAssociation]
        """

        self._additional_files = additional_files

    @property
    def links(self):
        """
        Gets the links of this WSResearchOutput.

        :return: The links of this WSResearchOutput.
        :rtype: list[WSLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this WSResearchOutput.

        :param links: The links of this WSResearchOutput.
        :type: list[WSLink]
        """

        self._links = links

    @property
    def article_processing_charge_paid(self):
        """
        Gets the article_processing_charge_paid of this WSResearchOutput.

        :return: The article_processing_charge_paid of this WSResearchOutput.
        :rtype: bool
        """
        return self._article_processing_charge_paid

    @article_processing_charge_paid.setter
    def article_processing_charge_paid(self, article_processing_charge_paid):
        """
        Sets the article_processing_charge_paid of this WSResearchOutput.

        :param article_processing_charge_paid: The article_processing_charge_paid of this WSResearchOutput.
        :type: bool
        """

        self._article_processing_charge_paid = article_processing_charge_paid

    @property
    def article_processing_charge_amount_in_article_processing_charge_currency(self):
        """
        Gets the article_processing_charge_amount_in_article_processing_charge_currency of this WSResearchOutput.

        :return: The article_processing_charge_amount_in_article_processing_charge_currency of this WSResearchOutput.
        :rtype: float
        """
        return self._article_processing_charge_amount_in_article_processing_charge_currency

    @article_processing_charge_amount_in_article_processing_charge_currency.setter
    def article_processing_charge_amount_in_article_processing_charge_currency(self, article_processing_charge_amount_in_article_processing_charge_currency):
        """
        Sets the article_processing_charge_amount_in_article_processing_charge_currency of this WSResearchOutput.

        :param article_processing_charge_amount_in_article_processing_charge_currency: The article_processing_charge_amount_in_article_processing_charge_currency of this WSResearchOutput.
        :type: float
        """

        self._article_processing_charge_amount_in_article_processing_charge_currency = article_processing_charge_amount_in_article_processing_charge_currency

    @property
    def article_processing_charges_currency(self):
        """
        Gets the article_processing_charges_currency of this WSResearchOutput.

        :return: The article_processing_charges_currency of this WSResearchOutput.
        :rtype: list[WSClassification]
        """
        return self._article_processing_charges_currency

    @article_processing_charges_currency.setter
    def article_processing_charges_currency(self, article_processing_charges_currency):
        """
        Sets the article_processing_charges_currency of this WSResearchOutput.

        :param article_processing_charges_currency: The article_processing_charges_currency of this WSResearchOutput.
        :type: list[WSClassification]
        """

        self._article_processing_charges_currency = article_processing_charges_currency

    @property
    def keyword_groups(self):
        """
        Gets the keyword_groups of this WSResearchOutput.

        :return: The keyword_groups of this WSResearchOutput.
        :rtype: list[WSKeywordGroup]
        """
        return self._keyword_groups

    @keyword_groups.setter
    def keyword_groups(self, keyword_groups):
        """
        Sets the keyword_groups of this WSResearchOutput.

        :param keyword_groups: The keyword_groups of this WSResearchOutput.
        :type: list[WSKeywordGroup]
        """

        self._keyword_groups = keyword_groups

    @property
    def bibliographical_notes(self):
        """
        Gets the bibliographical_notes of this WSResearchOutput.

        :return: The bibliographical_notes of this WSResearchOutput.
        :rtype: list[WSLocalizedString]
        """
        return self._bibliographical_notes

    @bibliographical_notes.setter
    def bibliographical_notes(self, bibliographical_notes):
        """
        Sets the bibliographical_notes of this WSResearchOutput.

        :param bibliographical_notes: The bibliographical_notes of this WSResearchOutput.
        :type: list[WSLocalizedString]
        """

        self._bibliographical_notes = bibliographical_notes

    @property
    def descriptions(self):
        """
        Gets the descriptions of this WSResearchOutput.

        :return: The descriptions of this WSResearchOutput.
        :rtype: list[WSClassifiedLocalizedValue]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this WSResearchOutput.

        :param descriptions: The descriptions of this WSResearchOutput.
        :type: list[WSClassifiedLocalizedValue]
        """

        self._descriptions = descriptions

    @property
    def related_research_outputs(self):
        """
        Gets the related_research_outputs of this WSResearchOutput.

        :return: The related_research_outputs of this WSResearchOutput.
        :rtype: list[WSResearchOutputRef]
        """
        return self._related_research_outputs

    @related_research_outputs.setter
    def related_research_outputs(self, related_research_outputs):
        """
        Sets the related_research_outputs of this WSResearchOutput.

        :param related_research_outputs: The related_research_outputs of this WSResearchOutput.
        :type: list[WSResearchOutputRef]
        """

        self._related_research_outputs = related_research_outputs

    @property
    def related_activities(self):
        """
        Gets the related_activities of this WSResearchOutput.
        Only available when the Activity module is enabled

        :return: The related_activities of this WSResearchOutput.
        :rtype: list[WSActivityRef]
        """
        return self._related_activities

    @related_activities.setter
    def related_activities(self, related_activities):
        """
        Sets the related_activities of this WSResearchOutput.
        Only available when the Activity module is enabled

        :param related_activities: The related_activities of this WSResearchOutput.
        :type: list[WSActivityRef]
        """

        self._related_activities = related_activities

    @property
    def related_press_media(self):
        """
        Gets the related_press_media of this WSResearchOutput.
        Only available when the Press / Media module is enabled

        :return: The related_press_media of this WSResearchOutput.
        :rtype: list[WSPressMediaRef]
        """
        return self._related_press_media

    @related_press_media.setter
    def related_press_media(self, related_press_media):
        """
        Sets the related_press_media of this WSResearchOutput.
        Only available when the Press / Media module is enabled

        :param related_press_media: The related_press_media of this WSResearchOutput.
        :type: list[WSPressMediaRef]
        """

        self._related_press_media = related_press_media

    @property
    def related_impacts(self):
        """
        Gets the related_impacts of this WSResearchOutput.
        Only available when the Impact module is enabled

        :return: The related_impacts of this WSResearchOutput.
        :rtype: list[WSImpactRef]
        """
        return self._related_impacts

    @related_impacts.setter
    def related_impacts(self, related_impacts):
        """
        Sets the related_impacts of this WSResearchOutput.
        Only available when the Impact module is enabled

        :param related_impacts: The related_impacts of this WSResearchOutput.
        :type: list[WSImpactRef]
        """

        self._related_impacts = related_impacts

    @property
    def related_projects(self):
        """
        Gets the related_projects of this WSResearchOutput.
        Only available when the Unified Project Model module is enabled

        :return: The related_projects of this WSResearchOutput.
        :rtype: list[WSUPMProjectRef]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """
        Sets the related_projects of this WSResearchOutput.
        Only available when the Unified Project Model module is enabled

        :param related_projects: The related_projects of this WSResearchOutput.
        :type: list[WSUPMProjectRef]
        """

        self._related_projects = related_projects

    @property
    def related_data_sets(self):
        """
        Gets the related_data_sets of this WSResearchOutput.
        Only available when the DataSet module is enabled

        :return: The related_data_sets of this WSResearchOutput.
        :rtype: list[WSDataSetRef]
        """
        return self._related_data_sets

    @related_data_sets.setter
    def related_data_sets(self, related_data_sets):
        """
        Sets the related_data_sets of this WSResearchOutput.
        Only available when the DataSet module is enabled

        :param related_data_sets: The related_data_sets of this WSResearchOutput.
        :type: list[WSDataSetRef]
        """

        self._related_data_sets = related_data_sets

    @property
    def related_prizes(self):
        """
        Gets the related_prizes of this WSResearchOutput.
        Only available when the Prize module is enabled

        :return: The related_prizes of this WSResearchOutput.
        :rtype: list[WSPrizeRef]
        """
        return self._related_prizes

    @related_prizes.setter
    def related_prizes(self, related_prizes):
        """
        Sets the related_prizes of this WSResearchOutput.
        Only available when the Prize module is enabled

        :param related_prizes: The related_prizes of this WSResearchOutput.
        :type: list[WSPrizeRef]
        """

        self._related_prizes = related_prizes

    @property
    def related_student_theses(self):
        """
        Gets the related_student_theses of this WSResearchOutput.
        Only available when the Student Thesis module is enabled

        :return: The related_student_theses of this WSResearchOutput.
        :rtype: list[WSStudentThesisRef]
        """
        return self._related_student_theses

    @related_student_theses.setter
    def related_student_theses(self, related_student_theses):
        """
        Sets the related_student_theses of this WSResearchOutput.
        Only available when the Student Thesis module is enabled

        :param related_student_theses: The related_student_theses of this WSResearchOutput.
        :type: list[WSStudentThesisRef]
        """

        self._related_student_theses = related_student_theses

    @property
    def confidential(self):
        """
        Gets the confidential of this WSResearchOutput.

        :return: The confidential of this WSResearchOutput.
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """
        Sets the confidential of this WSResearchOutput.

        :param confidential: The confidential of this WSResearchOutput.
        :type: bool
        """

        self._confidential = confidential

    @property
    def visibilities(self):
        """
        Gets the visibilities of this WSResearchOutput.

        :return: The visibilities of this WSResearchOutput.
        :rtype: list[WSVisibility]
        """
        return self._visibilities

    @visibilities.setter
    def visibilities(self, visibilities):
        """
        Sets the visibilities of this WSResearchOutput.

        :param visibilities: The visibilities of this WSResearchOutput.
        :type: list[WSVisibility]
        """

        self._visibilities = visibilities

    @property
    def workflows(self):
        """
        Gets the workflows of this WSResearchOutput.

        :return: The workflows of this WSResearchOutput.
        :rtype: list[WSWorkflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this WSResearchOutput.

        :param workflows: The workflows of this WSResearchOutput.
        :type: list[WSWorkflow]
        """

        self._workflows = workflows

    @property
    def externalable_info(self):
        """
        Gets the externalable_info of this WSResearchOutput.

        :return: The externalable_info of this WSResearchOutput.
        :rtype: WSExternalableInformation
        """
        return self._externalable_info

    @externalable_info.setter
    def externalable_info(self, externalable_info):
        """
        Sets the externalable_info of this WSResearchOutput.

        :param externalable_info: The externalable_info of this WSResearchOutput.
        :type: WSExternalableInformation
        """

        self._externalable_info = externalable_info

    @property
    def info(self):
        """
        Gets the info of this WSResearchOutput.

        :return: The info of this WSResearchOutput.
        :rtype: WSContentInformation
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this WSResearchOutput.

        :param info: The info of this WSResearchOutput.
        :type: WSContentInformation
        """

        self._info = info

    @property
    def total_scopus_citations(self):
        """
        Gets the total_scopus_citations of this WSResearchOutput.

        :return: The total_scopus_citations of this WSResearchOutput.
        :rtype: int
        """
        return self._total_scopus_citations

    @total_scopus_citations.setter
    def total_scopus_citations(self, total_scopus_citations):
        """
        Sets the total_scopus_citations of this WSResearchOutput.

        :param total_scopus_citations: The total_scopus_citations of this WSResearchOutput.
        :type: int
        """

        self._total_scopus_citations = total_scopus_citations

    @property
    def scopus_metrics(self):
        """
        Gets the scopus_metrics of this WSResearchOutput.

        :return: The scopus_metrics of this WSResearchOutput.
        :rtype: list[WSResearchOutputMetric]
        """
        return self._scopus_metrics

    @scopus_metrics.setter
    def scopus_metrics(self, scopus_metrics):
        """
        Sets the scopus_metrics of this WSResearchOutput.

        :param scopus_metrics: The scopus_metrics of this WSResearchOutput.
        :type: list[WSResearchOutputMetric]
        """

        self._scopus_metrics = scopus_metrics

    @property
    def article_processing_charge_amount(self):
        """
        Gets the article_processing_charge_amount of this WSResearchOutput.

        :return: The article_processing_charge_amount of this WSResearchOutput.
        :rtype: float
        """
        return self._article_processing_charge_amount

    @article_processing_charge_amount.setter
    def article_processing_charge_amount(self, article_processing_charge_amount):
        """
        Sets the article_processing_charge_amount of this WSResearchOutput.

        :param article_processing_charge_amount: The article_processing_charge_amount of this WSResearchOutput.
        :type: float
        """

        self._article_processing_charge_amount = article_processing_charge_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSResearchOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
