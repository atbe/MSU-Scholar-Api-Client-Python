# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WSContentInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_date': 'datetime',
        'modified_by': 'str',
        'modified_date': 'datetime',
        'portal_url': 'str',
        'used_content': 'list[WSUsedContent]',
        'previous_uuids': 'list[str]'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'modified_by': 'modifiedBy',
        'modified_date': 'modifiedDate',
        'portal_url': 'portalUrl',
        'used_content': 'usedContent',
        'previous_uuids': 'previousUuids'
    }

    def __init__(self, created_by=None, created_date=None, modified_by=None, modified_date=None, portal_url=None, used_content=None, previous_uuids=None):
        """
        WSContentInformation - a model defined in Swagger
        """

        self._created_by = None
        self._created_date = None
        self._modified_by = None
        self._modified_date = None
        self._portal_url = None
        self._used_content = None
        self._previous_uuids = None

        if created_by is not None:
          self.created_by = created_by
        if created_date is not None:
          self.created_date = created_date
        if modified_by is not None:
          self.modified_by = modified_by
        if modified_date is not None:
          self.modified_date = modified_date
        if portal_url is not None:
          self.portal_url = portal_url
        if used_content is not None:
          self.used_content = used_content
        if previous_uuids is not None:
          self.previous_uuids = previous_uuids

    @property
    def created_by(self):
        """
        Gets the created_by of this WSContentInformation.

        :return: The created_by of this WSContentInformation.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this WSContentInformation.

        :param created_by: The created_by of this WSContentInformation.
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """
        Gets the created_date of this WSContentInformation.

        :return: The created_date of this WSContentInformation.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this WSContentInformation.

        :param created_date: The created_date of this WSContentInformation.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def modified_by(self):
        """
        Gets the modified_by of this WSContentInformation.

        :return: The modified_by of this WSContentInformation.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this WSContentInformation.

        :param modified_by: The modified_by of this WSContentInformation.
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_date(self):
        """
        Gets the modified_date of this WSContentInformation.

        :return: The modified_date of this WSContentInformation.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """
        Sets the modified_date of this WSContentInformation.

        :param modified_date: The modified_date of this WSContentInformation.
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def portal_url(self):
        """
        Gets the portal_url of this WSContentInformation.

        :return: The portal_url of this WSContentInformation.
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """
        Sets the portal_url of this WSContentInformation.

        :param portal_url: The portal_url of this WSContentInformation.
        :type: str
        """

        self._portal_url = portal_url

    @property
    def used_content(self):
        """
        Gets the used_content of this WSContentInformation.

        :return: The used_content of this WSContentInformation.
        :rtype: list[WSUsedContent]
        """
        return self._used_content

    @used_content.setter
    def used_content(self, used_content):
        """
        Sets the used_content of this WSContentInformation.

        :param used_content: The used_content of this WSContentInformation.
        :type: list[WSUsedContent]
        """

        self._used_content = used_content

    @property
    def previous_uuids(self):
        """
        Gets the previous_uuids of this WSContentInformation.

        :return: The previous_uuids of this WSContentInformation.
        :rtype: list[str]
        """
        return self._previous_uuids

    @previous_uuids.setter
    def previous_uuids(self, previous_uuids):
        """
        Sets the previous_uuids of this WSContentInformation.

        :param previous_uuids: The previous_uuids of this WSContentInformation.
        :type: list[str]
        """

        self._previous_uuids = previous_uuids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WSContentInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
