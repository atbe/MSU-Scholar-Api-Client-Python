# coding: utf-8

"""
    PURE API 510

    This is the Pure Web Service. Listed below are all available endpoints, along with a short description.<br/>In order to use the Pure Web Service, you must enter an API key. These are generated in the Administrator tab of Pure, and issues with a given set of available endpoints.<br/>To enter your API key and begin your use, press the Authorize button to at the top of the page. You are then presented with two options for entering the API key: the first option is to use the API key in query format, and the second option is to use the API key in a header.<br/> For further documentation, see <a href=\"documentation/Default.htm\">API Documentation</a>.<br/>A new version of the API is released with each major version of Pure, and remains available for one year. This version is no longer available in Pure 5.14<br/>The old web service is deprecated, but still available <a href=\"../../../doc/\">here</a>, and it will no longer be available in Pure 5.13

    OpenAPI spec version: 510
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SemanticgroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_available_orderings(self, **kwargs):
        """
        Lists available orderings
        Lists all orderings available to the semantic groups endpoint. These values can be used by the order parameter
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_orderings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WSOrderingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_available_orderings_with_http_info(**kwargs)
        else:
            (data) = self.get_available_orderings_with_http_info(**kwargs)
            return data

    def get_available_orderings_with_http_info(self, **kwargs):
        """
        Lists available orderings
        Lists all orderings available to the semantic groups endpoint. These values can be used by the order parameter
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_orderings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WSOrderingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_orderings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = ['api-key', 'apiKey']

        return self.api_client.call_api('/semantic-groups-meta/orderings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WSOrderingsList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_available_renderings(self, **kwargs):
        """
        Lists available renderings
        Lists all renderings available to the semantic groups endpoint. These values can be used by the rendering parameter
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_renderings(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WSRenderingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_available_renderings_with_http_info(**kwargs)
        else:
            (data) = self.get_available_renderings_with_http_info(**kwargs)
            return data

    def get_available_renderings_with_http_info(self, **kwargs):
        """
        Lists available renderings
        Lists all renderings available to the semantic groups endpoint. These values can be used by the rendering parameter
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_available_renderings_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: WSRenderingsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_renderings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = ['api-key', 'apiKey']

        return self.api_client.call_api('/semantic-groups-meta/renderings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WSRenderingsList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_semantic_group(self, id, **kwargs):
        """
        Get semantic group
        Get semantic group with specific ID (path parameter).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_semantic_group(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Id of the desired semantic group (required)
        :param str id_classification: Specifies an optional classification used to specify which type of ID should be used in the match. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\">Read more</a>
        :param list[str] fields: Limit the fields included in the response. E.g. 'nameVariants.nameVariant' will only return the name variants. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\">Read more</a>
        :param list[str] locale: Enter the desired locale. E.g. 'en_GB' will only return the English text strings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\">Read more</a>
        :param list[str] fallback_locale: Fallback locale string. Syntax is 'Locale1=>Locale2' to map Locale1 to Locale2. Example: 'da_DK=>en_GB'. Locale1 must be equal to locale provided in the locale string. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\">Read more</a>
        :param list[str] rendering: HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\">Read more</a>
        :param bool return_used_content: If 'true', the id's of the content used to create HTML renderings are returned as part of the result. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\">Read more</a>
        :param bool navigation_link: Include navigation links for paging and content. Default: true. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\">Read more</a>
        :return: WSSemanticGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_semantic_group_with_http_info(id, **kwargs)
        else:
            (data) = self.get_semantic_group_with_http_info(id, **kwargs)
            return data

    def get_semantic_group_with_http_info(self, id, **kwargs):
        """
        Get semantic group
        Get semantic group with specific ID (path parameter).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_semantic_group_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Id of the desired semantic group (required)
        :param str id_classification: Specifies an optional classification used to specify which type of ID should be used in the match. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#idclassification_param\">Read more</a>
        :param list[str] fields: Limit the fields included in the response. E.g. 'nameVariants.nameVariant' will only return the name variants. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\">Read more</a>
        :param list[str] locale: Enter the desired locale. E.g. 'en_GB' will only return the English text strings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\">Read more</a>
        :param list[str] fallback_locale: Fallback locale string. Syntax is 'Locale1=>Locale2' to map Locale1 to Locale2. Example: 'da_DK=>en_GB'. Locale1 must be equal to locale provided in the locale string. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\">Read more</a>
        :param list[str] rendering: HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\">Read more</a>
        :param bool return_used_content: If 'true', the id's of the content used to create HTML renderings are returned as part of the result. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\">Read more</a>
        :param bool navigation_link: Include navigation links for paging and content. Default: true. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\">Read more</a>
        :return: WSSemanticGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_classification', 'fields', 'locale', 'fallback_locale', 'rendering', 'return_used_content', 'navigation_link']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_semantic_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_semantic_group`")

        if 'id_classification' in params and not re.search('ID classification pattern', params['id_classification']):
            raise ValueError("Invalid value for parameter `id_classification` when calling `get_semantic_group`, must conform to the pattern `/ID classification pattern/`")
        if 'fields' in params and not re.search('Fields pattern', params['fields']):
            raise ValueError("Invalid value for parameter `fields` when calling `get_semantic_group`, must conform to the pattern `/Fields pattern/`")
        if 'locale' in params and not re.search('Locale pattern', params['locale']):
            raise ValueError("Invalid value for parameter `locale` when calling `get_semantic_group`, must conform to the pattern `/Locale pattern/`")
        if 'fallback_locale' in params and not re.search('Fallback locale pattern', params['fallback_locale']):
            raise ValueError("Invalid value for parameter `fallback_locale` when calling `get_semantic_group`, must conform to the pattern `/Fallback locale pattern/`")
        if 'rendering' in params and not re.search('Rendering pattern', params['rendering']):
            raise ValueError("Invalid value for parameter `rendering` when calling `get_semantic_group`, must conform to the pattern `/Rendering pattern/`")
        if 'return_used_content' in params and not re.search('ReturnUsedContent pattern', params['return_used_content']):
            raise ValueError("Invalid value for parameter `return_used_content` when calling `get_semantic_group`, must conform to the pattern `/ReturnUsedContent pattern/`")
        if 'navigation_link' in params and not re.search('NavigationLink pattern', params['navigation_link']):
            raise ValueError("Invalid value for parameter `navigation_link` when calling `get_semantic_group`, must conform to the pattern `/NavigationLink pattern/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'id_classification' in params:
            query_params.append(('idClassification', params['id_classification']))
        if 'fields' in params:
            query_params.append(('fields', params['fields']))
            collection_formats['fields'] = 'multi'
        if 'locale' in params:
            query_params.append(('locale', params['locale']))
            collection_formats['locale'] = 'multi'
        if 'fallback_locale' in params:
            query_params.append(('fallbackLocale', params['fallback_locale']))
            collection_formats['fallbackLocale'] = 'multi'
        if 'rendering' in params:
            query_params.append(('rendering', params['rendering']))
            collection_formats['rendering'] = 'multi'
        if 'return_used_content' in params:
            query_params.append(('returnUsedContent', params['return_used_content']))
        if 'navigation_link' in params:
            query_params.append(('navigationLink', params['navigation_link']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = ['api-key', 'apiKey']

        return self.api_client.call_api('/semantic-groups/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WSSemanticGroup',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_semantic_groups(self, **kwargs):
        """
        Lists all semanticGroups
        Lists all semantic groups in the PURE installation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_semantic_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Free text search string using Lucene query syntax. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#q_param\">Read more</a>
        :param list[str] order: Specify the ordering of content in the result. Default: ID ascending. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#order_param\">Read more</a>
        :param list[str] fields: Limit the fields included in the response. E.g. 'nameVariants.nameVariant' will only return the name variants. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\">Read more</a>
        :param list[str] locale: Enter the desired locale. E.g. 'en_GB' will only return the English text strings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\">Read more</a>
        :param list[str] fallback_locale: Fallback locale string. Syntax is 'Locale1=>Locale2' to map Locale1 to Locale2. Example: 'da_DK=>en_GB'. Locale1 must be equal to locale provided in the locale string. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\">Read more</a>
        :param list[str] rendering: HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\">Read more</a>
        :param str linking_strategy: Specifies the linking strategy to use used when creating HTML renderings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\">Read more</a>
        :param bool return_used_content: If 'true', the id's of the content used to create HTML renderings are returned as part of the result. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\">Read more</a>
        :param bool navigation_link: Include navigation links for paging and content. Default: true. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\">Read more</a>
        :param int size: Enter the number of results per window. Default: 10. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\">Read more</a>
        :param int offset: Enter the offset into the total result set where items should be returned from. Default: 0. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\">Read more</a>
        :param int page: Enter the desired page number. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\">Read more</a>
        :param int page_size: Enter the desired number of results per page. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\">Read more</a>
        :return: WSSemanticGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_semantic_groups_with_http_info(**kwargs)
        else:
            (data) = self.list_semantic_groups_with_http_info(**kwargs)
            return data

    def list_semantic_groups_with_http_info(self, **kwargs):
        """
        Lists all semanticGroups
        Lists all semantic groups in the PURE installation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_semantic_groups_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Free text search string using Lucene query syntax. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#q_param\">Read more</a>
        :param list[str] order: Specify the ordering of content in the result. Default: ID ascending. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#order_param\">Read more</a>
        :param list[str] fields: Limit the fields included in the response. E.g. 'nameVariants.nameVariant' will only return the name variants. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fields_param\">Read more</a>
        :param list[str] locale: Enter the desired locale. E.g. 'en_GB' will only return the English text strings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#locale_param\">Read more</a>
        :param list[str] fallback_locale: Fallback locale string. Syntax is 'Locale1=>Locale2' to map Locale1 to Locale2. Example: 'da_DK=>en_GB'. Locale1 must be equal to locale provided in the locale string. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#fallbackLocale_param\">Read more</a>
        :param list[str] rendering: HTML rendering formats. If rendering formats are specified, the content will be returned in these formats instead of XML. If XML is also wanted, it can be included using the fields parameter. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#rendering_param\">Read more</a>
        :param str linking_strategy: Specifies the linking strategy to use used when creating HTML renderings. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#linkingStrategy_param\">Read more</a>
        :param bool return_used_content: If 'true', the id's of the content used to create HTML renderings are returned as part of the result. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#usedContent_param\">Read more</a>
        :param bool navigation_link: Include navigation links for paging and content. Default: true. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#navLink_param\">Read more</a>
        :param int size: Enter the number of results per window. Default: 10. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\">Read more</a>
        :param int offset: Enter the offset into the total result set where items should be returned from. Default: 0. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#size_offset_param\">Read more</a>
        :param int page: Enter the desired page number. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\">Read more</a>
        :param int page_size: Enter the desired number of results per page. <a href=\"documentation/Content/Topics/Parameter_Descriptions.htm#page_size_param\">Read more</a>
        :return: WSSemanticGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'order', 'fields', 'locale', 'fallback_locale', 'rendering', 'linking_strategy', 'return_used_content', 'navigation_link', 'size', 'offset', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_semantic_groups" % key
                )
            params[key] = val
        del params['kwargs']

        if 'q' in params and not re.search('Search pattern', params['q']):
            raise ValueError("Invalid value for parameter `q` when calling `list_semantic_groups`, must conform to the pattern `/Search pattern/`")
        if 'order' in params and not re.search('Order pattern', params['order']):
            raise ValueError("Invalid value for parameter `order` when calling `list_semantic_groups`, must conform to the pattern `/Order pattern/`")
        if 'fields' in params and not re.search('Fields pattern', params['fields']):
            raise ValueError("Invalid value for parameter `fields` when calling `list_semantic_groups`, must conform to the pattern `/Fields pattern/`")
        if 'locale' in params and not re.search('Locale pattern', params['locale']):
            raise ValueError("Invalid value for parameter `locale` when calling `list_semantic_groups`, must conform to the pattern `/Locale pattern/`")
        if 'fallback_locale' in params and not re.search('Fallback locale pattern', params['fallback_locale']):
            raise ValueError("Invalid value for parameter `fallback_locale` when calling `list_semantic_groups`, must conform to the pattern `/Fallback locale pattern/`")
        if 'rendering' in params and not re.search('Rendering pattern', params['rendering']):
            raise ValueError("Invalid value for parameter `rendering` when calling `list_semantic_groups`, must conform to the pattern `/Rendering pattern/`")
        if 'linking_strategy' in params and not re.search('Linkingstrategy pattern', params['linking_strategy']):
            raise ValueError("Invalid value for parameter `linking_strategy` when calling `list_semantic_groups`, must conform to the pattern `/Linkingstrategy pattern/`")
        if 'return_used_content' in params and not re.search('ReturnUsedContent pattern', params['return_used_content']):
            raise ValueError("Invalid value for parameter `return_used_content` when calling `list_semantic_groups`, must conform to the pattern `/ReturnUsedContent pattern/`")
        if 'navigation_link' in params and not re.search('NavigationLink pattern', params['navigation_link']):
            raise ValueError("Invalid value for parameter `navigation_link` when calling `list_semantic_groups`, must conform to the pattern `/NavigationLink pattern/`")
        if 'size' in params and not re.search('Size pattern', params['size']):
            raise ValueError("Invalid value for parameter `size` when calling `list_semantic_groups`, must conform to the pattern `/Size pattern/`")
        if 'offset' in params and not re.search('Offset pattern', params['offset']):
            raise ValueError("Invalid value for parameter `offset` when calling `list_semantic_groups`, must conform to the pattern `/Offset pattern/`")
        if 'page' in params and not re.search('Page pattern', params['page']):
            raise ValueError("Invalid value for parameter `page` when calling `list_semantic_groups`, must conform to the pattern `/Page pattern/`")
        if 'page_size' in params and not re.search('PageSize pattern', params['page_size']):
            raise ValueError("Invalid value for parameter `page_size` when calling `list_semantic_groups`, must conform to the pattern `/PageSize pattern/`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'order' in params:
            query_params.append(('order', params['order']))
            collection_formats['order'] = 'multi'
        if 'fields' in params:
            query_params.append(('fields', params['fields']))
            collection_formats['fields'] = 'multi'
        if 'locale' in params:
            query_params.append(('locale', params['locale']))
            collection_formats['locale'] = 'multi'
        if 'fallback_locale' in params:
            query_params.append(('fallbackLocale', params['fallback_locale']))
            collection_formats['fallbackLocale'] = 'multi'
        if 'rendering' in params:
            query_params.append(('rendering', params['rendering']))
            collection_formats['rendering'] = 'multi'
        if 'linking_strategy' in params:
            query_params.append(('linkingStrategy', params['linking_strategy']))
        if 'return_used_content' in params:
            query_params.append(('returnUsedContent', params['return_used_content']))
        if 'navigation_link' in params:
            query_params.append(('navigationLink', params['navigation_link']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/xml', 'application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/xml', 'application/json'])

        # Authentication setting
        auth_settings = ['api-key', 'apiKey']

        return self.api_client.call_api('/semantic-groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WSSemanticGroupListResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
